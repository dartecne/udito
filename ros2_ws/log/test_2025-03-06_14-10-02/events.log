[0.000000] (-) TimerEvent: {}
[0.000427] (head_package) JobQueued: {'identifier': 'head_package', 'dependencies': OrderedDict([('head_package', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/head_package')])}
[0.000479] (ldlidar_component) JobQueued: {'identifier': 'ldlidar_component', 'dependencies': OrderedDict([('ldlidar_component', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_component')])}
[0.000511] (respeaker_ros) JobQueued: {'identifier': 'respeaker_ros', 'dependencies': OrderedDict([('respeaker_ros', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/respeaker_ros')])}
[0.000536] (ldlidar_node) JobQueued: {'identifier': 'ldlidar_node', 'dependencies': OrderedDict([('ldlidar_component', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_component'), ('ldlidar_node', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_node')])}
[0.000564] (ldlidar) JobQueued: {'identifier': 'ldlidar', 'dependencies': OrderedDict([('ldlidar_component', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_component'), ('ldlidar_node', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_node'), ('ldlidar', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar')])}
[0.001039] (ldlidar_component) JobStarted: {'identifier': 'ldlidar_component'}
[0.015623] (head_package) JobStarted: {'identifier': 'head_package'}
[0.023666] (head_package) JobEnded: {'identifier': 'head_package', 'rc': 1}
[0.025276] (respeaker_ros) JobStarted: {'identifier': 'respeaker_ros'}
[0.099775] (-) TimerEvent: {}
[0.200159] (-) TimerEvent: {}
[0.244872] (ldlidar_component) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_component', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'udito'), ('SSH_CLIENT', '192.168.1.14 53544 22'), ('LC_TIME', 'es_ES.UTF-8'), ('XDG_SESSION_TYPE', 'tty'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_component/lib:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_wait_set/lib:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_subscriber/lib:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_composition/lib:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_component/lib:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_wait_set/lib:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_subscriber/lib:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_composition/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('MOTD_SHOWN', 'pam'), ('HOME', '/home/udito'), ('OLDPWD', '/home/udito/OneDrive/UDITO/udito/ros2_ws/src'), ('SSH_TTY', '/dev/pts/0'), ('ROS_PYTHON_VERSION', '3'), ('GTK_MODULES', 'appmenu-gtk-module'), ('PS1', '(python-3.9.21) \\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$'), ('LC_MONETARY', 'es_ES.UTF-8'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('_colcon_cd_root', '/opt/ros/humble/'), ('UBUNTU_MENUPROXY', '1'), ('COLCON_PREFIX_PATH', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'udito'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('TERM', 'xterm'), ('XDG_SESSION_ID', '5'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/home/udito/.local/bin:/opt/ros/humble/bin:/home/vboxuser/OneDrive/UDITO/udito/python-3.9.21/bin:/home/udito/.local/bin:/home/udito/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'), ('LC_ADDRESS', 'es_ES.UTF-8'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', 'localhost:10.0'), ('LANG', 'en_US.UTF-8'), ('LC_TELEPHONE', 'es_ES.UTF-8'), ('VIRTUAL_ENV_PROMPT', '(python-3.9.21)'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('AMENT_PREFIX_PATH', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/py_test_package:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_node:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_component:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/launch_testing_examples:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_pointcloud_publisher:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_service:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_guard_conditions:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_executors:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_wait_set:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_multithreaded_executor:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_timer:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_service:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_composition:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_cbg_executor:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_async_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/py_test_package:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_node:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_component:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/launch_testing_examples:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_pointcloud_publisher:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_service:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_guard_conditions:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_executors:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_wait_set:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_multithreaded_executor:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_timer:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_service:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_composition:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_cbg_executor:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_async_client:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('LC_NAME', 'es_ES.UTF-8'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'es_ES.UTF-8'), ('LC_IDENTIFICATION', 'es_ES.UTF-8'), ('VIRTUAL_ENV', '/home/vboxuser/OneDrive/UDITO/udito/python-3.9.21'), ('PWD', '/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_component'), ('LC_ALL', 'en_US.UTF-8'), ('SSH_CONNECTION', '192.168.1.14 53544 192.168.1.28 22'), ('XDG_DATA_DIRS', '/home/udito/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/py_test_package/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/launch_testing_examples/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_pointcloud_publisher/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_subscriber/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_service/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_publisher/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_client/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_action_server/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_action_client/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_guard_conditions/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_executors/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/py_test_package/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/launch_testing_examples/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_pointcloud_publisher/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_subscriber/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_service/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_publisher/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_client/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_action_server/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_action_client/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_guard_conditions/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_executors/lib/python3.10/site-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('LC_NUMERIC', 'es_ES.UTF-8'), ('LC_PAPER', 'es_ES.UTF-8'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_component:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_node:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_wait_set:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_multithreaded_executor:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_timer:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_service:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_composition:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_cbg_executor:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_async_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_node:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_component:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_wait_set:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_multithreaded_executor:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_timer:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_service:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_composition:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_cbg_executor:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_async_client')]), 'shell': False}
[0.254143] (respeaker_ros) JobEnded: {'identifier': 'respeaker_ros', 'rc': 0}
[0.263367] (ldlidar_component) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_component/CTestConfiguration.ini\n'}
[0.263606] (ldlidar_component) StdoutLine: {'line': b'Parse Config file:/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_component/CTestConfiguration.ini\n'}
[0.263844] (ldlidar_component) StdoutLine: {'line': b'   Site: udito\n'}
[0.263947] (ldlidar_component) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.264658] (ldlidar_component) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.264796] (ldlidar_component) StdoutLine: {'line': b'Create new tag: 20250306-1310 - Experimental\n'}
[0.264881] (ldlidar_component) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/CTestConfiguration.ini\n'}
[0.264969] (ldlidar_component) StdoutLine: {'line': b'Parse Config file:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/CTestConfiguration.ini\n'}
[0.265044] (ldlidar_component) StdoutLine: {'line': b'Test project /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component\n'}
[0.265116] (ldlidar_component) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.265430] (ldlidar_component) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.265674] (ldlidar_component) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.265761] (ldlidar_component) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.265838] (ldlidar_component) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.265909] (ldlidar_component) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.265978] (ldlidar_component) StdoutLine: {'line': b'test 1\n'}
[0.266046] (ldlidar_component) StdoutLine: {'line': b'    Start 1: copyright\n'}
[0.266115] (ldlidar_component) StdoutLine: {'line': b'\n'}
[0.266183] (ldlidar_component) StdoutLine: {'line': b'1: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/copyright.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_copyright/copyright.txt" "--command" "/opt/ros/humble/bin/ament_copyright" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/copyright.xunit.xml"\n'}
[0.266297] (ldlidar_component) StdoutLine: {'line': b'1: Test timeout computed to be: 200\n'}
[0.300303] (-) TimerEvent: {}
[0.400726] (-) TimerEvent: {}
[0.491895] (ldlidar_component) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':\n"}
[0.492149] (ldlidar_component) StdoutLine: {'line': b'1:  - /opt/ros/humble/bin/ament_copyright --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/copyright.xunit.xml\n'}
[0.500827] (-) TimerEvent: {}
[0.601136] (-) TimerEvent: {}
[0.701438] (-) TimerEvent: {}
[0.801750] (-) TimerEvent: {}
[0.902151] (-) TimerEvent: {}
[1.002452] (-) TimerEvent: {}
[1.097759] (ldlidar_component) StdoutLine: {'line': b'1: component/include/defines.hpp: could not find copyright notice\n'}
[1.098009] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/include/core/ldlidar_datatype.h: could not find copyright notice\n'}
[1.098098] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/include/core/ldlidar_driver.h: could not find copyright notice\n'}
[1.098176] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/include/dataprocess/lipkg.h: could not find copyright notice\n'}
[1.098275] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/include/filter/tofbf.h: could not find copyright notice\n'}
[1.098354] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/include/logger/log_module.h: could not find copyright notice\n'}
[1.098427] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/include/networkcom/network_socket_interface_linux.h: could not find copyright notice\n'}
[1.098500] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/include/serialcom/serial_interface_linux.h: could not find copyright notice\n'}
[1.098572] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/src/core/ldlidar_driver.cpp: could not find copyright notice\n'}
[1.098642] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/src/dataprocess/lipkg.cpp: could not find copyright notice\n'}
[1.098712] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/src/filter/tofbf.cpp: could not find copyright notice\n'}
[1.098782] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/src/logger/log_module.cpp: could not find copyright notice\n'}
[1.098877] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp: could not find copyright notice\n'}
[1.098950] (ldlidar_component) StdoutLine: {'line': b'1: ldlidar_driver/src/serialcom/serial_interface_linux.cpp: could not find copyright notice\n'}
[1.099021] (ldlidar_component) StdoutLine: {'line': b'1: 14 errors, checked 20 files\n'}
[1.102587] (-) TimerEvent: {}
[1.114220] (ldlidar_component) StdoutLine: {'line': b'1: -- run_test.py: return code 1\n'}
[1.114515] (ldlidar_component) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/copyright.xunit.xml'\n"}
[1.134139] (ldlidar_component) StdoutLine: {'line': b'1/7 Test #1: copyright ........................***Failed    0.87 sec\n'}
[1.135231] (ldlidar_component) StdoutLine: {'line': b'test 2\n'}
[1.135483] (ldlidar_component) StdoutLine: {'line': b'    Start 2: cppcheck\n'}
[1.135644] (ldlidar_component) StdoutLine: {'line': b'\n'}
[1.135778] (ldlidar_component) StdoutLine: {'line': b'2: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cppcheck.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/humble/bin/ament_cppcheck" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cppcheck.xunit.xml" "--include_dirs" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/include" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom"\n'}
[1.135960] (ldlidar_component) StdoutLine: {'line': b'2: Test timeout computed to be: 300\n'}
[1.202710] (-) TimerEvent: {}
[1.250711] (ldlidar_component) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':\n"}
[1.251525] (ldlidar_component) StdoutLine: {'line': b'2:  - /opt/ros/humble/bin/ament_cppcheck --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cppcheck.xunit.xml --include_dirs /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/include /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom\n'}
[1.302815] (-) TimerEvent: {}
[1.403136] (-) TimerEvent: {}
[1.503531] (-) TimerEvent: {}
[1.559217] (ldlidar_component) StdoutLine: {'line': b'2: cppcheck 2.7 has known performance issues and therefore will not be used, set the AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS environment variable to override this.\n'}
[1.576545] (ldlidar_component) StdoutLine: {'line': b'2: -- run_test.py: return code 0\n'}
[1.576836] (ldlidar_component) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cppcheck.xunit.xml'\n"}
[1.592801] (ldlidar_component) StdoutLine: {'line': b'2/7 Test #2: cppcheck .........................   Passed    0.46 sec\n'}
[1.593172] (ldlidar_component) StdoutLine: {'line': b'test 3\n'}
[1.593362] (ldlidar_component) StdoutLine: {'line': b'    Start 3: cpplint\n'}
[1.593484] (ldlidar_component) StdoutLine: {'line': b'\n'}
[1.593594] (ldlidar_component) StdoutLine: {'line': b'3: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cpplint.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_cpplint/cpplint.txt" "--command" "/opt/ros/humble/bin/ament_cpplint" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cpplint.xunit.xml"\n'}
[1.593707] (ldlidar_component) StdoutLine: {'line': b'3: Test timeout computed to be: 120\n'}
[1.603654] (-) TimerEvent: {}
[1.704191] (-) TimerEvent: {}
[1.706037] (ldlidar_component) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':\n"}
[1.706387] (ldlidar_component) StdoutLine: {'line': b'3:  - /opt/ros/humble/bin/ament_cpplint --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cpplint.xunit.xml\n'}
[1.804261] (-) TimerEvent: {}
[1.873099] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp:0:  No copyright message found.  You should have a line: "Copyright [year] <Copyright Owner>"  [legal/copyright] [5]\n'}
[1.874368] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp:1:  #ifndef header guard has wrong style, please use: DEFINES_HPP_  [build/header_guard] [5]\n'}
[1.874663] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp:9:  #endif line should be "#endif  // DEFINES_HPP_"  [build/header_guard] [5]\n'}
[1.891316] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp:9:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[1.904340] (-) TimerEvent: {}
[1.911597] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/ldlidar_component.hpp:37:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[1.950832] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/ldlidar_component.hpp:142:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.004447] (-) TimerEvent: {}
[2.045325] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:412:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]\n'}
[2.049797] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:427:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]\n'}
[2.052547] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:438:  Lines should be <= 100 characters long  [whitespace/line_length] [2]\n'}
[2.052832] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:438:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.054063] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:443:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.055825] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:450:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.057577] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:455:  Lines should be <= 100 characters long  [whitespace/line_length] [2]\n'}
[2.104532] (-) TimerEvent: {}
[2.134135] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:21:  #ifndef header guard has wrong style, please use: CORE__LDLIDAR_DATATYPE_H_  [build/header_guard] [5]\n'}
[2.134452] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:96:  #endif line should be "#endif  // CORE__LDLIDAR_DATATYPE_H_"  [build/header_guard] [5]\n'}
[2.147405] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:47:  Lines should be <= 100 characters long  [whitespace/line_length] [2]\n'}
[2.147675] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:48:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.148061] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:49:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.148932] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:53:  Do not indent within a namespace  [runtime/indentation_namespace] [4]\n'}
[2.150782] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:57:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.151134] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:58:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.158112] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:80:  Do not indent within a namespace  [runtime/indentation_namespace] [4]\n'}
[2.163342] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:94:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.168100] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:21:  #ifndef header guard has wrong style, please use: CORE__LDLIDAR_DRIVER_H_  [build/header_guard] [5]\n'}
[2.168419] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:166:  #endif line should be "#endif  // CORE__LDLIDAR_DRIVER_H_"  [build/header_guard] [5]\n'}
[2.175411] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:27:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.176398] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:28:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.177457] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:29:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.178417] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:30:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.183215] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:44:  Do not indent within a namespace  [runtime/indentation_namespace] [4]\n'}
[2.204623] (-) TimerEvent: {}
[2.215289] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:164:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.215662] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:166:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.218754] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:153:  Add #include <string> for string  [build/include_what_you_use] [4]\n'}
[2.220634] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:22:  #ifndef header guard has wrong style, please use: DATAPROCESS__LIPKG_H_  [build/header_guard] [5]\n'}
[2.220895] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:135:  #endif line should be "#endif  // DATAPROCESS__LIPKG_H_"  [build/header_guard] [5]\n'}
[2.229601] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:30:  Found C system header after C++ system header. Should be: lipkg.h, c system, c++ system, other.  [build/include_order] [4]\n'}
[2.230090] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:32:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.231066] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:33:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.240654] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:62:  Do not indent within a namespace  [runtime/indentation_namespace] [4]\n'}
[2.259858] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:121:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]\n'}
[2.263673] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:133:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.264229] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:135:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.268838] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:22:  #ifndef header guard has wrong style, please use: FILTER__TOFBF_H_  [build/header_guard] [5]\n'}
[2.269109] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:68:  #endif line should be "#endif  // FILTER__TOFBF_H_"  [build/header_guard] [5]\n'}
[2.276754] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:28:  Found C system header after C++ system header. Should be: tofbf.h, c system, c++ system, other.  [build/include_order] [4]\n'}
[2.278992] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:33:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.282395] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:44:  Do not indent within a namespace  [runtime/indentation_namespace] [4]\n'}
[2.291343] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:66:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.291805] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:68:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.304703] (-) TimerEvent: {}
[2.320213] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:18:  #ifndef header guard has wrong style, please use: LOGGER__LOG_MODULE_H_  [build/header_guard] [5]\n'}
[2.320490] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:214:  #endif line should be "#endif  // LOGGER__LOG_MODULE_H_"  [build/header_guard] [5]\n'}
[2.326572] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:28:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.330602] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:35:  Found C system header after C++ system header. Should be: log_module.h, c system, c++ system, other.  [build/include_order] [4]\n'}
[2.332357] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:40:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.334097] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:44:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.338863] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:57:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\n'}
[2.339145] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:57:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]\n'}
[2.341116] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:64:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.378558] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:181:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]\n'}
[2.391263] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:214:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.391500] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:214:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.396936] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:20:  #ifndef header guard has wrong style, please use: NETWORKCOM__NETWORK_SOCKET_INTERFACE_LINUX_H_  [build/header_guard] [5]\n'}
[2.397364] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:122:  #endif line should be "#endif  // NETWORKCOM__NETWORK_SOCKET_INTERFACE_LINUX_H_"  [build/header_guard] [5]\n'}
[2.404796] (-) TimerEvent: {}
[2.421344] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:57:  Do not indent within a namespace  [runtime/indentation_namespace] [4]\n'}
[2.427992] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:75:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]\n'}
[2.433493] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:91:  Do not indent within a namespace  [runtime/indentation_namespace] [4]\n'}
[2.439441] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:107:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]\n'}
[2.440114] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:109:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.444760] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:121:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.444996] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:122:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.452332] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:20:  #ifndef header guard has wrong style, please use: SERIALCOM__SERIAL_INTERFACE_LINUX_H_  [build/header_guard] [5]\n'}
[2.452576] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:79:  #endif line should be "#endif  // SERIALCOM__SERIAL_INTERFACE_LINUX_H_"  [build/header_guard] [5]\n'}
[2.473130] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:47:  Do not indent within a namespace  [runtime/indentation_namespace] [4]\n'}
[2.481195] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:69:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]\n'}
[2.484170] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:77:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.484621] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:79:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.493991] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp:21:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.504892] (-) TimerEvent: {}
[2.510964] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp:120:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\n'}
[2.525613] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp:189:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]\n'}
[2.555067] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp:352:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.568623] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:22:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.581001] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:74:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\n'}
[2.581138] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:74:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]\n'}
[2.581468] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:79:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\n'}
[2.581589] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:79:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]\n'}
[2.591309] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:135:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]\n'}
[2.591683] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:136:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]\n'}
[2.594282] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:153:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]\n'}
[2.597897] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:160:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]\n'}
[2.598125] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:161:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\n'}
[2.600744] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:172:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.600977] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:173:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.602125] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:176:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]\n'}
[2.604979] (-) TimerEvent: {}
[2.605527] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:189:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.609678] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:208:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]\n'}
[2.615009] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:235:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]\n'}
[2.617209] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:246:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]\n'}
[2.631958] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:345:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]\n'}
[2.632568] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:350:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.646340] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:1:  Complex multi-line /*...*/-style comment found. Lint may give bogus warnings.  Consider replacing these with //-style comments, with #if 0...#endif, or with more clearly structured multi-line comments.  [readability/multiline_comment] [5]\n'}
[2.649440] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:13:  Use operator ! instead of not  [readability/alt_tokens] [2]\n'}
[2.650020] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:15:  Use operator || instead of or  [readability/alt_tokens] [2]\n'}
[2.650649] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:17:  Use operator || instead of or  [readability/alt_tokens] [2]\n'}
[2.650964] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:18:  Use operator && instead of and  [readability/alt_tokens] [2]\n'}
[2.651530] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:22:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.653004] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:34:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.673588] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:154:  Missing space around colon in range-based for loop  [whitespace/forcolon] [2]\n'}
[2.683265] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:207:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]\n'}
[2.687723] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:225:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]\n'}
[2.690089] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:234:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]\n'}
[2.699916] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:280:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.705071] (-) TimerEvent: {}
[2.714484] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:18:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.718623] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:31:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.729514] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:95:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.730386] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:99:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.731466] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:103:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]\n'}
[2.732293] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:106:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]\n'}
[2.732979] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:108:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]\n'}
[2.734053] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:115:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.734888] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:121:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.735478] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:124:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.739393] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:147:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.739785] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:150:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.740770] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:154:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]\n'}
[2.741500] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:157:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]\n'}
[2.742120] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:159:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]\n'}
[2.750576] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:216:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.751113] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:219:  Consider using ctime_r(...) instead of ctime(...) for improved thread safety.  [runtime/threadsafe_fn] [2]\n'}
[2.754265] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:239:  Never use sprintf. Use snprintf instead.  [runtime/printf] [5]\n'}
[2.776780] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:20:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.777247] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:21:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.780523] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:38:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\n'}
[2.780652] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:38:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]\n'}
[2.782070] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:50:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\n'}
[2.786860] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:76:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]\n'}
[2.795664] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:128:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]\n'}
[2.801503] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:153:  Using C-style cast.  Use reinterpret_cast<socklen_t *>(...) instead  [readability/casting] [4]\n'}
[2.803639] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:160:  If you can, use sizeof(sender_port_str) instead of 10 as the 2nd arg to snprintf.  [runtime/printf] [3]\n'}
[2.805162] (-) TimerEvent: {}
[2.810106] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:192:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]\n'}
[2.811874] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:198:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]\n'}
[2.816420] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:225:  Using C-style cast.  Use reinterpret_cast<UDPSocketInterfaceLinux *>(...) instead  [readability/casting] [4]\n'}
[2.817751] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:230:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]\n'}
[2.821647] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:252:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\n'}
[2.821772] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:252:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]\n'}
[2.828274] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:289:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]\n'}
[2.835329] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:323:  Using C-style cast.  Use reinterpret_cast<socklen_t *>(...) instead  [readability/casting] [4]\n'}
[2.847276] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:388:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]\n'}
[2.864991] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:471:  Using C-style cast.  Use reinterpret_cast<TCPSocketInterfaceLinux *>(...) instead  [readability/casting] [4]\n'}
[2.866305] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:476:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]\n'}
[2.868489] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:488:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.881655] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:20:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.882118] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:21:  Include the directory when naming .h files  [build/include_subdir] [4]\n'}
[2.890476] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:66:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.896975] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:102:  Should have a space between // and comment  [whitespace/comments] [4]\n'}
[2.902606] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:141:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]\n'}
[2.905256] (-) TimerEvent: {}
[2.910591] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:185:  Using C-style cast.  Use reinterpret_cast<SerialInterfaceLinux *>(...) instead  [readability/casting] [4]\n'}
[2.911703] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:189:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]\n'}
[2.913678] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:201:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n'}
[2.931967] (ldlidar_component) StdoutLine: {'line': b'3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include/ldlidar_tools.hpp:36:  Add #include <string> for string  [build/include_what_you_use] [4]\n'}
[2.950017] (ldlidar_component) StdoutLine: {'line': b"3: Category 'build/header_guard' errors found: 16\n"}
[2.950259] (ldlidar_component) StdoutLine: {'line': b"3: Category 'build/include_order' errors found: 3\n"}
[2.950363] (ldlidar_component) StdoutLine: {'line': b"3: Category 'build/include_subdir' errors found: 16\n"}
[2.950443] (ldlidar_component) StdoutLine: {'line': b"3: Category 'build/include_what_you_use' errors found: 2\n"}
[2.950516] (ldlidar_component) StdoutLine: {'line': b"3: Category 'legal/copyright' errors found: 1\n"}
[2.950588] (ldlidar_component) StdoutLine: {'line': b"3: Category 'readability/alt_tokens' errors found: 4\n"}
[2.950658] (ldlidar_component) StdoutLine: {'line': b"3: Category 'readability/braces' errors found: 2\n"}
[2.950727] (ldlidar_component) StdoutLine: {'line': b"3: Category 'readability/casting' errors found: 20\n"}
[2.950796] (ldlidar_component) StdoutLine: {'line': b"3: Category 'readability/multiline_comment' errors found: 1\n"}
[2.950865] (ldlidar_component) StdoutLine: {'line': b"3: Category 'runtime/indentation_namespace' errors found: 8\n"}
[2.950933] (ldlidar_component) StdoutLine: {'line': b"3: Category 'runtime/int' errors found: 12\n"}
[2.951001] (ldlidar_component) StdoutLine: {'line': b"3: Category 'runtime/printf' errors found: 8\n"}
[2.951070] (ldlidar_component) StdoutLine: {'line': b"3: Category 'runtime/threadsafe_fn' errors found: 1\n"}
[2.951138] (ldlidar_component) StdoutLine: {'line': b"3: Category 'whitespace/blank_line' errors found: 14\n"}
[2.951234] (ldlidar_component) StdoutLine: {'line': b"3: Category 'whitespace/comments' errors found: 47\n"}
[2.951762] (ldlidar_component) StdoutLine: {'line': b"3: Category 'whitespace/forcolon' errors found: 1\n"}
[2.952047] (ldlidar_component) StdoutLine: {'line': b"3: Category 'whitespace/line_length' errors found: 3\n"}
[2.952128] (ldlidar_component) StdoutLine: {'line': b'3: Total errors found: 159\n'}
[2.952210] (ldlidar_component) StdoutLine: {'line': b"3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include' argument\n"}
[2.952312] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.952386] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp\n'}
[2.952457] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.952526] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/ldlidar_component.hpp\n'}
[2.952597] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.953106] (ldlidar_component) StdoutLine: {'line': b"3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src' argument\n"}
[2.953237] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.953333] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp\n'}
[2.953421] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.953494] (ldlidar_component) StdoutLine: {'line': b"3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/include' argument\n"}
[2.953589] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.953663] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/include/visibility_control.hpp\n'}
[2.953736] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.953805] (ldlidar_component) StdoutLine: {'line': b"3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include' argument\n"}
[2.953876] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.953945] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h\n'}
[2.954017] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.954088] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h\n'}
[2.954246] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.954339] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h\n'}
[2.954415] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.954485] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h\n'}
[2.954557] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.954626] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h\n'}
[2.954698] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.954767] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h\n'}
[2.954839] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.954923] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h\n'}
[2.954997] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.955066] (ldlidar_component) StdoutLine: {'line': b"3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src' argument\n"}
[2.955138] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.955220] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp\n'}
[2.955302] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.955373] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp\n'}
[2.955443] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.955512] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp\n'}
[2.955583] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.955652] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp\n'}
[2.955723] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.955792] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp\n'}
[2.955863] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.955931] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp\n'}
[2.956001] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.956068] (ldlidar_component) StdoutLine: {'line': b"3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include' argument\n"}
[2.956137] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.956216] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include/ldlidar_tools.hpp\n'}
[2.956298] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.956369] (ldlidar_component) StdoutLine: {'line': b"3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/src' argument\n"}
[2.956439] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.956508] (ldlidar_component) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/src/ldlidar_tools.cpp\n'}
[2.956588] (ldlidar_component) StdoutLine: {'line': b'3: \n'}
[2.969718] (ldlidar_component) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[2.970096] (ldlidar_component) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cpplint.xunit.xml'\n"}
[3.002838] (ldlidar_component) StdoutLine: {'line': b'3/7 Test #3: cpplint ..........................***Failed    1.41 sec\n'}
[3.003497] (ldlidar_component) StdoutLine: {'line': b'test 4\n'}
[3.003810] (ldlidar_component) StdoutLine: {'line': b'    Start 4: lint_cmake\n'}
[3.003995] (ldlidar_component) StdoutLine: {'line': b'\n'}
[3.004110] (ldlidar_component) StdoutLine: {'line': b'4: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/lint_cmake.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/lint_cmake.xunit.xml"\n'}
[3.004292] (ldlidar_component) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[3.005352] (-) TimerEvent: {}
[3.105825] (-) TimerEvent: {}
[3.115913] (ldlidar_component) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':\n"}
[3.116152] (ldlidar_component) StdoutLine: {'line': b'4:  - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/lint_cmake.xunit.xml\n'}
[3.205933] (-) TimerEvent: {}
[3.239485] (ldlidar_component) StdoutLine: {'line': b'4: ldlidar_driver/CMakeLists.txt:15: Line ends in whitespace [whitespace/eol]\n'}
[3.239684] (ldlidar_component) StdoutLine: {'line': b'4: ldlidar_driver/CMakeLists.txt:16: Line ends in whitespace [whitespace/eol]\n'}
[3.239772] (ldlidar_component) StdoutLine: {'line': b'4: \n'}
[3.239849] (ldlidar_component) StdoutLine: {'line': b'4: \n'}
[3.239920] (ldlidar_component) StdoutLine: {'line': b'4: 2 errors\n'}
[3.254348] (ldlidar_component) StdoutLine: {'line': b'4: -- run_test.py: return code 1\n'}
[3.254633] (ldlidar_component) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/lint_cmake.xunit.xml'\n"}
[3.269695] (ldlidar_component) StdoutLine: {'line': b'4/7 Test #4: lint_cmake .......................***Failed    0.27 sec\n'}
[3.270030] (ldlidar_component) StdoutLine: {'line': b'test 5\n'}
[3.270138] (ldlidar_component) StdoutLine: {'line': b'    Start 5: uncrustify\n'}
[3.270257] (ldlidar_component) StdoutLine: {'line': b'\n'}
[3.270351] (ldlidar_component) StdoutLine: {'line': b'5: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/uncrustify.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/humble/bin/ament_uncrustify" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/uncrustify.xunit.xml"\n'}
[3.270442] (ldlidar_component) StdoutLine: {'line': b'5: Test timeout computed to be: 60\n'}
[3.306039] (-) TimerEvent: {}
[3.382042] (ldlidar_component) StdoutLine: {'line': b"5: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':\n"}
[3.382250] (ldlidar_component) StdoutLine: {'line': b'5:  - /opt/ros/humble/bin/ament_uncrustify --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/uncrustify.xunit.xml\n'}
[3.406267] (-) TimerEvent: {}
[3.506598] (-) TimerEvent: {}
[3.606925] (-) TimerEvent: {}
[3.678235] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'component/include/defines.hpp'\n"}
[3.678425] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.678510] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'component/include/ldlidar_component.hpp'\n"}
[3.678588] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.678660] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'component/src/ldlidar_component.cpp'\n"}
[3.678731] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.678800] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'include/visibility_control.hpp'\n"}
[3.678871] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.678954] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/include/core/ldlidar_datatype.h'\n"}
[3.679026] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.679094] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/include/core/ldlidar_driver.h'\n"}
[3.679165] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.679334] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/include/dataprocess/lipkg.h'\n"}
[3.679531] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.679712] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/include/filter/tofbf.h'\n"}
[3.679895] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.680072] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/include/logger/log_module.h'\n"}
[3.680362] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.680571] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/include/networkcom/network_socket_interface_linux.h'\n"}
[3.680761] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.680941] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/include/serialcom/serial_interface_linux.h'\n"}
[3.681122] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.681438] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/src/core/ldlidar_driver.cpp'\n"}
[3.681642] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.681827] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/src/dataprocess/lipkg.cpp'\n"}
[3.682011] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.682202] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/src/filter/tofbf.cpp'\n"}
[3.682415] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.682597] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/src/logger/log_module.cpp'\n"}
[3.682778] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.682954] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp'\n"}
[3.683133] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.683346] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'ldlidar_driver/src/serialcom/serial_interface_linux.cpp'\n"}
[3.683522] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.683683] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'tools/include/ldlidar_tools.hpp'\n"}
[3.683846] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.684007] (ldlidar_component) StdoutLine: {'line': b"5: No code style divergence in file 'tools/src/ldlidar_tools.cpp'\n"}
[3.684168] (ldlidar_component) StdoutLine: {'line': b'5: \n'}
[3.684362] (ldlidar_component) StdoutLine: {'line': b'5: No problems found\n'}
[3.705661] (ldlidar_component) StdoutLine: {'line': b'5: -- run_test.py: return code 0\n'}
[3.706048] (ldlidar_component) StdoutLine: {'line': b"5: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/uncrustify.xunit.xml'\n"}
[3.707019] (-) TimerEvent: {}
[3.721890] (ldlidar_component) StdoutLine: {'line': b'5/7 Test #5: uncrustify .......................   Passed    0.45 sec\n'}
[3.722208] (ldlidar_component) StdoutLine: {'line': b'test 6\n'}
[3.722326] (ldlidar_component) StdoutLine: {'line': b'    Start 6: xmllint\n'}
[3.722416] (ldlidar_component) StdoutLine: {'line': b'\n'}
[3.722498] (ldlidar_component) StdoutLine: {'line': b'6: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/xmllint.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/xmllint.xunit.xml"\n'}
[3.722604] (ldlidar_component) StdoutLine: {'line': b'6: Test timeout computed to be: 60\n'}
[3.807149] (-) TimerEvent: {}
[3.834899] (ldlidar_component) StdoutLine: {'line': b"6: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':\n"}
[3.835162] (ldlidar_component) StdoutLine: {'line': b'6:  - /opt/ros/humble/bin/ament_xmllint --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/xmllint.xunit.xml\n'}
[3.907261] (-) TimerEvent: {}
[4.007646] (-) TimerEvent: {}
[4.108178] (-) TimerEvent: {}
[4.208762] (-) TimerEvent: {}
[4.309204] (-) TimerEvent: {}
[4.409509] (-) TimerEvent: {}
[4.510016] (-) TimerEvent: {}
[4.610568] (-) TimerEvent: {}
[4.711032] (-) TimerEvent: {}
[4.811363] (-) TimerEvent: {}
[4.817459] (ldlidar_component) StdoutLine: {'line': b"6: File 'package.xml' is valid\n"}
[4.817657] (ldlidar_component) StdoutLine: {'line': b'6: \n'}
[4.817741] (ldlidar_component) StdoutLine: {'line': b'6: No problems found\n'}
[4.833390] (ldlidar_component) StdoutLine: {'line': b'6: -- run_test.py: return code 0\n'}
[4.833695] (ldlidar_component) StdoutLine: {'line': b"6: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/xmllint.xunit.xml'\n"}
[4.848793] (ldlidar_component) StdoutLine: {'line': b'6/7 Test #6: xmllint ..........................   Passed    1.13 sec\n'}
[4.849277] (ldlidar_component) StdoutLine: {'line': b'test 7\n'}
[4.849458] (ldlidar_component) StdoutLine: {'line': b'    Start 7: clang_format\n'}
[4.849569] (ldlidar_component) StdoutLine: {'line': b'\n'}
[4.849662] (ldlidar_component) StdoutLine: {'line': b'7: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/clang_format.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_clang_format/clang_format.txt" "--command" "/opt/ros/humble/bin/ament_clang_format" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/clang_format.xunit.xml"\n'}
[4.849760] (ldlidar_component) StdoutLine: {'line': b'7: Test timeout computed to be: 60\n'}
[4.911488] (-) TimerEvent: {}
[4.957037] (ldlidar_component) StdoutLine: {'line': b"7: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':\n"}
[4.957290] (ldlidar_component) StdoutLine: {'line': b'7:  - /opt/ros/humble/bin/ament_clang_format --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/clang_format.xunit.xml\n'}
[5.011608] (-) TimerEvent: {}
[5.112076] (-) TimerEvent: {}
[5.212501] (-) TimerEvent: {}
[5.313146] (-) TimerEvent: {}
[5.413768] (-) TimerEvent: {}
[5.514358] (-) TimerEvent: {}
[5.614964] (-) TimerEvent: {}
[5.715589] (-) TimerEvent: {}
[5.816223] (-) TimerEvent: {}
[5.916723] (-) TimerEvent: {}
[6.017138] (-) TimerEvent: {}
[6.117817] (-) TimerEvent: {}
[6.218444] (-) TimerEvent: {}
[6.319045] (-) TimerEvent: {}
[6.419668] (-) TimerEvent: {}
[6.520296] (-) TimerEvent: {}
[6.620833] (-) TimerEvent: {}
[6.721342] (-) TimerEvent: {}
[6.821954] (-) TimerEvent: {}
[6.922549] (-) TimerEvent: {}
[7.023114] (-) TimerEvent: {}
[7.123683] (-) TimerEvent: {}
[7.224173] (-) TimerEvent: {}
[7.310691] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'component/include/defines.hpp':\n"}
[7.310889] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.310974] (ldlidar_component) StdoutLine: {'line': b'7: [component/include/defines.hpp:9:6]: Replace [ ] with [  ]\n'}
[7.311051] (ldlidar_component) StdoutLine: {'line': b'7: - #endif // DEFINES_HPP\n'}
[7.311124] (ldlidar_component) StdoutLine: {'line': b'7: + #endif  // DEFINES_HPP\n'}
[7.311221] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.311306] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'component/include/ldlidar_component.hpp':\n"}
[7.311380] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.311449] (ldlidar_component) StdoutLine: {'line': b'7: [component/include/ldlidar_component.hpp:19:0]: Replace [#include <rcutils/logging_macros.h>\\n\\n#include <string>\\n#include <memory>\\n\\n#include <lifecycle_msgs/msg/transition.hpp>\\n#include <rclcpp/publisher.hpp>\\n#include <rclcpp/rclcpp.hpp>\\n#include <rclcpp_lifecycle/lifecycle_node.hpp>\\n#include <rclcpp_lifecycle/lifecycle_publisher.hpp>\\n#include <sensor_msgs/msg/laser_scan.hpp>\\n#include <diagnostic_updater/diagnostic_updater.hpp>\\n#include <diagnostic_msgs/msg/diagnostic_status.hpp>\\n\\n#include <nav2_util/lifecycle_node.hpp>\\n\\n#include "visibility_control.hpp"\\n#include "defines.hpp"\\n#include "ldlidar_driver.h"] with [#include <rcutils/logging_macros.h>\\n\\n#include <diagnostic_msgs/msg/diagnostic_status.hpp>\\n#include <diagnostic_updater/diagnostic_updater.hpp>\\n#include <lifecycle_msgs/msg/transition.hpp>\\n#include <memory>\\n#include <nav2_util/lifecycle_node.hpp>\\n#include <rclcpp/publisher.hpp>\\n#include <rclcpp/rclcpp.hpp>\\n#include <rclcpp_lifecycle/lifecycle_node.hpp>\\n#include <rclcpp_lifecycle/lifecycle_publisher.hpp>\\n#include <sensor_msgs/msg/laser_scan.hpp>\\n#include <string>\\n\\n#include "defines.hpp"\\n#include "ldlidar_driver.h"\\n#include "visibility_control.hpp"]\n'}
[7.311540] (ldlidar_component) StdoutLine: {'line': b'7: - #include <rcutils/logging_macros.h>\n'}
[7.311614] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.311684] (ldlidar_component) StdoutLine: {'line': b'7: - #include <string>\n'}
[7.311753] (ldlidar_component) StdoutLine: {'line': b'7: - #include <memory>\n'}
[7.311822] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.311890] (ldlidar_component) StdoutLine: {'line': b'7: - #include <lifecycle_msgs/msg/transition.hpp>\n'}
[7.311959] (ldlidar_component) StdoutLine: {'line': b'7: - #include <rclcpp/publisher.hpp>\n'}
[7.312027] (ldlidar_component) StdoutLine: {'line': b'7: - #include <rclcpp/rclcpp.hpp>\n'}
[7.312095] (ldlidar_component) StdoutLine: {'line': b'7: - #include <rclcpp_lifecycle/lifecycle_node.hpp>\n'}
[7.312162] (ldlidar_component) StdoutLine: {'line': b'7: - #include <rclcpp_lifecycle/lifecycle_publisher.hpp>\n'}
[7.315656] (ldlidar_component) StdoutLine: {'line': b'7: - #include <sensor_msgs/msg/laser_scan.hpp>\n'}
[7.315753] (ldlidar_component) StdoutLine: {'line': b'7: - #include <diagnostic_updater/diagnostic_updater.hpp>\n'}
[7.315828] (ldlidar_component) StdoutLine: {'line': b'7: - #include <diagnostic_msgs/msg/diagnostic_status.hpp>\n'}
[7.315900] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.315970] (ldlidar_component) StdoutLine: {'line': b'7: - #include <nav2_util/lifecycle_node.hpp>\n'}
[7.316040] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.316109] (ldlidar_component) StdoutLine: {'line': b'7: - #include "visibility_control.hpp"\n'}
[7.316179] (ldlidar_component) StdoutLine: {'line': b'7: - #include "defines.hpp"\n'}
[7.316268] (ldlidar_component) StdoutLine: {'line': b'7: - #include "ldlidar_driver.h"\n'}
[7.316343] (ldlidar_component) StdoutLine: {'line': b'7: + #include <rcutils/logging_macros.h>\n'}
[7.316413] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.316482] (ldlidar_component) StdoutLine: {'line': b'7: + #include <diagnostic_msgs/msg/diagnostic_status.hpp>\n'}
[7.316552] (ldlidar_component) StdoutLine: {'line': b'7: + #include <diagnostic_updater/diagnostic_updater.hpp>\n'}
[7.316620] (ldlidar_component) StdoutLine: {'line': b'7: + #include <lifecycle_msgs/msg/transition.hpp>\n'}
[7.316703] (ldlidar_component) StdoutLine: {'line': b'7: + #include <memory>\n'}
[7.316773] (ldlidar_component) StdoutLine: {'line': b'7: + #include <nav2_util/lifecycle_node.hpp>\n'}
[7.316842] (ldlidar_component) StdoutLine: {'line': b'7: + #include <rclcpp/publisher.hpp>\n'}
[7.316910] (ldlidar_component) StdoutLine: {'line': b'7: + #include <rclcpp/rclcpp.hpp>\n'}
[7.316979] (ldlidar_component) StdoutLine: {'line': b'7: + #include <rclcpp_lifecycle/lifecycle_node.hpp>\n'}
[7.317047] (ldlidar_component) StdoutLine: {'line': b'7: + #include <rclcpp_lifecycle/lifecycle_publisher.hpp>\n'}
[7.317127] (ldlidar_component) StdoutLine: {'line': b'7: + #include <sensor_msgs/msg/laser_scan.hpp>\n'}
[7.320355] (ldlidar_component) StdoutLine: {'line': b'7: + #include <string>\n'}
[7.320488] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.320567] (ldlidar_component) StdoutLine: {'line': b'7: + #include "defines.hpp"\n'}
[7.320640] (ldlidar_component) StdoutLine: {'line': b'7: + #include "ldlidar_driver.h"\n'}
[7.320712] (ldlidar_component) StdoutLine: {'line': b'7: + #include "visibility_control.hpp"\n'}
[7.320782] (ldlidar_component) StdoutLine: {'line': b'7: [component/include/ldlidar_component.hpp:82:10]: Replace [] with [ ]\n'}
[7.320852] (ldlidar_component) StdoutLine: {'line': b'7: -   template<typename T>\n'}
[7.320920] (ldlidar_component) StdoutLine: {'line': b'7: +   template <typename T>\n'}
[7.320988] (ldlidar_component) StdoutLine: {'line': b'7: [component/include/ldlidar_component.hpp:84:50]: Replace [\\n    ] with [ ]\n'}
[7.321057] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string paramName, T defValue, T & outVal,\n'}
[7.321125] (ldlidar_component) StdoutLine: {'line': b'7: -     const std::string & description = "",\n'}
[7.321200] (ldlidar_component) StdoutLine: {'line': b'7: +     std::string paramName, T defValue, T & outVal, const std::string & description = "",\n'}
[7.321283] (ldlidar_component) StdoutLine: {'line': b'7: [component/include/ldlidar_component.hpp:86:26]: Replace [\\n    ] with [ ]\n'}
[7.321354] (ldlidar_component) StdoutLine: {'line': b'7: -     bool read_only = true,\n'}
[7.321423] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string log_info = std::string());\n'}
[7.321490] (ldlidar_component) StdoutLine: {'line': b'7: +     bool read_only = true, std::string log_info = std::string());\n'}
[7.321558] (ldlidar_component) StdoutLine: {'line': b'7: [component/include/ldlidar_component.hpp:91:58]: Replace [\\n    ] with [ ]\n'}
[7.321627] (ldlidar_component) StdoutLine: {'line': b'7: -     const nav2_util::LifecycleNode::integer_range & range,\n'}
[7.321695] (ldlidar_component) StdoutLine: {'line': b'7: -     const std::string & description = "",\n'}
[7.321762] (ldlidar_component) StdoutLine: {'line': b'7: +     const nav2_util::LifecycleNode::integer_range & range, const std::string & description = "",\n'}
[7.321831] (ldlidar_component) StdoutLine: {'line': b'7: [component/include/ldlidar_component.hpp:93:26]: Replace [\\n    ] with [ ]\n'}
[7.321899] (ldlidar_component) StdoutLine: {'line': b'7: -     bool read_only = true,\n'}
[7.321967] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string log_info = std::string());\n'}
[7.322035] (ldlidar_component) StdoutLine: {'line': b'7: +     bool read_only = true, std::string log_info = std::string());\n'}
[7.322103] (ldlidar_component) StdoutLine: {'line': b'7: [component/include/ldlidar_component.hpp:99:41]: Replace [\\n    ] with [ ]\n'}
[7.322171] (ldlidar_component) StdoutLine: {'line': b'7: -     const std::string & description = "",\n'}
[7.325303] (-) TimerEvent: {}
[7.326026] (ldlidar_component) StdoutLine: {'line': b'7: -     bool read_only = true,\n'}
[7.326146] (ldlidar_component) StdoutLine: {'line': b'7: +     const std::string & description = "", bool read_only = true,\n'}
[7.326248] (ldlidar_component) StdoutLine: {'line': b'7: [component/include/ldlidar_component.hpp:142:27]: Replace [ ] with [  ]\n'}
[7.326330] (ldlidar_component) StdoutLine: {'line': b'7: -   float _distScale = 0.001; // Scale factor to match the units setting\n'}
[7.326412] (ldlidar_component) StdoutLine: {'line': b'7: +   float _distScale = 0.001;  // Scale factor to match the units setting\n'}
[7.326485] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.326556] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'component/src/ldlidar_component.cpp':\n"}
[7.326625] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.326694] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:16:0]: Replace [#include "ldlidar_component.hpp"\\n#include "ldlidar_tools.hpp"\\n#include "rcl_interfaces/msg/parameter_descriptor.hpp"\\n#include "diagnostic_msgs/msg/diagnostic_status.hpp"\\n#include "rmw/types.h"\\n#include "rclcpp/parameter.hpp"\\n#include "rclcpp/exceptions.hpp"] with [#include "ldlidar_component.hpp"\\n\\n#include "diagnostic_msgs/msg/diagnostic_status.hpp"\\n#include "ldlidar_tools.hpp"\\n#include "rcl_interfaces/msg/parameter_descriptor.hpp"\\n#include "rclcpp/exceptions.hpp"\\n#include "rclcpp/parameter.hpp"\\n#include "rmw/types.h"]\n'}
[7.326772] (ldlidar_component) StdoutLine: {'line': b'7: - #include "ldlidar_component.hpp"\n'}
[7.326842] (ldlidar_component) StdoutLine: {'line': b'7: - #include "ldlidar_tools.hpp"\n'}
[7.326911] (ldlidar_component) StdoutLine: {'line': b'7: - #include "rcl_interfaces/msg/parameter_descriptor.hpp"\n'}
[7.326980] (ldlidar_component) StdoutLine: {'line': b'7: - #include "diagnostic_msgs/msg/diagnostic_status.hpp"\n'}
[7.327048] (ldlidar_component) StdoutLine: {'line': b'7: - #include "rmw/types.h"\n'}
[7.327117] (ldlidar_component) StdoutLine: {'line': b'7: - #include "rclcpp/parameter.hpp"\n'}
[7.327196] (ldlidar_component) StdoutLine: {'line': b'7: - #include "rclcpp/exceptions.hpp"\n'}
[7.327279] (ldlidar_component) StdoutLine: {'line': b'7: + #include "ldlidar_component.hpp"\n'}
[7.327350] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.327420] (ldlidar_component) StdoutLine: {'line': b'7: + #include "diagnostic_msgs/msg/diagnostic_status.hpp"\n'}
[7.327489] (ldlidar_component) StdoutLine: {'line': b'7: + #include "ldlidar_tools.hpp"\n'}
[7.327559] (ldlidar_component) StdoutLine: {'line': b'7: + #include "rcl_interfaces/msg/parameter_descriptor.hpp"\n'}
[7.327628] (ldlidar_component) StdoutLine: {'line': b'7: + #include "rclcpp/exceptions.hpp"\n'}
[7.327697] (ldlidar_component) StdoutLine: {'line': b'7: + #include "rclcpp/parameter.hpp"\n'}
[7.327766] (ldlidar_component) StdoutLine: {'line': b'7: + #include "rmw/types.h"\n'}
[7.327835] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:51:37]: Replace [\\n] with [ ]\n'}
[7.327904] (ldlidar_component) StdoutLine: {'line': b'7: - LdLidarComponent::~LdLidarComponent()\n'}
[7.327973] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.328042] (ldlidar_component) StdoutLine: {'line': b'7: + LdLidarComponent::~LdLidarComponent() {\n'}
[7.328111] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:52:1]: Replace [\\n] with []\n'}
[7.328180] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.333373] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.333460] (ldlidar_component) StdoutLine: {'line': b'7: + {}\n'}
[7.333534] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:74:23]: Replace [ ] with [\\n      ]\n'}
[7.333608] (ldlidar_component) StdoutLine: {'line': b'7: -     rcutils_ret_t res = rcutils_logging_set_logger_level(\n'}
[7.333679] (ldlidar_component) StdoutLine: {'line': b'7: +     rcutils_ret_t res =\n'}
[7.333749] (ldlidar_component) StdoutLine: {'line': b'7: +       rcutils_logging_set_logger_level(\n'}
[7.333822] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:74:57]: Replace [\\n      ] with []\n'}
[7.333894] (ldlidar_component) StdoutLine: {'line': b'7: -     rcutils_ret_t res = rcutils_logging_set_logger_level(\n'}
[7.333964] (ldlidar_component) StdoutLine: {'line': b'7: -       get_logger().get_name(), RCUTILS_LOG_SEVERITY_DEBUG);\n'}
[7.334046] (ldlidar_component) StdoutLine: {'line': b'7: +     rcutils_ret_t res = rcutils_logging_set_logger_level(get_logger().get_name(), RCUTILS_LOG_SEVERITY_DEBUG);\n'}
[7.334118] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:83:23]: Replace [ ] with [\\n      ]\n'}
[7.334201] (ldlidar_component) StdoutLine: {'line': b'7: -     rcutils_ret_t res = rcutils_logging_set_logger_level(\n'}
[7.334285] (ldlidar_component) StdoutLine: {'line': b'7: +     rcutils_ret_t res =\n'}
[7.334356] (ldlidar_component) StdoutLine: {'line': b'7: +       rcutils_logging_set_logger_level(\n'}
[7.334427] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:83:57]: Replace [\\n      ] with []\n'}
[7.334510] (ldlidar_component) StdoutLine: {'line': b'7: -     rcutils_ret_t res = rcutils_logging_set_logger_level(\n'}
[7.334581] (ldlidar_component) StdoutLine: {'line': b'7: -       get_logger().get_name(), RCUTILS_LOG_SEVERITY_INFO);\n'}
[7.334651] (ldlidar_component) StdoutLine: {'line': b'7: +     rcutils_ret_t res = rcutils_logging_set_logger_level(get_logger().get_name(), RCUTILS_LOG_SEVERITY_INFO);\n'}
[7.334721] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:126:95]: Replace [ ] with []\n'}
[7.334791] (ldlidar_component) StdoutLine: {'line': b'7: -       get_logger(), " !!! The parameter \'lidar.model\' is not valid! -> " << _lidarModel.c_str() );\n'}
[7.334860] (ldlidar_component) StdoutLine: {'line': b'7: +       get_logger(), " !!! The parameter \'lidar.model\' is not valid! -> " << _lidarModel.c_str());\n'}
[7.334930] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:131:74]: Replace [\\n    ] with [ ]\n'}
[7.335000] (ldlidar_component) StdoutLine: {'line': b'7: -     "lidar.frame_id", _frameId, _frameId, "Name of the lidar frame", true,\n'}
[7.335069] (ldlidar_component) StdoutLine: {'line': b'7: -     " * Lidar frame: ");\n'}
[7.335138] (ldlidar_component) StdoutLine: {'line': b'7: +     "lidar.frame_id", _frameId, _frameId, "Name of the lidar frame", true, " * Lidar frame: ");\n'}
[7.340785] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:150:44]: Replace [ ] with [\\n    ]\n'}
[7.340934] (ldlidar_component) StdoutLine: {'line': b'7: -     "lidar.rot_verse", rot_verse, rot_verse, " * Rotation verse: ",\n'}
[7.341026] (ldlidar_component) StdoutLine: {'line': b'7: +     "lidar.rot_verse", rot_verse, rot_verse,\n'}
[7.341103] (ldlidar_component) StdoutLine: {'line': b'7: +     " * Rotation verse: ",\n'}
[7.341176] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:150:67]: Replace [\\n    ] with [ ]\n'}
[7.341276] (ldlidar_component) StdoutLine: {'line': b'7: -     "lidar.rot_verse", rot_verse, rot_verse, " * Rotation verse: ",\n'}
[7.341352] (ldlidar_component) StdoutLine: {'line': b'7: -     "Rotation verse, use \'CW\' if upsidedown");\n'}
[7.341423] (ldlidar_component) StdoutLine: {'line': b'7: +     "lidar.rot_verse", rot_verse, rot_verse, " * Rotation verse: ", "Rotation verse, use \'CW\' if upsidedown");\n'}
[7.341496] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:163:82]: Replace [\\n    ] with [ ]\n'}
[7.341900] (ldlidar_component) StdoutLine: {'line': b'7: -     "lidar.bins", _bins, _bins, "Fixed number of data beams. 0 for dynamic", true,\n'}
[7.341985] (ldlidar_component) StdoutLine: {'line': b'7: -     " * Bins: ");\n'}
[7.342060] (ldlidar_component) StdoutLine: {'line': b'7: +     "lidar.bins", _bins, _bins, "Fixed number of data beams. 0 for dynamic", true, " * Bins: ");\n'}
[7.342136] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:175:89]: Replace [\\n    ] with [ ]\n'}
[7.342224] (ldlidar_component) StdoutLine: {'line': b'7: -     "lidar.angle_crop_min", _angleCropMin, _angleCropMin, "Angle cropping minimum angle",\n'}
[7.342308] (ldlidar_component) StdoutLine: {'line': b'7: -     false, " * Angle cropping min angle: ");\n'}
[7.342391] (ldlidar_component) StdoutLine: {'line': b'7: +     "lidar.angle_crop_min", _angleCropMin, _angleCropMin, "Angle cropping minimum angle", false, " * Angle cropping min angle: ");\n'}
[7.342464] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:176:10]: Replace [ ] with [\\n    ]\n'}
[7.342536] (ldlidar_component) StdoutLine: {'line': b'7: -     false, " * Angle cropping min angle: ");\n'}
[7.342607] (ldlidar_component) StdoutLine: {'line': b'7: +     false,\n'}
[7.342679] (ldlidar_component) StdoutLine: {'line': b'7: +     " * Angle cropping min angle: ");\n'}
[7.342752] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:178:89]: Replace [\\n    ] with [ ]\n'}
[7.342824] (ldlidar_component) StdoutLine: {'line': b'7: -     "lidar.angle_crop_max", _angleCropMax, _angleCropMax, "Angle cropping maximum angle",\n'}
[7.342896] (ldlidar_component) StdoutLine: {'line': b'7: -     false, " * Angle cropping max angle: ");\n'}
[7.342966] (ldlidar_component) StdoutLine: {'line': b'7: +     "lidar.angle_crop_max", _angleCropMax, _angleCropMax, "Angle cropping maximum angle", false, " * Angle cropping max angle: ");\n'}
[7.343037] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:179:10]: Replace [ ] with [\\n    ]\n'}
[7.343107] (ldlidar_component) StdoutLine: {'line': b'7: -     false, " * Angle cropping max angle: ");\n'}
[7.343177] (ldlidar_component) StdoutLine: {'line': b'7: +     false,\n'}
[7.346580] (ldlidar_component) StdoutLine: {'line': b'7: +     " * Angle cropping max angle: ");\n'}
[7.346682] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:183:8]: Replace [] with [ ]\n'}
[7.346761] (ldlidar_component) StdoutLine: {'line': b'7: - template<typename T>\n'}
[7.346836] (ldlidar_component) StdoutLine: {'line': b'7: + template <typename T>\n'}
[7.346909] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:185:48]: Replace [\\n  ] with [ ]\n'}
[7.346982] (ldlidar_component) StdoutLine: {'line': b'7: -   std::string paramName, T defValue, T & outVal,\n'}
[7.347054] (ldlidar_component) StdoutLine: {'line': b'7: -   const std::string & description, bool read_only, std::string log_info)\n'}
[7.347125] (ldlidar_component) StdoutLine: {'line': b'7: +   std::string paramName, T defValue, T & outVal, const std::string & description, bool read_only, std::string log_info)\n'}
[7.347204] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:186:50]: Replace [ ] with [\\n  ]\n'}
[7.347288] (ldlidar_component) StdoutLine: {'line': b'7: -   const std::string & description, bool read_only, std::string log_info)\n'}
[7.347360] (ldlidar_component) StdoutLine: {'line': b'7: +   const std::string & description, bool read_only,\n'}
[7.347430] (ldlidar_component) StdoutLine: {'line': b'7: +   std::string log_info)\n'}
[7.347499] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:196:37]: Replace [\\n        ] with [\\n                      ]\n'}
[7.347570] (ldlidar_component) StdoutLine: {'line': b'7: -       get_logger(), "The parameter \'"\n'}
[7.347639] (ldlidar_component) StdoutLine: {'line': b'7: -         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.347710] (ldlidar_component) StdoutLine: {'line': b'7: +       get_logger(), "The parameter \'"\n'}
[7.347779] (ldlidar_component) StdoutLine: {'line': b'7: +                       << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.347849] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:197:20]: Replace [ ] with [\\n                      ]\n'}
[7.347917] (ldlidar_component) StdoutLine: {'line': b'7: -         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.347986] (ldlidar_component) StdoutLine: {'line': b'7: +         << paramName\n'}
[7.348055] (ldlidar_component) StdoutLine: {'line': b'7: +                       << "\' is not available or is not valid, using the default value: "\n'}
[7.348143] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:197:87]: Replace [\\n        ] with [\\n                      ]\n'}
[7.352165] (ldlidar_component) StdoutLine: {'line': b'7: -         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.352291] (ldlidar_component) StdoutLine: {'line': b'7: -         << defValue);\n'}
[7.352374] (ldlidar_component) StdoutLine: {'line': b'7: +         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.352451] (ldlidar_component) StdoutLine: {'line': b'7: +                       << defValue);\n'}
[7.352524] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:208:56]: Replace [\\n  ] with [ ]\n'}
[7.352596] (ldlidar_component) StdoutLine: {'line': b'7: -   const nav2_util::LifecycleNode::integer_range & range,\n'}
[7.352677] (ldlidar_component) StdoutLine: {'line': b'7: -   const std::string & description,\n'}
[7.352751] (ldlidar_component) StdoutLine: {'line': b'7: +   const nav2_util::LifecycleNode::integer_range & range, const std::string & description,\n'}
[7.352821] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:210:17]: Replace [\\n  ] with [ ]\n'}
[7.352890] (ldlidar_component) StdoutLine: {'line': b'7: -   bool read_only,\n'}
[7.352958] (ldlidar_component) StdoutLine: {'line': b'7: -   std::string log_info)\n'}
[7.353028] (ldlidar_component) StdoutLine: {'line': b'7: +   bool read_only, std::string log_info)\n'}
[7.353098] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:214:18]: Replace [\\n      ] with []\n'}
[7.353167] (ldlidar_component) StdoutLine: {'line': b'7: -     add_parameter(\n'}
[7.353263] (ldlidar_component) StdoutLine: {'line': b'7: -       paramName, rclcpp::ParameterValue(defValue), range,\n'}
[7.353342] (ldlidar_component) StdoutLine: {'line': b'7: +     add_parameter(paramName, rclcpp::ParameterValue(defValue), range,\n'}
[7.353415] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:215:57]: Replace [\\n      ] with [ ]\n'}
[7.353486] (ldlidar_component) StdoutLine: {'line': b'7: -       paramName, rclcpp::ParameterValue(defValue), range,\n'}
[7.353555] (ldlidar_component) StdoutLine: {'line': b'7: -       description, "", read_only);\n'}
[7.353624] (ldlidar_component) StdoutLine: {'line': b'7: +       paramName, rclcpp::ParameterValue(defValue), range, description, "", read_only);\n'}
[7.353694] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:223:37]: Replace [\\n        ] with [\\n                      ]\n'}
[7.353763] (ldlidar_component) StdoutLine: {'line': b'7: -       get_logger(), "The parameter \'"\n'}
[7.353832] (ldlidar_component) StdoutLine: {'line': b'7: -         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.353902] (ldlidar_component) StdoutLine: {'line': b'7: +       get_logger(), "The parameter \'"\n'}
[7.353970] (ldlidar_component) StdoutLine: {'line': b'7: +                       << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.354039] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:224:20]: Replace [ ] with [\\n                      ]\n'}
[7.354108] (ldlidar_component) StdoutLine: {'line': b'7: -         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.354176] (ldlidar_component) StdoutLine: {'line': b'7: +         << paramName\n'}
[7.358241] (ldlidar_component) StdoutLine: {'line': b'7: +                       << "\' is not available or is not valid, using the default value: "\n'}
[7.358371] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:224:87]: Replace [\\n        ] with [\\n                      ]\n'}
[7.358452] (ldlidar_component) StdoutLine: {'line': b'7: -         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.358542] (ldlidar_component) StdoutLine: {'line': b'7: -         << defValue);\n'}
[7.358615] (ldlidar_component) StdoutLine: {'line': b'7: +         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.358688] (ldlidar_component) StdoutLine: {'line': b'7: +                       << defValue);\n'}
[7.358758] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:235:63]: Replace [\\n  ] with [ ]\n'}
[7.358830] (ldlidar_component) StdoutLine: {'line': b'7: -   const nav2_util::LifecycleNode::floating_point_range & range,\n'}
[7.358901] (ldlidar_component) StdoutLine: {'line': b'7: -   const std::string & description,\n'}
[7.358972] (ldlidar_component) StdoutLine: {'line': b'7: +   const nav2_util::LifecycleNode::floating_point_range & range, const std::string & description,\n'}
[7.359042] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:237:17]: Replace [\\n  ] with [ ]\n'}
[7.359111] (ldlidar_component) StdoutLine: {'line': b'7: -   bool read_only,\n'}
[7.359179] (ldlidar_component) StdoutLine: {'line': b'7: -   std::string log_info)\n'}
[7.359280] (ldlidar_component) StdoutLine: {'line': b'7: +   bool read_only, std::string log_info)\n'}
[7.359354] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:241:18]: Replace [\\n      ] with []\n'}
[7.359426] (ldlidar_component) StdoutLine: {'line': b'7: -     add_parameter(\n'}
[7.359497] (ldlidar_component) StdoutLine: {'line': b'7: -       paramName, rclcpp::ParameterValue(defValue), range,\n'}
[7.359569] (ldlidar_component) StdoutLine: {'line': b'7: +     add_parameter(paramName, rclcpp::ParameterValue(defValue), range,\n'}
[7.359640] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:242:57]: Replace [\\n      ] with [ ]\n'}
[7.359709] (ldlidar_component) StdoutLine: {'line': b'7: -       paramName, rclcpp::ParameterValue(defValue), range,\n'}
[7.359779] (ldlidar_component) StdoutLine: {'line': b'7: -       description, "", read_only);\n'}
[7.359847] (ldlidar_component) StdoutLine: {'line': b'7: +       paramName, rclcpp::ParameterValue(defValue), range, description, "", read_only);\n'}
[7.359916] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:250:37]: Replace [\\n        ] with [\\n                      ]\n'}
[7.359985] (ldlidar_component) StdoutLine: {'line': b'7: -       get_logger(), "The parameter \'"\n'}
[7.360053] (ldlidar_component) StdoutLine: {'line': b'7: -         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.360123] (ldlidar_component) StdoutLine: {'line': b'7: +       get_logger(), "The parameter \'"\n'}
[7.361642] (ldlidar_component) StdoutLine: {'line': b'7: +                       << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.364409] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:251:20]: Replace [ ] with [\\n                      ]\n'}
[7.364539] (ldlidar_component) StdoutLine: {'line': b'7: -         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.364639] (ldlidar_component) StdoutLine: {'line': b'7: +         << paramName\n'}
[7.364726] (ldlidar_component) StdoutLine: {'line': b'7: +                       << "\' is not available or is not valid, using the default value: "\n'}
[7.364811] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:251:87]: Replace [\\n        ] with [\\n                      ]\n'}
[7.364921] (ldlidar_component) StdoutLine: {'line': b'7: -         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.365004] (ldlidar_component) StdoutLine: {'line': b'7: -         << defValue);\n'}
[7.365083] (ldlidar_component) StdoutLine: {'line': b'7: +         << paramName << "\' is not available or is not valid, using the default value: "\n'}
[7.365171] (ldlidar_component) StdoutLine: {'line': b'7: +                       << defValue);\n'}
[7.365268] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:263:17]: Replace [\\n    ] with [ ]\n'}
[7.365351] (ldlidar_component) StdoutLine: {'line': b'7: -     get_logger(),\n'}
[7.365427] (ldlidar_component) StdoutLine: {'line': b'7: -     "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())\n'}
[7.365500] (ldlidar_component) StdoutLine: {'line': b'7: +     get_logger(), "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())\n'}
[7.365572] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:264:50]: Replace [ ] with [\\n                                   ]\n'}
[7.365643] (ldlidar_component) StdoutLine: {'line': b'7: -     "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())\n'}
[7.365713] (ldlidar_component) StdoutLine: {'line': b'7: +     "on_configure: " << prev_state.label() << " ["\n'}
[7.365783] (ldlidar_component) StdoutLine: {'line': b'7: +                                    << static_cast<int>(prev_state.id())\n'}
[7.365854] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:264:87]: Replace [\\n                     ] with [ ]\n'}
[7.365923] (ldlidar_component) StdoutLine: {'line': b'7: -     "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())\n'}
[7.365992] (ldlidar_component) StdoutLine: {'line': b'7: -                      << "] -> Inactive");\n'}
[7.366061] (ldlidar_component) StdoutLine: {'line': b'7: +     "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id()) << "] -> Inactive");\n'}
[7.366133] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:326:17]: Replace [\\n    ] with [ ]\n'}
[7.366889] (ldlidar_component) StdoutLine: {'line': b'7: -     get_logger(),\n'}
[7.367000] (ldlidar_component) StdoutLine: {'line': b'7: -     "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())\n'}
[7.367080] (ldlidar_component) StdoutLine: {'line': b'7: +     get_logger(), "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())\n'}
[7.367156] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:327:51]: Replace [ ] with [\\n                                    ]\n'}
[7.367248] (ldlidar_component) StdoutLine: {'line': b'7: -     "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())\n'}
[7.367326] (ldlidar_component) StdoutLine: {'line': b'7: +     "on_deactivate: " << prev_state.label() << " ["\n'}
[7.367397] (ldlidar_component) StdoutLine: {'line': b'7: +                                     << static_cast<int>(prev_state.id())\n'}
[7.367469] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:327:88]: Replace [\\n                      ] with [ ]\n'}
[7.367539] (ldlidar_component) StdoutLine: {'line': b'7: -     "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())\n'}
[7.367609] (ldlidar_component) StdoutLine: {'line': b'7: -                       << "] -> Inactive");\n'}
[7.367678] (ldlidar_component) StdoutLine: {'line': b'7: +     "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id()) << "] -> Inactive");\n'}
[7.367749] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:435:40]: Replace [      ] with [          ]\n'}
[7.367819] (ldlidar_component) StdoutLine: {'line': b'7: -       float intensity = point.intensity;      // laser receive intensity\n'}
[7.367889] (ldlidar_component) StdoutLine: {'line': b'7: +       float intensity = point.intensity;          // laser receive intensity\n'}
[7.367958] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:438:10]: Replace [] with [\\n        ]\n'}
[7.368045] (ldlidar_component) StdoutLine: {'line': b'7: -       if ((point.distance == 0) && (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.\n'}
[7.368133] (ldlidar_component) StdoutLine: {'line': b'7: +       if (\n'}
[7.368217] (ldlidar_component) StdoutLine: {'line': b'7: +         (point.distance == 0) && (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.\n'}
[7.368301] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:438:34]: Replace [ ] with [\\n        ]\n'}
[7.368374] (ldlidar_component) StdoutLine: {'line': b'7: -       if ((point.distance == 0) && (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.\n'}
[7.368447] (ldlidar_component) StdoutLine: {'line': b'7: +       if ((point.distance == 0) &&\n'}
[7.368518] (ldlidar_component) StdoutLine: {'line': b'7: +         (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.\n'}
[7.368590] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:438:60]: Replace [ ] with [  ]\n'}
[7.368660] (ldlidar_component) StdoutLine: {'line': b'7: -       if ((point.distance == 0) && (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.\n'}
[7.368731] (ldlidar_component) StdoutLine: {'line': b'7: +       if ((point.distance == 0) && (point.intensity == 0)) {  // filter is handled to  0, Nan will be assigned variable.\n'}
[7.368801] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:443:29]: Replace [ ] with [  ]\n'}
[7.368870] (ldlidar_component) StdoutLine: {'line': b'7: -       if (_enableAngleCrop) { // Angle crop setting, Mask data within the set angle range\n'}
[7.368940] (ldlidar_component) StdoutLine: {'line': b'7: +       if (_enableAngleCrop) {  // Angle crop setting, Mask data within the set angle range\n'}
[7.369019] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:450:47]: Replace [ ] with [  ]\n'}
[7.369091] (ldlidar_component) StdoutLine: {'line': b'7: -       float angle = ANGLE_TO_RADIAN(dir_angle); // Lidar angle unit form degree transform to radian\n'}
[7.369236] (ldlidar_component) StdoutLine: {'line': b'7: +       float angle = ANGLE_TO_RADIAN(dir_angle);  // Lidar angle unit form degree transform to radian\n'}
[7.369316] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:455:25]: Replace [ ] with [\\n            ]\n'}
[7.369401] (ldlidar_component) StdoutLine: {'line': b'7: -             get_logger(), "error index: %d, beam_size: %d, angle: %f, msg->angle_min: %f, msg->angle_increment: %f",\n'}
[7.369474] (ldlidar_component) StdoutLine: {'line': b'7: +             get_logger(),\n'}
[7.369545] (ldlidar_component) StdoutLine: {'line': b'7: +             "error index: %d, beam_size: %d, angle: %f, msg->angle_min: %f, msg->angle_increment: %f",\n'}
[7.369618] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:455:112]: Replace [] with ["\\n            "]\n'}
[7.369690] (ldlidar_component) StdoutLine: {'line': b'7: -             get_logger(), "error index: %d, beam_size: %d, angle: %f, msg->angle_min: %f, msg->angle_increment: %f",\n'}
[7.369762] (ldlidar_component) StdoutLine: {'line': b'7: +             get_logger(), "error index: %d, beam_size: %d, angle: %f, msg->angle_min: %f, msg->angle_increment: "\n'}
[7.369833] (ldlidar_component) StdoutLine: {'line': b'7: +             "%f",\n'}
[7.369904] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:464:18]: Replace [ ] with [  ]\n'}
[7.369975] (ldlidar_component) StdoutLine: {'line': b'7: -           } else { // Otherwise, only when the distance is less than the current\n'}
[7.370048] (ldlidar_component) StdoutLine: {'line': b'7: +           } else {  // Otherwise, only when the distance is less than the current\n'}
[7.370119] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:464:80]: Replace [\\n                   ] with [\\n                    ]\n'}
[7.370198] (ldlidar_component) StdoutLine: {'line': b'7: -           } else { // Otherwise, only when the distance is less than the current\n'}
[7.370292] (ldlidar_component) StdoutLine: {'line': b'7: -                    //   value, it can be re assigned\n'}
[7.370365] (ldlidar_component) StdoutLine: {'line': b'7: +           } else { // Otherwise, only when the distance is less than the current\n'}
[7.370437] (ldlidar_component) StdoutLine: {'line': b'7: +                     //   value, it can be re assigned\n'}
[7.370507] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:475:18]: Replace [ ] with [  ]\n'}
[7.370577] (ldlidar_component) StdoutLine: {'line': b'7: -           } else { // Otherwise, only when the distance is less than the current\n'}
[7.370646] (ldlidar_component) StdoutLine: {'line': b'7: +           } else {  // Otherwise, only when the distance is less than the current\n'}
[7.370716] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:475:80]: Replace [\\n                   ] with [\\n                    ]\n'}
[7.370786] (ldlidar_component) StdoutLine: {'line': b'7: -           } else { // Otherwise, only when the distance is less than the current\n'}
[7.370856] (ldlidar_component) StdoutLine: {'line': b'7: -                    //   value, it can be re assigned\n'}
[7.370925] (ldlidar_component) StdoutLine: {'line': b'7: +           } else { // Otherwise, only when the distance is less than the current\n'}
[7.370994] (ldlidar_component) StdoutLine: {'line': b'7: +                     //   value, it can be re assigned\n'}
[7.371063] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:605:62]: Replace [\\n        ] with []\n'}
[7.371132] (ldlidar_component) StdoutLine: {'line': b'7: -       diagnostic_msgs::msg::DiagnosticStatus::OK, std::string(\n'}
[7.371228] (ldlidar_component) StdoutLine: {'line': b'7: -         "Node state: ") + state.label());\n'}
[7.371316] (ldlidar_component) StdoutLine: {'line': b'7: +       diagnostic_msgs::msg::DiagnosticStatus::OK, std::string("Node state: ") + state.label());\n'}
[7.371389] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:619:65]: Replace [\\n        ] with []\n'}
[7.371459] (ldlidar_component) StdoutLine: {'line': b'7: -       diagnostic_msgs::msg::DiagnosticStatus::STALE, std::string(\n'}
[7.371528] (ldlidar_component) StdoutLine: {'line': b'7: -         "Node state: ") + state.label());\n'}
[7.371597] (ldlidar_component) StdoutLine: {'line': b'7: +       diagnostic_msgs::msg::DiagnosticStatus::STALE, std::string("Node state: ") + state.label());\n'}
[7.371668] (ldlidar_component) StdoutLine: {'line': b'7: [component/src/ldlidar_component.cpp:623:65]: Replace [\\n        ] with []\n'}
[7.371738] (ldlidar_component) StdoutLine: {'line': b'7: -       diagnostic_msgs::msg::DiagnosticStatus::ERROR, std::string(\n'}
[7.371807] (ldlidar_component) StdoutLine: {'line': b'7: -         "Node state: ") + state.label());\n'}
[7.371875] (ldlidar_component) StdoutLine: {'line': b'7: +       diagnostic_msgs::msg::DiagnosticStatus::ERROR, std::string("Node state: ") + state.label());\n'}
[7.371944] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.372013] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'include/visibility_control.hpp':\n"}
[7.372081] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.372149] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:20:10]: Replace [\\n] with [ ]\n'}
[7.372233] (ldlidar_component) StdoutLine: {'line': b'7: - extern "C"\n'}
[7.372311] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.372383] (ldlidar_component) StdoutLine: {'line': b'7: + extern "C" {\n'}
[7.372453] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:27:40]: Replace [\\n  ] with [\\n]\n'}
[7.372522] (ldlidar_component) StdoutLine: {'line': b'7: - #if defined _WIN32 || defined __CYGWIN__\n'}
[7.372592] (ldlidar_component) StdoutLine: {'line': b'7: -   #ifdef __GNUC__\n'}
[7.372676] (ldlidar_component) StdoutLine: {'line': b'7: + #if defined _WIN32 || defined __CYGWIN__\n'}
[7.372746] (ldlidar_component) StdoutLine: {'line': b'7: + #ifdef __GNUC__\n'}
[7.372826] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:28:17]: Replace [\\n    ] with [\\n]\n'}
[7.372899] (ldlidar_component) StdoutLine: {'line': b'7: -   #ifdef __GNUC__\n'}
[7.372968] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))\n'}
[7.373037] (ldlidar_component) StdoutLine: {'line': b'7: +   #ifdef __GNUC__\n'}
[7.373106] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))\n'}
[7.373177] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:29:51]: Replace [ ] with []\n'}
[7.373265] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))\n'}
[7.373340] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_EXPORT __attribute__((dllexport))\n'}
[7.373411] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:29:65]: Replace [\\n    ] with [\\n]\n'}
[7.373480] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))\n'}
[7.373549] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))\n'}
[7.373617] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))\n'}
[7.373686] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))\n'}
[7.373755] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:30:51]: Replace [ ] with []\n'}
[7.373848] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))\n'}
[7.373920] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_IMPORT __attribute__((dllimport))\n'}
[7.373990] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:30:65]: Replace [\\n  ] with [\\n]\n'}
[7.374058] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))\n'}
[7.374126] (ldlidar_component) StdoutLine: {'line': b'7: -   #else\n'}
[7.374204] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))\n'}
[7.374286] (ldlidar_component) StdoutLine: {'line': b'7: + #else\n'}
[7.374358] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:31:7]: Replace [\\n    ] with [\\n]\n'}
[7.374428] (ldlidar_component) StdoutLine: {'line': b'7: -   #else\n'}
[7.374498] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_EXPORT __declspec(dllexport)\n'}
[7.374567] (ldlidar_component) StdoutLine: {'line': b'7: +   #else\n'}
[7.374635] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_EXPORT __declspec(dllexport)\n'}
[7.374704] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:32:59]: Replace [\\n    ] with [\\n]\n'}
[7.374773] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_EXPORT __declspec(dllexport)\n'}
[7.374842] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_IMPORT __declspec(dllimport)\n'}
[7.374912] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_EXPORT __declspec(dllexport)\n'}
[7.374980] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_IMPORT __declspec(dllimport)\n'}
[7.375049] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:33:59]: Replace [\\n  ] with [\\n]\n'}
[7.375118] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_IMPORT __declspec(dllimport)\n'}
[7.375195] (ldlidar_component) StdoutLine: {'line': b'7: -   #endif\n'}
[7.375286] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_IMPORT __declspec(dllimport)\n'}
[7.375358] (ldlidar_component) StdoutLine: {'line': b'7: + #endif\n'}
[7.375427] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:34:8]: Replace [\\n  ] with [\\n]\n'}
[7.375497] (ldlidar_component) StdoutLine: {'line': b'7: -   #endif\n'}
[7.375566] (ldlidar_component) StdoutLine: {'line': b'7: -   #ifdef LDLIDAR_COMPONENTS_BUILDING_DLL\n'}
[7.375636] (ldlidar_component) StdoutLine: {'line': b'7: +   #endif\n'}
[7.375705] (ldlidar_component) StdoutLine: {'line': b'7: + #ifdef LDLIDAR_COMPONENTS_BUILDING_DLL\n'}
[7.375867] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:35:40]: Replace [\\n    ] with [\\n]\n'}
[7.375942] (ldlidar_component) StdoutLine: {'line': b'7: -   #ifdef LDLIDAR_COMPONENTS_BUILDING_DLL\n'}
[7.376014] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_EXPORT\n'}
[7.376086] (ldlidar_component) StdoutLine: {'line': b'7: +   #ifdef LDLIDAR_COMPONENTS_BUILDING_DLL\n'}
[7.376156] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_EXPORT\n'}
[7.376253] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:36:63]: Replace [\\n  ] with [\\n]\n'}
[7.376329] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_EXPORT\n'}
[7.376399] (ldlidar_component) StdoutLine: {'line': b'7: -   #else\n'}
[7.376468] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_EXPORT\n'}
[7.376537] (ldlidar_component) StdoutLine: {'line': b'7: + #else\n'}
[7.376606] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:37:7]: Replace [\\n    ] with [\\n]\n'}
[7.376676] (ldlidar_component) StdoutLine: {'line': b'7: -   #else\n'}
[7.376744] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_IMPORT\n'}
[7.376816] (ldlidar_component) StdoutLine: {'line': b'7: +   #else\n'}
[7.376884] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_IMPORT\n'}
[7.376953] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:38:63]: Replace [\\n  ] with [\\n]\n'}
[7.377021] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_IMPORT\n'}
[7.377090] (ldlidar_component) StdoutLine: {'line': b'7: -   #endif\n'}
[7.377159] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_IMPORT\n'}
[7.377246] (ldlidar_component) StdoutLine: {'line': b'7: + #endif\n'}
[7.377321] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:39:8]: Replace [\\n  ] with [\\n]\n'}
[7.377391] (ldlidar_component) StdoutLine: {'line': b'7: -   #endif\n'}
[7.377460] (ldlidar_component) StdoutLine: {'line': b'7: -   #define LDLIDAR_COMPONENTS_PUBLIC_TYPE LDLIDAR_COMPONENTS_PUBLIC\n'}
[7.377528] (ldlidar_component) StdoutLine: {'line': b'7: +   #endif\n'}
[7.377596] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_PUBLIC_TYPE LDLIDAR_COMPONENTS_PUBLIC\n'}
[7.377668] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:40:66]: Replace [\\n  ] with [\\n]\n'}
[7.377750] (ldlidar_component) StdoutLine: {'line': b'7: -   #define LDLIDAR_COMPONENTS_PUBLIC_TYPE LDLIDAR_COMPONENTS_PUBLIC\n'}
[7.377822] (ldlidar_component) StdoutLine: {'line': b'7: -   #define LDLIDAR_COMPONENTS_LOCAL\n'}
[7.377893] (ldlidar_component) StdoutLine: {'line': b'7: +   #define LDLIDAR_COMPONENTS_PUBLIC_TYPE LDLIDAR_COMPONENTS_PUBLIC\n'}
[7.377963] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_LOCAL\n'}
[7.378032] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:42:5]: Replace [\\n  ] with [\\n]\n'}
[7.378101] (ldlidar_component) StdoutLine: {'line': b'7: - #else\n'}
[7.378278] (ldlidar_component) StdoutLine: {'line': b'7: -   #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))\n'}
[7.378360] (ldlidar_component) StdoutLine: {'line': b'7: + #else\n'}
[7.378433] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))\n'}
[7.378505] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:43:49]: Replace [ ] with []\n'}
[7.378576] (ldlidar_component) StdoutLine: {'line': b'7: -   #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))\n'}
[7.378648] (ldlidar_component) StdoutLine: {'line': b'7: +   #define LDLIDAR_COMPONENTS_EXPORT __attribute__((visibility("default")))\n'}
[7.378718] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:43:75]: Replace [\\n  ] with [\\n]\n'}
[7.378788] (ldlidar_component) StdoutLine: {'line': b'7: -   #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))\n'}
[7.378857] (ldlidar_component) StdoutLine: {'line': b'7: -   #define LDLIDAR_COMPONENTS_IMPORT\n'}
[7.378927] (ldlidar_component) StdoutLine: {'line': b'7: +   #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))\n'}
[7.378996] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_IMPORT\n'}
[7.379065] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:44:35]: Replace [\\n  ] with [\\n]\n'}
[7.379134] (ldlidar_component) StdoutLine: {'line': b'7: -   #define LDLIDAR_COMPONENTS_IMPORT\n'}
[7.379215] (ldlidar_component) StdoutLine: {'line': b'7: -   #if __GNUC__ >= 4\n'}
[7.379296] (ldlidar_component) StdoutLine: {'line': b'7: +   #define LDLIDAR_COMPONENTS_IMPORT\n'}
[7.379368] (ldlidar_component) StdoutLine: {'line': b'7: + #if __GNUC__ >= 4\n'}
[7.379439] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:45:19]: Replace [\\n    ] with [\\n]\n'}
[7.379511] (ldlidar_component) StdoutLine: {'line': b'7: -   #if __GNUC__ >= 4\n'}
[7.379580] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))\n'}
[7.379651] (ldlidar_component) StdoutLine: {'line': b'7: +   #if __GNUC__ >= 4\n'}
[7.379720] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))\n'}
[7.379805] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:46:51]: Replace [ ] with []\n'}
[7.379877] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))\n'}
[7.379948] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__((visibility("default")))\n'}
[7.380017] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:46:77]: Replace [\\n    ] with [\\n]\n'}
[7.380087] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))\n'}
[7.380157] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))\n'}
[7.380251] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))\n'}
[7.380327] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))\n'}
[7.380397] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:47:36]: Replace [  ] with [ ]\n'}
[7.380468] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))\n'}
[7.380537] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_LOCAL __attribute__ ((visibility("hidden")))\n'}
[7.380607] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:47:51]: Replace [ ] with []\n'}
[7.380677] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))\n'}
[7.380755] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__((visibility("hidden")))\n'}
[7.380826] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:47:76]: Replace [\\n  ] with [\\n]\n'}
[7.380896] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))\n'}
[7.380965] (ldlidar_component) StdoutLine: {'line': b'7: -   #else\n'}
[7.381035] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))\n'}
[7.381104] (ldlidar_component) StdoutLine: {'line': b'7: + #else\n'}
[7.381173] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:48:7]: Replace [\\n    ] with [\\n]\n'}
[7.381260] (ldlidar_component) StdoutLine: {'line': b'7: -   #else\n'}
[7.381334] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_PUBLIC\n'}
[7.381405] (ldlidar_component) StdoutLine: {'line': b'7: +   #else\n'}
[7.381473] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_PUBLIC\n'}
[7.381542] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:49:37]: Replace [\\n    ] with [\\n]\n'}
[7.381613] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_PUBLIC\n'}
[7.381683] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_LOCAL\n'}
[7.381752] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_PUBLIC\n'}
[7.381821] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_LOCAL\n'}
[7.381890] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:50:36]: Replace [\\n  ] with [\\n]\n'}
[7.381959] (ldlidar_component) StdoutLine: {'line': b'7: -     #define LDLIDAR_COMPONENTS_LOCAL\n'}
[7.382028] (ldlidar_component) StdoutLine: {'line': b'7: -   #endif\n'}
[7.382097] (ldlidar_component) StdoutLine: {'line': b'7: +     #define LDLIDAR_COMPONENTS_LOCAL\n'}
[7.382166] (ldlidar_component) StdoutLine: {'line': b'7: + #endif\n'}
[7.382256] (ldlidar_component) StdoutLine: {'line': b'7: [include/visibility_control.hpp:51:8]: Replace [\\n  ] with [\\n]\n'}
[7.382332] (ldlidar_component) StdoutLine: {'line': b'7: -   #endif\n'}
[7.382402] (ldlidar_component) StdoutLine: {'line': b'7: -   #define LDLIDAR_COMPONENTS_PUBLIC_TYPE\n'}
[7.382478] (ldlidar_component) StdoutLine: {'line': b'7: +   #endif\n'}
[7.382550] (ldlidar_component) StdoutLine: {'line': b'7: + #define LDLIDAR_COMPONENTS_PUBLIC_TYPE\n'}
[7.382620] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.382688] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/include/core/ldlidar_datatype.h':\n"}
[7.382758] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.382827] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:29:39]: Replace [ ] with []\n'}
[7.382896] (ldlidar_component) StdoutLine: {'line': b'7: - #define ANGLE_TO_RADIAN(angle) ((angle) * 3141.59 / 180000)\n'}
[7.382965] (ldlidar_component) StdoutLine: {'line': b'7: + #define ANGLE_TO_RADIAN(angle) ((angle)* 3141.59 / 180000)\n'}
[7.383034] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:29:41]: Replace [ ] with []\n'}
[7.383102] (ldlidar_component) StdoutLine: {'line': b'7: - #define ANGLE_TO_RADIAN(angle) ((angle) * 3141.59 / 180000)\n'}
[7.383171] (ldlidar_component) StdoutLine: {'line': b'7: + #define ANGLE_TO_RADIAN(angle) ((angle) *3141.59 / 180000)\n'}
[7.383257] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:30:40]: Replace [ ] with []\n'}
[7.383331] (ldlidar_component) StdoutLine: {'line': b'7: - #define RADIAN_TO_ANGLED(angle) ((angle) * 180000 / 3141.59)\n'}
[7.383401] (ldlidar_component) StdoutLine: {'line': b'7: + #define RADIAN_TO_ANGLED(angle) ((angle)* 180000 / 3141.59)\n'}
[7.383480] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:30:42]: Replace [ ] with []\n'}
[7.383551] (ldlidar_component) StdoutLine: {'line': b'7: - #define RADIAN_TO_ANGLED(angle) ((angle) * 180000 / 3141.59)\n'}
[7.383620] (ldlidar_component) StdoutLine: {'line': b'7: + #define RADIAN_TO_ANGLED(angle) ((angle) *180000 / 3141.59)\n'}
[7.383689] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:32:17]: Replace [ ] with [\\n]\n'}
[7.383759] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.383827] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar\n'}
[7.383897] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.383967] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:32:19]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.384037] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.384107] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.384175] (ldlidar_component) StdoutLine: {'line': b'7: -   enum class LDType\n'}
[7.384260] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar {\n'}
[7.384334] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.384403] (ldlidar_component) StdoutLine: {'line': b'7: + enum class LDType\n'}
[7.384472] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:34:19]: Replace [\\n  ] with [ ]\n'}
[7.384543] (ldlidar_component) StdoutLine: {'line': b'7: -   enum class LDType\n'}
[7.384612] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.384681] (ldlidar_component) StdoutLine: {'line': b'7: +   enum class LDType {\n'}
[7.384749] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:35:3]: Replace [\\n    ] with [\\n  ]\n'}
[7.384819] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.384888] (ldlidar_component) StdoutLine: {'line': b'7: -     NO_VERSION,\n'}
[7.384957] (ldlidar_component) StdoutLine: {'line': b'7: +   {\n'}
[7.385026] (ldlidar_component) StdoutLine: {'line': b'7: +   NO_VERSION,\n'}
[7.385095] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:36:15]: Replace [\\n    ] with [\\n  ]\n'}
[7.385165] (ldlidar_component) StdoutLine: {'line': b'7: -     NO_VERSION,\n'}
[7.385250] (ldlidar_component) StdoutLine: {'line': b'7: -     LD_06,\n'}
[7.385324] (ldlidar_component) StdoutLine: {'line': b'7: +     NO_VERSION,\n'}
[7.385394] (ldlidar_component) StdoutLine: {'line': b'7: +   LD_06,\n'}
[7.385463] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:37:10]: Replace [\\n    ] with [\\n  ]\n'}
[7.385534] (ldlidar_component) StdoutLine: {'line': b'7: -     LD_06,\n'}
[7.385602] (ldlidar_component) StdoutLine: {'line': b'7: -     LD_19,\n'}
[7.385671] (ldlidar_component) StdoutLine: {'line': b'7: +     LD_06,\n'}
[7.385739] (ldlidar_component) StdoutLine: {'line': b'7: +   LD_19,\n'}
[7.385808] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:38:10]: Replace [\\n    ] with [\\n  ]\n'}
[7.385893] (ldlidar_component) StdoutLine: {'line': b'7: -     LD_19,\n'}
[7.385963] (ldlidar_component) StdoutLine: {'line': b'7: -     STL_06P,\n'}
[7.386032] (ldlidar_component) StdoutLine: {'line': b'7: +     LD_19,\n'}
[7.386101] (ldlidar_component) StdoutLine: {'line': b'7: +   STL_06P,\n'}
[7.386169] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:39:12]: Replace [\\n    ] with [\\n  ]\n'}
[7.386256] (ldlidar_component) StdoutLine: {'line': b'7: -     STL_06P,\n'}
[7.386331] (ldlidar_component) StdoutLine: {'line': b'7: -     STL_26,\n'}
[7.386400] (ldlidar_component) StdoutLine: {'line': b'7: +     STL_06P,\n'}
[7.386469] (ldlidar_component) StdoutLine: {'line': b'7: +   STL_26,\n'}
[7.386538] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:40:11]: Replace [\\n    ] with [\\n  ]\n'}
[7.386617] (ldlidar_component) StdoutLine: {'line': b'7: -     STL_26,\n'}
[7.386686] (ldlidar_component) StdoutLine: {'line': b'7: -     STL_27L,\n'}
[7.386755] (ldlidar_component) StdoutLine: {'line': b'7: +     STL_26,\n'}
[7.386822] (ldlidar_component) StdoutLine: {'line': b'7: +   STL_27L,\n'}
[7.386891] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:41:12]: Replace [\\n  ] with [\\n]\n'}
[7.386962] (ldlidar_component) StdoutLine: {'line': b'7: -     STL_27L,\n'}
[7.387031] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.387100] (ldlidar_component) StdoutLine: {'line': b'7: +     STL_27L,\n'}
[7.387169] (ldlidar_component) StdoutLine: {'line': b'7: + };\n'}
[7.387264] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:42:4]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.387341] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.387411] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.387480] (ldlidar_component) StdoutLine: {'line': b'7: -   enum class LidarStatus\n'}
[7.387550] (ldlidar_component) StdoutLine: {'line': b'7: +   };\n'}
[7.387619] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.387688] (ldlidar_component) StdoutLine: {'line': b'7: + enum class LidarStatus\n'}
[7.387757] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:44:24]: Replace [\\n  ] with [ ]\n'}
[7.387827] (ldlidar_component) StdoutLine: {'line': b'7: -   enum class LidarStatus\n'}
[7.387896] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.387966] (ldlidar_component) StdoutLine: {'line': b'7: +   enum class LidarStatus {\n'}
[7.388036] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:45:3]: Replace [\\n    ] with [\\n  ]\n'}
[7.388106] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.388175] (ldlidar_component) StdoutLine: {'line': b'7: -     NORMAL,   //  \xe9\x9b\xb7\xe8\xbe\xbe\xe6\xad\xa3\xe5\xb8\xb8,\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xe7\x82\xb9\xe4\xba\x91\xe6\x95\xb0\xe6\x8d\xae\n'}
[7.388269] (ldlidar_component) StdoutLine: {'line': b'7: +   {\n'}
[7.388344] (ldlidar_component) StdoutLine: {'line': b'7: +   NORMAL,   //  \xe9\x9b\xb7\xe8\xbe\xbe\xe6\xad\xa3\xe5\xb8\xb8,\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xe7\x82\xb9\xe4\xba\x91\xe6\x95\xb0\xe6\x8d\xae\n'}
[7.388418] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:46:11]: Replace [   ] with [  ]\n'}
[7.388488] (ldlidar_component) StdoutLine: {'line': b'7: -     NORMAL,   //  \xe9\x9b\xb7\xe8\xbe\xbe\xe6\xad\xa3\xe5\xb8\xb8,\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xe7\x82\xb9\xe4\xba\x91\xe6\x95\xb0\xe6\x8d\xae\n'}
[7.388560] (ldlidar_component) StdoutLine: {'line': b'7: +     NORMAL,  //  \xe9\x9b\xb7\xe8\xbe\xbe\xe6\xad\xa3\xe5\xb8\xb8,\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xe7\x82\xb9\xe4\xba\x91\xe6\x95\xb0\xe6\x8d\xae\n'}
[7.388631] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:47:21]: Replace [\xe8\xbe\xbe\xe5\x87\xba\xe7\x8e\xb0\xe5\xbc\x82\xe5\xb8\xb8] with [\\n  ]\n'}
[7.388717] (ldlidar_component) StdoutLine: {'line': b'7: -     ERROR,    //  \xe8\xa1\xa8\xe6\x98\x8e\xe9\x9b\xb7\xe8\xbe\xbe\xe5\x87\xba\xe7\x8e\xb0\xe5\xbc\x82\xe5\xb8\xb8\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xe9\x9b\xb7\xe8\xbe\xbe\xe5\x8f\x8d\xe9\xa6\x88\xe7\x9a\x84\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe4\xba\x86\xe8\xa7\xa3\xe5\x85\xb7\xe4\xbd\x93\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe9\x94\x99\xe8\xaf\xaf\xe7\x94\xb1\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe5\xaf\xb9\xe5\xba\x94\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6\xe5\x80\xbc\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe4\xbd\x8d\xe5\x86\xb3\xe5\xae\x9a\n'}
[7.388798] (ldlidar_component) StdoutLine: {'line': b'7: +     ERROR,    //  \xe8\xa1\xa8\xe6\x98\x8e\xe9\x9b\xb7\n'}
[7.388870] (ldlidar_component) StdoutLine: {'line': b'7: +   \xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xe9\x9b\xb7\xe8\xbe\xbe\xe5\x8f\x8d\xe9\xa6\x88\xe7\x9a\x84\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe4\xba\x86\xe8\xa7\xa3\xe5\x85\xb7\xe4\xbd\x93\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe9\x94\x99\xe8\xaf\xaf\xe7\x94\xb1\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe5\xaf\xb9\xe5\xba\x94\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6\xe5\x80\xbc\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe4\xbd\x8d\xe5\x86\xb3\xe5\xae\x9a\n'}
[7.388957] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:47:32]: Replace [\xe9\x9b\xb7\xe8\xbe\xbe\xe5\x8f\x8d\xe9\xa6\x88] with [  ]\n'}
[7.389030] (ldlidar_component) StdoutLine: {'line': b'7: -     ERROR,    //  \xe8\xa1\xa8\xe6\x98\x8e\xe9\x9b\xb7\xe8\xbe\xbe\xe5\x87\xba\xe7\x8e\xb0\xe5\xbc\x82\xe5\xb8\xb8\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xe9\x9b\xb7\xe8\xbe\xbe\xe5\x8f\x8d\xe9\xa6\x88\xe7\x9a\x84\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe4\xba\x86\xe8\xa7\xa3\xe5\x85\xb7\xe4\xbd\x93\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe9\x94\x99\xe8\xaf\xaf\xe7\x94\xb1\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe5\xaf\xb9\xe5\xba\x94\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6\xe5\x80\xbc\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe4\xbd\x8d\xe5\x86\xb3\xe5\xae\x9a\n'}
[7.389105] (ldlidar_component) StdoutLine: {'line': b'7: +     ERROR,    //  \xe8\xa1\xa8\xe6\x98\x8e\xe9\x9b\xb7\xe8\xbe\xbe\xe5\x87\xba\xe7\x8e\xb0\xe5\xbc\x82\xe5\xb8\xb8\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96  \xe7\x9a\x84\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe4\xba\x86\xe8\xa7\xa3\xe5\x85\xb7\xe4\xbd\x93\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe9\x94\x99\xe8\xaf\xaf\xe7\x94\xb1\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe5\xaf\xb9\xe5\xba\x94\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6\xe5\x80\xbc\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe4\xbd\x8d\xe5\x86\xb3\xe5\xae\x9a\n'}
[7.389180] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:54:0]: Replace [  {\\n ] with [\\n  ]\n'}
[7.389271] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.389343] (ldlidar_component) StdoutLine: {'line': b'7: -     // Polar coordinate representation\n'}
[7.389413] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.389482] (ldlidar_component) StdoutLine: {'line': b'7: +      // Polar coordinate representation\n'}
[7.389550] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:55:15]: Replace [o] with [  ]\n'}
[7.389620] (ldlidar_component) StdoutLine: {'line': b'7: -     // Polar coordinate representation\n'}
[7.389689] (ldlidar_component) StdoutLine: {'line': b'7: +     // Polar co  rdinate representation\n'}
[7.389758] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:56:14]: Replace [e;   ] with [\\n  ]\n'}
[7.389829] (ldlidar_component) StdoutLine: {'line': b'7: -     float angle;       // Angle ranges from 0 to 359 degrees\n'}
[7.389900] (ldlidar_component) StdoutLine: {'line': b'7: +     float angl\n'}
[7.389970] (ldlidar_component) StdoutLine: {'line': b'7: +       // Angle ranges from 0 to 359 degrees\n'}
[7.390039] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:56:29]: Replace [l] with [      ]\n'}
[7.390110] (ldlidar_component) StdoutLine: {'line': b'7: -     float angle;       // Angle ranges from 0 to 359 degrees\n'}
[7.390196] (ldlidar_component) StdoutLine: {'line': b'7: +     float angle;       // Ang      e ranges from 0 to 359 degrees\n'}
[7.390309] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:57:6]: Replace [nt16_] with [\\n  ]\n'}
[7.390387] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t distance; // Distance is measured in millimeters\n'}
[7.390457] (ldlidar_component) StdoutLine: {'line': b'7: +     ui\n'}
[7.390526] (ldlidar_component) StdoutLine: {'line': b'7: +   t distance; // Distance is measured in millimeters\n'}
[7.390605] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:57:16]: Replace [tance] with [           ]\n'}
[7.390675] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t distance; // Distance is measured in millimeters\n'}
[7.390742] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t dis           ; // Distance is measured in millimeters\n'}
[7.390810] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:57:40]: Replace [asu] with [\\n]\n'}
[7.390879] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t distance; // Distance is measured in millimeters\n'}
[7.390945] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t distance; // Distance is me\n'}
[7.391012] (ldlidar_component) StdoutLine: {'line': b'7: + red in millimeters\n'}
[7.391078] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:57:45]: Replace [d in] with [\\n\\n]\n'}
[7.391146] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t distance; // Distance is measured in millimeters\n'}
[7.391236] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t distance; // Distance is measure\n'}
[7.391312] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.391379] (ldlidar_component) StdoutLine: {'line': b'7: +  millimeters\n'}
[7.391447] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:58:3]: Replace [ ui] with [\\n]\n'}
[7.391514] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t intensity; // Intensity is 0 to 255\n'}
[7.391583] (ldlidar_component) StdoutLine: {'line': b'7: +    \n'}
[7.391649] (ldlidar_component) StdoutLine: {'line': b'7: + nt8_t intensity; // Intensity is 0 to 255\n'}
[7.391715] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:58:7]: Replace [t8_t ] with [\\n  ]\n'}
[7.391804] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t intensity; // Intensity is 0 to 255\n'}
[7.391872] (ldlidar_component) StdoutLine: {'line': b'7: +     uin\n'}
[7.391939] (ldlidar_component) StdoutLine: {'line': b'7: +   intensity; // Intensity is 0 to 255\n'}
[7.392007] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:58:46]: Replace [5\\n   ] with [\\n  ]\n'}
[7.392075] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t intensity; // Intensity is 0 to 255\n'}
[7.392142] (ldlidar_component) StdoutLine: {'line': b'7: -     //! System time when first range was measured in nanoseconds\n'}
[7.392228] (ldlidar_component) StdoutLine: {'line': b'7: +     uint8_t intensity; // Intensity is 0 to 25\n'}
[7.392305] (ldlidar_component) StdoutLine: {'line': b'7: +    //! System time when first range was measured in nanoseconds\n'}
[7.392374] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:59:15]: Replace [time wh] with [        ]\n'}
[7.392442] (ldlidar_component) StdoutLine: {'line': b'7: -     //! System time when first range was measured in nanoseconds\n'}
[7.392509] (ldlidar_component) StdoutLine: {'line': b'7: +     //! System         en first range was measured in nanoseconds\n'}
[7.392576] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:59:59]: Replace [conds] with [\\n  ]\n'}
[7.392643] (ldlidar_component) StdoutLine: {'line': b'7: -     //! System time when first range was measured in nanoseconds\n'}
[7.392721] (ldlidar_component) StdoutLine: {'line': b'7: +     //! System time when first range was measured in nanose\n'}
[7.392791] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.392857] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:60:17]: Replace [p] with [  ]\n'}
[7.392924] (ldlidar_component) StdoutLine: {'line': b'7: -     uint64_t stamp;\n'}
[7.392991] (ldlidar_component) StdoutLine: {'line': b'7: +     uint64_t stam  ;\n'}
[7.393059] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:61:36]: Replace [tatio] with [\\n  ]\n'}
[7.393135] (ldlidar_component) StdoutLine: {'line': b'7: -     // Cartesian coordinate representation\n'}
[7.393219] (ldlidar_component) StdoutLine: {'line': b'7: +     // Cartesian coordinate represen\n'}
[7.393296] (ldlidar_component) StdoutLine: {'line': b'7: +   n\n'}
[7.393364] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:63:2]: Replace [ ] with [  ]\n'}
[7.393431] (ldlidar_component) StdoutLine: {'line': b'7: -     double y;\n'}
[7.393497] (ldlidar_component) StdoutLine: {'line': b'7: +      double y;\n'}
[7.393564] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:64:13]: Replace [(\\n   ] with [\\n  ]\n'}
[7.393632] (ldlidar_component) StdoutLine: {'line': b'7: -     PointData(\n'}
[7.393699] (ldlidar_component) StdoutLine: {'line': b'7: -       float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double x = 0,\n'}
[7.393766] (ldlidar_component) StdoutLine: {'line': b'7: +     PointData\n'}
[7.393833] (ldlidar_component) StdoutLine: {'line': b'7: +      float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double x = 0,\n'}
[7.393900] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:65:63]: Replace [_t st] with [\\n  ]\n'}
[7.393968] (ldlidar_component) StdoutLine: {'line': b'7: -       float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double x = 0,\n'}
[7.394035] (ldlidar_component) StdoutLine: {'line': b'7: +       float angle, uint16_t distance, uint8_t intensity, uint64\n'}
[7.394103] (ldlidar_component) StdoutLine: {'line': b'7: +   amp = 0, double x = 0,\n'}
[7.394170] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:65:83]: Replace [ x = ] with [\\n  ]\n'}
[7.394255] (ldlidar_component) StdoutLine: {'line': b'7: -       float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double x = 0,\n'}
[7.394329] (ldlidar_component) StdoutLine: {'line': b'7: +       float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double\n'}
[7.394397] (ldlidar_component) StdoutLine: {'line': b'7: +   0,\n'}
[7.394464] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:67:13]: Replace [ngle ] with [\\n  ]\n'}
[7.394531] (ldlidar_component) StdoutLine: {'line': b'7: -       this->angle = angle;\n'}
[7.394696] (ldlidar_component) StdoutLine: {'line': b'7: +       this->a\n'}
[7.394763] (ldlidar_component) StdoutLine: {'line': b'7: +   = angle;\n'}
[7.394830] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:68:0]: Replace [     ] with [\\n  ]\n'}
[7.394897] (ldlidar_component) StdoutLine: {'line': b'7: -       this->distance = distance;\n'}
[7.394964] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.395029] (ldlidar_component) StdoutLine: {'line': b'7: +    this->distance = distance;\n'}
[7.395095] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:68:14]: Replace [stanc] with [\\n  ]\n'}
[7.395162] (ldlidar_component) StdoutLine: {'line': b'7: -       this->distance = distance;\n'}
[7.395265] (ldlidar_component) StdoutLine: {'line': b'7: +       this->di\n'}
[7.395338] (ldlidar_component) StdoutLine: {'line': b'7: +   e = distance;\n'}
[7.395405] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:68:29]: Replace [ce;\\n   ] with [\\n    ]\n'}
[7.395472] (ldlidar_component) StdoutLine: {'line': b'7: -       this->distance = distance;\n'}
[7.395538] (ldlidar_component) StdoutLine: {'line': b'7: -       this->intensity = intensity;\n'}
[7.395606] (ldlidar_component) StdoutLine: {'line': b'7: +       this->distance = distan\n'}
[7.395672] (ldlidar_component) StdoutLine: {'line': b'7: +        this->intensity = intensity;\n'}
[7.395738] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:72:6]: Replace [this->y] with [\\n    ]\n'}
[7.395827] (ldlidar_component) StdoutLine: {'line': b'7: -       this->y = y;\n'}
[7.395897] (ldlidar_component) StdoutLine: {'line': b'7: +       \n'}
[7.395963] (ldlidar_component) StdoutLine: {'line': b'7: +      = y;\n'}
[7.396030] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:74:1]: Replace [ ] with [\\n  ]\n'}
[7.396099] (ldlidar_component) StdoutLine: {'line': b'7: -     PointData() {\n'}
[7.396167] (ldlidar_component) StdoutLine: {'line': b'7: +  \n'}
[7.396254] (ldlidar_component) StdoutLine: {'line': b'7: +     PointData() {\n'}
[7.396327] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:74:3]: Replace [ PointD] with [\\n    ]\n'}
[7.396395] (ldlidar_component) StdoutLine: {'line': b'7: -     PointData() {\n'}
[7.396461] (ldlidar_component) StdoutLine: {'line': b'7: +    \n'}
[7.396526] (ldlidar_component) StdoutLine: {'line': b'7: +     ata() {\n'}
[7.396592] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:78:0]: Replace [  typed] with [\\n    ]\n'}
[7.396660] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef std::vector < PointData > Points2D;\n'}
[7.396726] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.396791] (ldlidar_component) StdoutLine: {'line': b'7: +     ef std::vector < PointData > Points2D;\n'}
[7.396856] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:78:33]: Replace [ > Poin] with [\\n    ]\n'}
[7.396921] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef std::vector < PointData > Points2D;\n'}
[7.396987] (ldlidar_component) StdoutLine: {'line': b'7: +   typedef std::vector < PointData\n'}
[7.397052] (ldlidar_component) StdoutLine: {'line': b'7: +     ts2D;\n'}
[7.397117] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:81:2]: Replace [{\\n    /] with [\\n    ]\n'}
[7.397183] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.397274] (ldlidar_component) StdoutLine: {'line': b'7: -     //! System time when first range was measured in nanoseconds\n'}
[7.397344] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.397410] (ldlidar_component) StdoutLine: {'line': b'7: +     /! System time when first range was measured in nanoseconds\n'}
[7.397475] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:82:25]: Replace [first r] with [\\n    ]\n'}
[7.397567] (ldlidar_component) StdoutLine: {'line': b'7: -     //! System time when first range was measured in nanoseconds\n'}
[7.397635] (ldlidar_component) StdoutLine: {'line': b'7: +     //! System time when \n'}
[7.397702] (ldlidar_component) StdoutLine: {'line': b'7: +     ange was measured in nanoseconds\n'}
[7.397774] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:82:44]: Replace [sured i] with [\\n    ]\n'}
[7.397843] (ldlidar_component) StdoutLine: {'line': b'7: -     //! System time when first range was measured in nanoseconds\n'}
[7.397910] (ldlidar_component) StdoutLine: {'line': b'7: +     //! System time when first range was mea\n'}
[7.397977] (ldlidar_component) StdoutLine: {'line': b'7: +     n nanoseconds\n'}
[7.398043] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:82:63]: Replace [s\\n   ] with [\\n  ]\n'}
[7.398109] (ldlidar_component) StdoutLine: {'line': b'7: -     //! System time when first range was measured in nanoseconds\n'}
[7.398175] (ldlidar_component) StdoutLine: {'line': b'7: -     uint64_t stamp;\n'}
[7.398262] (ldlidar_component) StdoutLine: {'line': b'7: +     //! System time when first range was measured in nanosecond\n'}
[7.398335] (ldlidar_component) StdoutLine: {'line': b'7: +    uint64_t stamp;\n'}
[7.398402] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:83:4]: Replace [uint6] with [\\n  ]\n'}
[7.398478] (ldlidar_component) StdoutLine: {'line': b'7: -     uint64_t stamp;\n'}
[7.398775] (ldlidar_component) StdoutLine: {'line': b'7: +     \n'}
[7.398873] (ldlidar_component) StdoutLine: {'line': b'7: +   4_t stamp;\n'}
[7.398941] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:84:2]: Replace [  //!] with []\n'}
[7.399009] (ldlidar_component) StdoutLine: {'line': b'7: -     //! Array of laser point\n'}
[7.399075] (ldlidar_component) StdoutLine: {'line': b'7: +    Array of laser point\n'}
[7.399141] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:84:8]: Replace [Arr] with [\\n]\n'}
[7.399340] (ldlidar_component) StdoutLine: {'line': b'7: -     //! Array of laser point\n'}
[7.399424] (ldlidar_component) StdoutLine: {'line': b'7: +     //! \n'}
[7.399492] (ldlidar_component) StdoutLine: {'line': b'7: + ay of laser point\n'}
[7.399558] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:84:13]: Replace [ of ] with [\\n\\n]\n'}
[7.399625] (ldlidar_component) StdoutLine: {'line': b'7: -     //! Array of laser point\n'}
[7.399691] (ldlidar_component) StdoutLine: {'line': b'7: +     //! Array\n'}
[7.399757] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.399821] (ldlidar_component) StdoutLine: {'line': b'7: + laser point\n'}
[7.399887] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:85:7]: Replace [n] with []\n'}
[7.399953] (ldlidar_component) StdoutLine: {'line': b'7: -     Points2D points;\n'}
[7.400019] (ldlidar_component) StdoutLine: {'line': b'7: +     Poits2D points;\n'}
[7.400084] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:85:9]: Replace [s] with []\n'}
[7.400150] (ldlidar_component) StdoutLine: {'line': b'7: -     Points2D points;\n'}
[7.400233] (ldlidar_component) StdoutLine: {'line': b'7: +     Point2D points;\n'}
[7.400306] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:85:19]: Replace [;] with []\n'}
[7.400374] (ldlidar_component) StdoutLine: {'line': b'7: -     Points2D points;\n'}
[7.400440] (ldlidar_component) StdoutLine: {'line': b'7: +     Points2D points\n'}
[7.400505] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:87:9]: Replace [Scan] with [\\n\\n]\n'}
[7.400640] (ldlidar_component) StdoutLine: {'line': b'7: -     LaserScan & operator = (const LaserScan & data) {\n'}
[7.400738] (ldlidar_component) StdoutLine: {'line': b'7: +     Laser\n'}
[7.400804] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.400870] (ldlidar_component) StdoutLine: {'line': b'7: +  & operator = (const LaserScan & data) {\n'}
[7.400935] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:87:29]: Replace [ons] with [\\n]\n'}
[7.401001] (ldlidar_component) StdoutLine: {'line': b'7: -     LaserScan & operator = (const LaserScan & data) {\n'}
[7.401067] (ldlidar_component) StdoutLine: {'line': b'7: +     LaserScan & operator = (c\n'}
[7.401132] (ldlidar_component) StdoutLine: {'line': b'7: + t LaserScan & data) {\n'}
[7.401206] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:87:33]: Replace [ Lase] with [\\n  ]\n'}
[7.401369] (ldlidar_component) StdoutLine: {'line': b'7: -     LaserScan & operator = (const LaserScan & data) {\n'}
[7.401445] (ldlidar_component) StdoutLine: {'line': b'7: +     LaserScan & operator = (const\n'}
[7.401512] (ldlidar_component) StdoutLine: {'line': b'7: +   rScan & data) {\n'}
[7.401577] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:89:12]: Replace [point] with [\\n  ]\n'}
[7.401644] (ldlidar_component) StdoutLine: {'line': b'7: -       this->points = data.points;\n'}
[7.401710] (ldlidar_component) StdoutLine: {'line': b'7: +       this->\n'}
[7.401776] (ldlidar_component) StdoutLine: {'line': b'7: +   s = data.points;\n'}
[7.401855] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:89:32]: Replace [;\\n   ] with [\\n  ]\n'}
[7.401927] (ldlidar_component) StdoutLine: {'line': b'7: -       this->points = data.points;\n'}
[7.402153] (ldlidar_component) StdoutLine: {'line': b'7: -       return *this;\n'}
[7.402318] (ldlidar_component) StdoutLine: {'line': b'7: +       this->points = data.points\n'}
[7.402394] (ldlidar_component) StdoutLine: {'line': b'7: +      return *this;\n'}
[7.402462] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:92:1]: Replace [ };\\n\\n] with [\\n  ]\n'}
[7.402530] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.402597] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.402662] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.402728] (ldlidar_component) StdoutLine: {'line': b'7: +  \n'}
[7.402793] (ldlidar_component) StdoutLine: {'line': b'7: +   } // namespace ldlidar\n'}
[7.402859] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:94:16]: Replace [dlidar] with [\\n\\n  ]\n'}
[7.402926] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.402991] (ldlidar_component) StdoutLine: {'line': b'7: + } // namespace l\n'}
[7.403056] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.403122] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.403198] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:96:18]: Replace [D] with []\n'}
[7.403278] (ldlidar_component) StdoutLine: {'line': b'7: - #endif  // _POINT_DATA_H_\n'}
[7.403346] (ldlidar_component) StdoutLine: {'line': b'7: + #endif  // _POINT_ATA_H_\n'}
[7.403410] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:96:20]: Replace [T] with []\n'}
[7.403476] (ldlidar_component) StdoutLine: {'line': b'7: - #endif  // _POINT_DATA_H_\n'}
[7.403541] (ldlidar_component) StdoutLine: {'line': b'7: + #endif  // _POINT_DAA_H_\n'}
[7.403605] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:98:18]: Replace [*] with [\\n  ]\n'}
[7.403670] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF\n'}
[7.403735] (ldlidar_component) StdoutLine: {'line': b'7: + /*****************\n'}
[7.403800] (ldlidar_component) StdoutLine: {'line': b'7: +   *** (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF\n'}
[7.403865] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:98:20]: Replace [** (C) ] with [\\n    ]\n'}
[7.403939] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF\n'}
[7.404008] (ldlidar_component) StdoutLine: {'line': b'7: + /*******************\n'}
[7.404075] (ldlidar_component) StdoutLine: {'line': b'7: +     COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF\n'}
[7.404140] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:98:52]: Replace [T CO., ] with [\\n    ]\n'}
[7.404219] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF\n'}
[7.404295] (ldlidar_component) StdoutLine: {'line': b'7: + /********************* (C) COPYRIGHT SHENZHEN LDROBO\n'}
[7.404361] (ldlidar_component) StdoutLine: {'line': b'7: +     LTD *******END OF\n'}
[7.404427] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:99:9]: Replace [*******] with [\\n    ]\n'}
[7.404508] (ldlidar_component) StdoutLine: {'line': b'7: -  * FILE ********/\n'}
[7.404576] (ldlidar_component) StdoutLine: {'line': b'7: +  * FILE *\n'}
[7.404641] (ldlidar_component) StdoutLine: {'line': b'7: +     /\n'}
[7.404706] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:100:11]: Replace [] with [\\n  ]\n'}
[7.404772] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.404844] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.404909] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.404974] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:100:17]: Replace [] with [\\n]\n'}
[7.405039] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.405104] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.405167] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.405253] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_datatype.h:100:25]: Replace [] with [  ]\n'}
[7.405326] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.405391] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.405455] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.405520] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/include/core/ldlidar_driver.h':\n"}
[7.405586] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.405651] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:24:0]: Replace [#include <chrono>\\n#include <functional>\\n\\n#include "serial_interface_linux.h"\\n#include "network_socket_interface_linux.h"\\n#include "lipkg.h"\\n#include "log_module.h"] with [#include <chrono>\\n#include <functional>\\n\\n#include "lipkg.h"\\n#include "log_module.h"\\n#include "network_socket_interface_linux.h"\\n#include "serial_interface_linux.h"]\n'}
[7.405723] (ldlidar_component) StdoutLine: {'line': b'7: - #include <chrono>\n'}
[7.405788] (ldlidar_component) StdoutLine: {'line': b'7: - #include <functional>\n'}
[7.405853] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.405918] (ldlidar_component) StdoutLine: {'line': b'7: - #include "serial_interface_linux.h"\n'}
[7.405984] (ldlidar_component) StdoutLine: {'line': b'7: - #include "network_socket_interface_linux.h"\n'}
[7.406050] (ldlidar_component) StdoutLine: {'line': b'7: - #include "lipkg.h"\n'}
[7.406115] (ldlidar_component) StdoutLine: {'line': b'7: - #include "log_module.h"\n'}
[7.406181] (ldlidar_component) StdoutLine: {'line': b'7: + #include <chrono>\n'}
[7.406265] (ldlidar_component) StdoutLine: {'line': b'7: + #include <functional>\n'}
[7.406333] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.406400] (ldlidar_component) StdoutLine: {'line': b'7: + #include "lipkg.h"\n'}
[7.406466] (ldlidar_component) StdoutLine: {'line': b'7: + #include "log_module.h"\n'}
[7.406532] (ldlidar_component) StdoutLine: {'line': b'7: + #include "network_socket_interface_linux.h"\n'}
[7.406598] (ldlidar_component) StdoutLine: {'line': b'7: + #include "serial_interface_linux.h"\n'}
[7.406662] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:32:17]: Replace [ ] with [\\n]\n'}
[7.406728] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.406792] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar\n'}
[7.406856] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.406920] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:32:19]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.406986] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.407051] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.407114] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef enum CommunicationMode\n'}
[7.407179] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar {\n'}
[7.407266] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.407334] (ldlidar_component) StdoutLine: {'line': b'7: + typedef enum CommunicationMode\n'}
[7.407400] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:34:32]: Replace [\\n  ] with [ ]\n'}
[7.407467] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef enum CommunicationMode\n'}
[7.407533] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.407598] (ldlidar_component) StdoutLine: {'line': b'7: +   typedef enum CommunicationMode {\n'}
[7.407672] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:35:3]: Replace [\\n    ] with [\\n  ]\n'}
[7.407740] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.407806] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_NO_NULL,\n'}
[7.407871] (ldlidar_component) StdoutLine: {'line': b'7: +   {\n'}
[7.407936] (ldlidar_component) StdoutLine: {'line': b'7: +   COMM_NO_NULL,\n'}
[7.408001] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:36:17]: Replace [\\n    ] with [\\n  ]\n'}
[7.408066] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_NO_NULL,\n'}
[7.408131] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_SERIAL_MODE, /* serial communication */\n'}
[7.408203] (ldlidar_component) StdoutLine: {'line': b'7: +     COMM_NO_NULL,\n'}
[7.408280] (ldlidar_component) StdoutLine: {'line': b'7: +   COMM_SERIAL_MODE, /* serial communication */\n'}
[7.408372] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:37:21]: Replace [ ] with [     ]\n'}
[7.408439] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_SERIAL_MODE, /* serial communication */\n'}
[7.408504] (ldlidar_component) StdoutLine: {'line': b'7: +     COMM_SERIAL_MODE,     /* serial communication */\n'}
[7.408569] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:37:48]: Replace [\\n    ] with [\\n  ]\n'}
[7.408634] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_SERIAL_MODE, /* serial communication */\n'}
[7.408698] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_UDP_CLIENT_MODE, /* network communication for UDP client */\n'}
[7.408764] (ldlidar_component) StdoutLine: {'line': b'7: +     COMM_SERIAL_MODE, /* serial communication */\n'}
[7.408829] (ldlidar_component) StdoutLine: {'line': b'7: +   COMM_UDP_CLIENT_MODE, /* network communication for UDP client */\n'}
[7.408893] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:38:68]: Replace [\\n    ] with [\\n  ]\n'}
[7.408959] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_UDP_CLIENT_MODE, /* network communication for UDP client */\n'}
[7.409033] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_UDP_SERVER_MODE, /* network communication for UDP server */\n'}
[7.409101] (ldlidar_component) StdoutLine: {'line': b'7: +     COMM_UDP_CLIENT_MODE, /* network communication for UDP client */\n'}
[7.409167] (ldlidar_component) StdoutLine: {'line': b'7: +   COMM_UDP_SERVER_MODE, /* network communication for UDP server */\n'}
[7.409249] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:39:68]: Replace [\\n    ] with [\\n  ]\n'}
[7.409321] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_UDP_SERVER_MODE, /* network communication for UDP server */\n'}
[7.409388] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_TCP_CLIENT_MODE, /* network communication for TCP client */\n'}
[7.409454] (ldlidar_component) StdoutLine: {'line': b'7: +     COMM_UDP_SERVER_MODE, /* network communication for UDP server */\n'}
[7.409520] (ldlidar_component) StdoutLine: {'line': b'7: +   COMM_TCP_CLIENT_MODE, /* network communication for TCP client */\n'}
[7.409586] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:40:68]: Replace [\\n    ] with [\\n  ]\n'}
[7.409652] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_TCP_CLIENT_MODE, /* network communication for TCP client */\n'}
[7.409716] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_TCP_SERVER_MODE /* network communication for TCP server */\n'}
[7.409782] (ldlidar_component) StdoutLine: {'line': b'7: +     COMM_TCP_CLIENT_MODE, /* network communication for TCP client */\n'}
[7.409847] (ldlidar_component) StdoutLine: {'line': b'7: +   COMM_TCP_SERVER_MODE /* network communication for TCP server */\n'}
[7.409912] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:41:24]: Replace [ ] with [  ]\n'}
[7.409985] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_TCP_SERVER_MODE /* network communication for TCP server */\n'}
[7.410050] (ldlidar_component) StdoutLine: {'line': b'7: +     COMM_TCP_SERVER_MODE  /* network communication for TCP server */\n'}
[7.410115] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:41:67]: Replace [\\n  ] with [\\n]\n'}
[7.410198] (ldlidar_component) StdoutLine: {'line': b'7: -     COMM_TCP_SERVER_MODE /* network communication for TCP server */\n'}
[7.410276] (ldlidar_component) StdoutLine: {'line': b'7: -   } CommunicationModeTypeDef;\n'}
[7.410344] (ldlidar_component) StdoutLine: {'line': b'7: +     COMM_TCP_SERVER_MODE /* network communication for TCP server */\n'}
[7.410410] (ldlidar_component) StdoutLine: {'line': b'7: + } CommunicationModeTypeDef;\n'}
[7.410476] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:42:29]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.410543] (ldlidar_component) StdoutLine: {'line': b'7: -   } CommunicationModeTypeDef;\n'}
[7.410609] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.410678] (ldlidar_component) StdoutLine: {'line': b'7: -   class LDLidarDriver {\n'}
[7.410751] (ldlidar_component) StdoutLine: {'line': b'7: +   } CommunicationModeTypeDef;\n'}
[7.410829] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.410903] (ldlidar_component) StdoutLine: {'line': b'7: + class LDLidarDriver {\n'}
[7.410976] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:44:21]: Replace [ ] with [\\n]\n'}
[7.411050] (ldlidar_component) StdoutLine: {'line': b'7: -   class LDLidarDriver {\n'}
[7.411122] (ldlidar_component) StdoutLine: {'line': b'7: +   class LDLidarDriver\n'}
[7.411202] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.411660] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:45:7]: Replace [\\n    ] with [\\n  ]\n'}
[7.411754] (ldlidar_component) StdoutLine: {'line': b'7: - public:\n'}
[7.411835] (ldlidar_component) StdoutLine: {'line': b'7: -     LDLidarDriver();\n'}
[7.411912] (ldlidar_component) StdoutLine: {'line': b'7: + public:\n'}
[7.411987] (ldlidar_component) StdoutLine: {'line': b'7: +   LDLidarDriver();\n'}
[7.412062] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:46:20]: Replace [\\n    ] with [\\n  ]\n'}
[7.412138] (ldlidar_component) StdoutLine: {'line': b'7: -     LDLidarDriver();\n'}
[7.412363] (ldlidar_component) StdoutLine: {'line': b'7: -     ~LDLidarDriver();\n'}
[7.413032] (ldlidar_component) StdoutLine: {'line': b'7: +     LDLidarDriver();\n'}
[7.413136] (ldlidar_component) StdoutLine: {'line': b'7: +   ~LDLidarDriver();\n'}
[7.413247] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:47:21]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.413503] (ldlidar_component) StdoutLine: {'line': b'7: -     ~LDLidarDriver();\n'}
[7.413583] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.413659] (ldlidar_component) StdoutLine: {'line': b'7: -     /**\n'}
[7.413733] (ldlidar_component) StdoutLine: {'line': b'7: +     ~LDLidarDriver();\n'}
[7.413807] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.413880] (ldlidar_component) StdoutLine: {'line': b'7: +   /**\n'}
[7.413954] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:53:6]: Replace [\\n    ] with [\\n  ]\n'}
[7.414028] (ldlidar_component) StdoutLine: {'line': b'7: -     */\n'}
[7.414102] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string GetLidarSdkVersionNumber(void);\n'}
[7.414176] (ldlidar_component) StdoutLine: {'line': b'7: +     */\n'}
[7.414636] (ldlidar_component) StdoutLine: {'line': b'7: +   std::string GetLidarSdkVersionNumber(void);\n'}
[7.414851] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:54:47]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.415163] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string GetLidarSdkVersionNumber(void);\n'}
[7.415278] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.415360] (ldlidar_component) StdoutLine: {'line': b'7: -     /**\n'}
[7.415436] (ldlidar_component) StdoutLine: {'line': b'7: +     std::string GetLidarSdkVersionNumber(void);\n'}
[7.415509] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.415582] (ldlidar_component) StdoutLine: {'line': b'7: +   /**\n'}
[7.415656] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:70:6]: Replace [\\n    ] with [\\n  ]\n'}
[7.415729] (ldlidar_component) StdoutLine: {'line': b'7: -     */\n'}
[7.415802] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Start(\n'}
[7.415875] (ldlidar_component) StdoutLine: {'line': b'7: +     */\n'}
[7.415947] (ldlidar_component) StdoutLine: {'line': b'7: +   bool Start(\n'}
[7.416020] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:71:15]: Replace [\\n      ] with [\\n    ]\n'}
[7.416094] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Start(\n'}
[7.416166] (ldlidar_component) StdoutLine: {'line': b'7: -       LDType product_name,\n'}
[7.416270] (ldlidar_component) StdoutLine: {'line': b'7: +     bool Start(\n'}
[7.416350] (ldlidar_component) StdoutLine: {'line': b'7: +     LDType product_name,\n'}
[7.416423] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:72:26]: Replace [\\n      ] with [ ]\n'}
[7.416497] (ldlidar_component) StdoutLine: {'line': b'7: -       LDType product_name,\n'}
[7.416572] (ldlidar_component) StdoutLine: {'line': b'7: -       std::string serial_port_name,\n'}
[7.416647] (ldlidar_component) StdoutLine: {'line': b'7: +       LDType product_name, std::string serial_port_name,\n'}
[7.416721] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:73:35]: Replace [\\n      ] with [ ]\n'}
[7.416838] (ldlidar_component) StdoutLine: {'line': b'7: -       std::string serial_port_name,\n'}
[7.416920] (ldlidar_component) StdoutLine: {'line': b'7: -       uint32_t serial_baudrate = 115200,\n'}
[7.416994] (ldlidar_component) StdoutLine: {'line': b'7: +       std::string serial_port_name, uint32_t serial_baudrate = 115200,\n'}
[7.417067] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:74:40]: Replace [\\n      ] with [\\n    ]\n'}
[7.417140] (ldlidar_component) StdoutLine: {'line': b'7: -       uint32_t serial_baudrate = 115200,\n'}
[7.417225] (ldlidar_component) StdoutLine: {'line': b'7: -       CommunicationModeTypeDef comm_mode = COMM_SERIAL_MODE);\n'}
[7.417421] (ldlidar_component) StdoutLine: {'line': b'7: +       uint32_t serial_baudrate = 115200,\n'}
[7.417507] (ldlidar_component) StdoutLine: {'line': b'7: +     CommunicationModeTypeDef comm_mode = COMM_SERIAL_MODE);\n'}
[7.417585] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:75:61]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.417661] (ldlidar_component) StdoutLine: {'line': b'7: -       CommunicationModeTypeDef comm_mode = COMM_SERIAL_MODE);\n'}
[7.417735] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.417808] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Start(\n'}
[7.417881] (ldlidar_component) StdoutLine: {'line': b'7: +       CommunicationModeTypeDef comm_mode = COMM_SERIAL_MODE);\n'}
[7.417954] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.418026] (ldlidar_component) StdoutLine: {'line': b'7: +   bool Start(\n'}
[7.418099] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:77:15]: Replace [\\n      ] with [\\n    ]\n'}
[7.418172] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Start(\n'}
[7.418301] (ldlidar_component) StdoutLine: {'line': b'7: -       LDType product_name,\n'}
[7.418386] (ldlidar_component) StdoutLine: {'line': b'7: +     bool Start(\n'}
[7.418460] (ldlidar_component) StdoutLine: {'line': b'7: +     LDType product_name,\n'}
[7.418571] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:78:26]: Replace [\\n      ] with [ ]\n'}
[7.418648] (ldlidar_component) StdoutLine: {'line': b'7: -       LDType product_name,\n'}
[7.418721] (ldlidar_component) StdoutLine: {'line': b'7: -       const char * server_ip,\n'}
[7.418794] (ldlidar_component) StdoutLine: {'line': b'7: +       LDType product_name, const char * server_ip,\n'}
[7.418866] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:79:29]: Replace [\\n      ] with [ ]\n'}
[7.418940] (ldlidar_component) StdoutLine: {'line': b'7: -       const char * server_ip,\n'}
[7.419012] (ldlidar_component) StdoutLine: {'line': b'7: -       const char * server_port,\n'}
[7.419086] (ldlidar_component) StdoutLine: {'line': b'7: +       const char * server_ip, const char * server_port,\n'}
[7.419159] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:80:31]: Replace [\\n      ] with [\\n    ]\n'}
[7.419284] (ldlidar_component) StdoutLine: {'line': b'7: -       const char * server_port,\n'}
[7.419370] (ldlidar_component) StdoutLine: {'line': b'7: -       CommunicationModeTypeDef comm_mode = COMM_TCP_CLIENT_MODE);\n'}
[7.419446] (ldlidar_component) StdoutLine: {'line': b'7: +       const char * server_port,\n'}
[7.419519] (ldlidar_component) StdoutLine: {'line': b'7: +     CommunicationModeTypeDef comm_mode = COMM_TCP_CLIENT_MODE);\n'}
[7.419593] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:81:65]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.419667] (ldlidar_component) StdoutLine: {'line': b'7: -       CommunicationModeTypeDef comm_mode = COMM_TCP_CLIENT_MODE);\n'}
[7.419795] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.419871] (ldlidar_component) StdoutLine: {'line': b'7: -     /**\n'}
[7.419944] (ldlidar_component) StdoutLine: {'line': b'7: +       CommunicationModeTypeDef comm_mode = COMM_TCP_CLIENT_MODE);\n'}
[7.420017] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.420089] (ldlidar_component) StdoutLine: {'line': b'7: +   /**\n'}
[7.420161] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:88:6]: Replace [\\n    ] with [\\n  ]\n'}
[7.420291] (ldlidar_component) StdoutLine: {'line': b'7: -     */\n'}
[7.420387] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Stop(void);\n'}
[7.420461] (ldlidar_component) StdoutLine: {'line': b'7: +     */\n'}
[7.420533] (ldlidar_component) StdoutLine: {'line': b'7: +   bool Stop(void);\n'}
[7.420606] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:89:20]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.420680] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Stop(void);\n'}
[7.420753] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.420825] (ldlidar_component) StdoutLine: {'line': b'7: -     /**\n'}
[7.420897] (ldlidar_component) StdoutLine: {'line': b'7: +     bool Stop(void);\n'}
[7.420968] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.421040] (ldlidar_component) StdoutLine: {'line': b'7: +   /**\n'}
[7.421112] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:97:6]: Replace [\\n    ] with [\\n  ]\n'}
[7.421192] (ldlidar_component) StdoutLine: {'line': b'7: -     */\n'}
[7.421290] (ldlidar_component) StdoutLine: {'line': b'7: -     bool WaitLidarCommConnect(int64_t timeout);\n'}
[7.421366] (ldlidar_component) StdoutLine: {'line': b'7: +     */\n'}
[7.421438] (ldlidar_component) StdoutLine: {'line': b'7: +   bool WaitLidarCommConnect(int64_t timeout);\n'}
[7.421511] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:98:47]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.421584] (ldlidar_component) StdoutLine: {'line': b'7: -     bool WaitLidarCommConnect(int64_t timeout);\n'}
[7.421657] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.421729] (ldlidar_component) StdoutLine: {'line': b'7: -     /**\n'}
[7.421836] (ldlidar_component) StdoutLine: {'line': b'7: +     bool WaitLidarCommConnect(int64_t timeout);\n'}
[7.421910] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.421982] (ldlidar_component) StdoutLine: {'line': b'7: +   /**\n'}
[7.422054] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:111:19]: Replace [Laser] with [\\n  ]\n'}
[7.422127] (ldlidar_component) StdoutLine: {'line': b'7: -     LidarStatus GetLaserScanData(Points2D & dst, int64_t timeout = 1000);\n'}
[7.422212] (ldlidar_component) StdoutLine: {'line': b'7: +     LidarStatus Get\n'}
[7.422343] (ldlidar_component) StdoutLine: {'line': b'7: +   ScanData(Points2D & dst, int64_t timeout = 1000);\n'}
[7.422424] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:113:18]: Replace [tLaser] with [\\n\\n  ]\n'}
[7.422498] (ldlidar_component) StdoutLine: {'line': b'7: -     LidarStatus GetLaserScanData(LaserScan & dst, int64_t timeout = 1000);\n'}
[7.422570] (ldlidar_component) StdoutLine: {'line': b'7: +     LidarStatus Ge\n'}
[7.422644] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.422716] (ldlidar_component) StdoutLine: {'line': b'7: +   ScanData(LaserScan & dst, int64_t timeout = 1000);\n'}
[7.422789] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:116:10]: Replace [ief ge] with [\\n\\n  ]\n'}
[7.422861] (ldlidar_component) StdoutLine: {'line': b'7: -      * @brief get lidar laser scan frequence\n'}
[7.422942] (ldlidar_component) StdoutLine: {'line': b'7: +      * @br\n'}
[7.423019] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.423092] (ldlidar_component) StdoutLine: {'line': b'7: +   t lidar laser scan frequence\n'}
[7.423165] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:122:19]: Replace [anFre] with [\\n  ]\n'}
[7.423267] (ldlidar_component) StdoutLine: {'line': b'7: -     bool GetLidarScanFreq(double & spin_hz);\n'}
[7.423348] (ldlidar_component) StdoutLine: {'line': b'7: +     bool GetLidarSc\n'}
[7.423423] (ldlidar_component) StdoutLine: {'line': b'7: +   q(double & spin_hz);\n'}
[7.423496] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:125:10]: Replace [ief re] with [\\n\\n  ]\n'}
[7.423569] (ldlidar_component) StdoutLine: {'line': b'7: -      * @brief register get timestamp handle functional.\n'}
[7.423643] (ldlidar_component) StdoutLine: {'line': b'7: +      * @br\n'}
[7.423715] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.423787] (ldlidar_component) StdoutLine: {'line': b'7: +   gister get timestamp handle functional.\n'}
[7.423859] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:130:19]: Replace [tTime] with [\\n  ]\n'}
[7.423932] (ldlidar_component) StdoutLine: {'line': b'7: -     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_handle);\n'}
[7.424061] (ldlidar_component) StdoutLine: {'line': b'7: +     void RegisterGe\n'}
[7.424137] (ldlidar_component) StdoutLine: {'line': b'7: +   stampFunctional(std::function < uint64_t(void) > get_timestamp_handle);\n'}
[7.424225] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:130:73]: Replace [g] with []\n'}
[7.424330] (ldlidar_component) StdoutLine: {'line': b'7: -     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_handle);\n'}
[7.424407] (ldlidar_component) StdoutLine: {'line': b'7: +     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > et_timestamp_handle);\n'}
[7.424480] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:130:75]: Replace [t] with []\n'}
[7.424553] (ldlidar_component) StdoutLine: {'line': b'7: -     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_handle);\n'}
[7.424626] (ldlidar_component) StdoutLine: {'line': b'7: +     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > ge_timestamp_handle);\n'}
[7.424712] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:130:90]: Replace [d] with []\n'}
[7.424786] (ldlidar_component) StdoutLine: {'line': b'7: -     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_handle);\n'}
[7.424860] (ldlidar_component) StdoutLine: {'line': b'7: +     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_hanle);\n'}
[7.424933] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:133:10]: Replace [ief op] with [\\n\\n  ]\n'}
[7.425007] (ldlidar_component) StdoutLine: {'line': b'7: -      * @brief open or close filter algorithnm process\n'}
[7.425080] (ldlidar_component) StdoutLine: {'line': b'7: +      * @br\n'}
[7.425153] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.425250] (ldlidar_component) StdoutLine: {'line': b'7: +   en or close filter algorithnm process\n'}
[7.425327] (-) TimerEvent: {}
[7.425589] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:139:19]: Replace [erAlg] with [\\n  ]\n'}
[7.425687] (ldlidar_component) StdoutLine: {'line': b'7: -     void EnableFilterAlgorithnmProcess(bool is_enable);\n'}
[7.425764] (ldlidar_component) StdoutLine: {'line': b'7: +     void EnableFilt\n'}
[7.425839] (ldlidar_component) StdoutLine: {'line': b'7: +   orithnmProcess(bool is_enable);\n'}
[7.425915] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:142:10]: Replace [ief Wh] with [\\n\\n  ]\n'}
[7.425989] (ldlidar_component) StdoutLine: {'line': b'7: -      * @brief When the lidar is in an error state, get the error code fed back by the lidar\n'}
[7.426063] (ldlidar_component) StdoutLine: {'line': b'7: +      * @br\n'}
[7.426136] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.426226] (ldlidar_component) StdoutLine: {'line': b'7: +   en the lidar is in an error state, get the error code fed back by the lidar\n'}
[7.426344] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:146:19]: Replace [idarE] with [\\n  ]\n'}
[7.426476] (ldlidar_component) StdoutLine: {'line': b'7: -     // uint8_t GetLidarErrorCode(void);\n'}
[7.426554] (ldlidar_component) StdoutLine: {'line': b'7: +     // uint8_t GetL\n'}
[7.426629] (ldlidar_component) StdoutLine: {'line': b'7: +   rrorCode(void);\n'}
[7.426705] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:148:18]: Replace [Ok() {] with [\\n\\n  ]\n'}
[7.426837] (ldlidar_component) StdoutLine: {'line': b'7: -     static bool IsOk() {return is_ok_;}\n'}
[7.426917] (ldlidar_component) StdoutLine: {'line': b'7: +     static bool Is\n'}
[7.426992] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.427068] (ldlidar_component) StdoutLine: {'line': b'7: +   return is_ok_;}\n'}
[7.427143] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:150:3]: Replace [] with [ ]\n'}
[7.427259] (ldlidar_component) StdoutLine: {'line': b'7: -     static void SetIsOkStatus(bool status) {is_ok_ = status;}\n'}
[7.427365] (ldlidar_component) StdoutLine: {'line': b'7: +      static void SetIsOkStatus(bool status) {is_ok_ = status;}\n'}
[7.427442] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:150:17]: Replace [] with [ ]\n'}
[7.427516] (ldlidar_component) StdoutLine: {'line': b'7: -     static void SetIsOkStatus(bool status) {is_ok_ = status;}\n'}
[7.427590] (ldlidar_component) StdoutLine: {'line': b'7: +     static void S etIsOkStatus(bool status) {is_ok_ = status;}\n'}
[7.427663] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:150:18]: Replace [tIsOkS] with [\\n\\n  ]\n'}
[7.427737] (ldlidar_component) StdoutLine: {'line': b'7: -     static void SetIsOkStatus(bool status) {is_ok_ = status;}\n'}
[7.427809] (ldlidar_component) StdoutLine: {'line': b'7: +     static void Se\n'}
[7.427911] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.427985] (ldlidar_component) StdoutLine: {'line': b'7: +   tatus(bool status) {is_ok_ = status;}\n'}
[7.428058] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:152:1]: Replace [] with [ ]\n'}
[7.428131] (ldlidar_component) StdoutLine: {'line': b'7: - private:\n'}
[7.428235] (ldlidar_component) StdoutLine: {'line': b'7: + p rivate:\n'}
[7.428339] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:153:8]: Replace [] with [ ]\n'}
[7.428441] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string sdk_version_number_;\n'}
[7.428520] (ldlidar_component) StdoutLine: {'line': b'7: +     std: :string sdk_version_number_;\n'}
[7.428594] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:153:19]: Replace [_vers] with [\\n  ]\n'}
[7.428669] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string sdk_version_number_;\n'}
[7.428743] (ldlidar_component) StdoutLine: {'line': b'7: +     std::string sdk\n'}
[7.428816] (ldlidar_component) StdoutLine: {'line': b'7: +   ion_number_;\n'}
[7.428889] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:154:19]: Replace [ok_;\\n] with [\\n  ]\n'}
[7.428963] (ldlidar_component) StdoutLine: {'line': b'7: -     static bool is_ok_;\n'}
[7.429036] (ldlidar_component) StdoutLine: {'line': b'7: -     bool is_start_flag_;\n'}
[7.429109] (ldlidar_component) StdoutLine: {'line': b'7: +     static bool is_\n'}
[7.429182] (ldlidar_component) StdoutLine: {'line': b'7: +       bool is_start_flag_;\n'}
[7.429311] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:155:19]: Replace [lag_;] with [\\n  ]\n'}
[7.429392] (ldlidar_component) StdoutLine: {'line': b'7: -     bool is_start_flag_;\n'}
[7.429466] (ldlidar_component) StdoutLine: {'line': b'7: +     bool is_start_f\n'}
[7.429539] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.429613] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:156:19]: Replace [ uint] with [\\n  ]\n'}
[7.429687] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < uint64_t(void) > register_get_timestamp_handle_;\n'}
[7.429761] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function <\n'}
[7.429835] (ldlidar_component) StdoutLine: {'line': b'7: +   64_t(void) > register_get_timestamp_handle_;\n'}
[7.429907] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:156:37]: Replace [r] with []\n'}
[7.429980] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < uint64_t(void) > register_get_timestamp_handle_;\n'}
[7.430053] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < uint64_t(void) > egister_get_timestamp_handle_;\n'}
[7.430167] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:156:39]: Replace [g] with []\n'}
[7.430301] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < uint64_t(void) > register_get_timestamp_handle_;\n'}
[7.430383] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < uint64_t(void) > reister_get_timestamp_handle_;\n'}
[7.430458] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:156:54]: Replace [s] with []\n'}
[7.430532] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < uint64_t(void) > register_get_timestamp_handle_;\n'}
[7.430605] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < uint64_t(void) > register_get_timetamp_handle_;\n'}
[7.430677] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:157:19]: Replace [g_;\\n ] with [\\n  ]\n'}
[7.430750] (ldlidar_component) StdoutLine: {'line': b'7: -     LiPkg * comm_pkg_;\n'}
[7.430823] (ldlidar_component) StdoutLine: {'line': b'7: -     SerialInterfaceLinux * comm_serial_;\n'}
[7.430927] (ldlidar_component) StdoutLine: {'line': b'7: +     LiPkg * comm_pk\n'}
[7.431002] (ldlidar_component) StdoutLine: {'line': b'7: +      SerialInterfaceLinux * comm_serial_;\n'}
[7.431075] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:158:19]: Replace [Linux] with [\\n  ]\n'}
[7.431148] (ldlidar_component) StdoutLine: {'line': b'7: -     SerialInterfaceLinux * comm_serial_;\n'}
[7.431246] (ldlidar_component) StdoutLine: {'line': b'7: +     SerialInterface\n'}
[7.431353] (ldlidar_component) StdoutLine: {'line': b'7: +    * comm_serial_;\n'}
[7.431429] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:159:19]: Replace [aceLi] with [\\n  ]\n'}
[7.431503] (ldlidar_component) StdoutLine: {'line': b'7: -     TCPSocketInterfaceLinux * comm_tcp_network_;\n'}
[7.431577] (ldlidar_component) StdoutLine: {'line': b'7: +     TCPSocketInterf\n'}
[7.431650] (ldlidar_component) StdoutLine: {'line': b'7: +   nux * comm_tcp_network_;\n'}
[7.431723] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:160:19]: Replace [aceLi] with [\\n  ]\n'}
[7.431796] (ldlidar_component) StdoutLine: {'line': b'7: -     UDPSocketInterfaceLinux * comm_udp_network_;\n'}
[7.431868] (ldlidar_component) StdoutLine: {'line': b'7: +     UDPSocketInterf\n'}
[7.431940] (ldlidar_component) StdoutLine: {'line': b'7: +   nux * comm_udp_network_;\n'}
[7.432012] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:161:19]: Replace [2::st] with [\\n  ]\n'}
[7.432084] (ldlidar_component) StdoutLine: {'line': b'7: -     std::chrono::_V2::steady_clock::time_point last_pubdata_times_;\n'}
[7.432157] (ldlidar_component) StdoutLine: {'line': b'7: +     std::chrono::_V\n'}
[7.432278] (ldlidar_component) StdoutLine: {'line': b'7: +   eady_clock::time_point last_pubdata_times_;\n'}
[7.432360] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:164:13]: Replace [e l] with [\\n]\n'}
[7.432434] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.432505] (ldlidar_component) StdoutLine: {'line': b'7: + } // namespac\n'}
[7.432577] (ldlidar_component) StdoutLine: {'line': b'7: + dlidar\n'}
[7.432648] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:164:21]: Replace [r] with [  ]\n'}
[7.432721] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.432793] (ldlidar_component) StdoutLine: {'line': b'7: + } // namespace ldlida  \n'}
[7.432865] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/core/ldlidar_driver.h:166:26]: Replace [_] with [  ]\n'}
[7.432938] (ldlidar_component) StdoutLine: {'line': b'7: - #endif // __LDLIDAR_DRIVER_H__\n'}
[7.433011] (ldlidar_component) StdoutLine: {'line': b'7: + #endif // __LDLIDAR_DRIVER  H__\n'}
[7.433083] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.433156] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/include/dataprocess/lipkg.h':\n"}
[7.433270] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.433352] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:23:17]: Replace [\\n\\n\\n#include <chrono>\\n#include <functional>\\n#include <mutex>\\n\\n#include <string.h>\\n\\n#include "ldlidar_datatype.h"\\n#include "tofbf.h"] with [\\n\\n#include <string.h>\\n\\n#include <chrono>\\n#include <functional>\\n#include <mutex>\\n\\n#include "ldlidar_datatype.h"\\n#include "tofbf.h"]\n'}
[7.433476] (ldlidar_component) StdoutLine: {'line': b'7: - #define __LIPKG_H\n'}
[7.433557] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.433631] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.433706] (ldlidar_component) StdoutLine: {'line': b'7: - #include <chrono>\n'}
[7.433797] (ldlidar_component) StdoutLine: {'line': b'7: - #include <functional>\n'}
[7.433877] (ldlidar_component) StdoutLine: {'line': b'7: - #include <mutex>\n'}
[7.433951] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.434033] (ldlidar_component) StdoutLine: {'line': b'7: - #include <string.h>\n'}
[7.434106] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.434177] (ldlidar_component) StdoutLine: {'line': b'7: - #include "ldlidar_datatype.h"\n'}
[7.434308] (ldlidar_component) StdoutLine: {'line': b'7: - #include "tofbf.h"\n'}
[7.434387] (ldlidar_component) StdoutLine: {'line': b'7: + #define __LIPKG_H\n'}
[7.434461] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.434534] (ldlidar_component) StdoutLine: {'line': b'7: + #include <string.h>\n'}
[7.434606] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.434679] (ldlidar_component) StdoutLine: {'line': b'7: + #include <chrono>\n'}
[7.434751] (ldlidar_component) StdoutLine: {'line': b'7: + #include <functional>\n'}
[7.434824] (ldlidar_component) StdoutLine: {'line': b'7: + #include <mutex>\n'}
[7.434896] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.434968] (ldlidar_component) StdoutLine: {'line': b'7: + #include "ldlidar_datatype.h"\n'}
[7.435040] (ldlidar_component) StdoutLine: {'line': b'7: + #include "tofbf.h"\n'}
[7.435112] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:35:17]: Replace [ ] with [\\n]\n'}
[7.435193] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.435310] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar\n'}
[7.435387] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.435461] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:35:19]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.435536] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.435609] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.435681] (ldlidar_component) StdoutLine: {'line': b'7: -   enum\n'}
[7.435754] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar {\n'}
[7.435826] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.435897] (ldlidar_component) StdoutLine: {'line': b'7: + enum\n'}
[7.435970] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:37:6]: Replace [\\n  ] with [ ]\n'}
[7.436043] (ldlidar_component) StdoutLine: {'line': b'7: -   enum\n'}
[7.436115] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.436195] (ldlidar_component) StdoutLine: {'line': b'7: +   enum {\n'}
[7.436315] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:38:3]: Replace [\\n    ] with [\\n  ]\n'}
[7.436391] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.436464] (ldlidar_component) StdoutLine: {'line': b'7: -     PKG_HEADER = 0x54,\n'}
[7.436535] (ldlidar_component) StdoutLine: {'line': b'7: +   {\n'}
[7.436607] (ldlidar_component) StdoutLine: {'line': b'7: +   PKG_HEADER = 0x54,\n'}
[7.436678] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:39:22]: Replace [\\n    ] with [\\n  ]\n'}
[7.436750] (ldlidar_component) StdoutLine: {'line': b'7: -     PKG_HEADER = 0x54,\n'}
[7.436821] (ldlidar_component) StdoutLine: {'line': b'7: -     PKG_VER_LEN = 0x2C,\n'}
[7.436893] (ldlidar_component) StdoutLine: {'line': b'7: +     PKG_HEADER = 0x54,\n'}
[7.436964] (ldlidar_component) StdoutLine: {'line': b'7: +   PKG_VER_LEN = 0x2C,\n'}
[7.437035] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:40:23]: Replace [\\n    ] with [\\n  ]\n'}
[7.437107] (ldlidar_component) StdoutLine: {'line': b'7: -     PKG_VER_LEN = 0x2C,\n'}
[7.437178] (ldlidar_component) StdoutLine: {'line': b'7: -     POINT_PER_PACK = 12,\n'}
[7.437337] (ldlidar_component) StdoutLine: {'line': b'7: +     PKG_VER_LEN = 0x2C,\n'}
[7.437418] (ldlidar_component) StdoutLine: {'line': b'7: +   POINT_PER_PACK = 12,\n'}
[7.437493] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:41:24]: Replace [\\n  ] with [\\n]\n'}
[7.437567] (ldlidar_component) StdoutLine: {'line': b'7: -     POINT_PER_PACK = 12,\n'}
[7.437666] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.437740] (ldlidar_component) StdoutLine: {'line': b'7: +     POINT_PER_PACK = 12,\n'}
[7.437828] (ldlidar_component) StdoutLine: {'line': b'7: + };\n'}
[7.437903] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:42:4]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.437977] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.438049] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.438121] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef struct __attribute__((packed))\n'}
[7.438201] (ldlidar_component) StdoutLine: {'line': b'7: +   };\n'}
[7.438307] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.438384] (ldlidar_component) StdoutLine: {'line': b'7: + typedef struct __attribute__((packed))\n'}
[7.438456] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:44:40]: Replace [\\n  ] with [\\n]\n'}
[7.438529] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef struct __attribute__((packed))\n'}
[7.438602] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.438674] (ldlidar_component) StdoutLine: {'line': b'7: +   typedef struct __attribute__((packed))\n'}
[7.438745] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.438817] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:45:3]: Replace [\\n    ] with [\\n  ]\n'}
[7.438890] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.438961] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t distance;\n'}
[7.439033] (ldlidar_component) StdoutLine: {'line': b'7: +   {\n'}
[7.439105] (ldlidar_component) StdoutLine: {'line': b'7: +   uint16_t distance;\n'}
[7.439177] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:46:22]: Replace [\\n    ] with [\\n  ]\n'}
[7.439318] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t distance;\n'}
[7.439398] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t intensity;\n'}
[7.439472] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t distance;\n'}
[7.439545] (ldlidar_component) StdoutLine: {'line': b'7: +   uint8_t intensity;\n'}
[7.439618] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:47:22]: Replace [\\n  ] with [\\n]\n'}
[7.439692] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t intensity;\n'}
[7.439764] (ldlidar_component) StdoutLine: {'line': b'7: -   } LidarPointStructDef;\n'}
[7.439836] (ldlidar_component) StdoutLine: {'line': b'7: +     uint8_t intensity;\n'}
[7.439908] (ldlidar_component) StdoutLine: {'line': b'7: + } LidarPointStructDef;\n'}
[7.439980] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:48:24]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.440053] (ldlidar_component) StdoutLine: {'line': b'7: -   } LidarPointStructDef;\n'}
[7.440124] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.440203] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef struct __attribute__((packed))\n'}
[7.440322] (ldlidar_component) StdoutLine: {'line': b'7: +   } LidarPointStructDef;\n'}
[7.440397] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.440469] (ldlidar_component) StdoutLine: {'line': b'7: + typedef struct __attribute__((packed))\n'}
[7.440540] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:50:40]: Replace [\\n  ] with [\\n]\n'}
[7.440613] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef struct __attribute__((packed))\n'}
[7.440684] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.440756] (ldlidar_component) StdoutLine: {'line': b'7: +   typedef struct __attribute__((packed))\n'}
[7.440827] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.440899] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:51:3]: Replace [\\n    ] with [\\n  ]\n'}
[7.440971] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.441042] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t header;\n'}
[7.441145] (ldlidar_component) StdoutLine: {'line': b'7: +   {\n'}
[7.441246] (ldlidar_component) StdoutLine: {'line': b'7: +   uint8_t header;\n'}
[7.441351] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:52:19]: Replace [\\n    ] with [\\n  ]\n'}
[7.441428] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t header;\n'}
[7.441502] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t ver_len;\n'}
[7.441575] (ldlidar_component) StdoutLine: {'line': b'7: +     uint8_t header;\n'}
[7.441647] (ldlidar_component) StdoutLine: {'line': b'7: +   uint8_t ver_len;\n'}
[7.441720] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:53:20]: Replace [\\n    ] with [\\n  ]\n'}
[7.441815] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t ver_len;\n'}
[7.441895] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t speed;\n'}
[7.441969] (ldlidar_component) StdoutLine: {'line': b'7: +     uint8_t ver_len;\n'}
[7.442042] (ldlidar_component) StdoutLine: {'line': b'7: +   uint16_t speed;\n'}
[7.442114] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:54:19]: Replace [\\n    ] with [\\n  ]\n'}
[7.442192] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t speed;\n'}
[7.442299] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t start_angle;\n'}
[7.442375] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t speed;\n'}
[7.442448] (ldlidar_component) StdoutLine: {'line': b'7: +   uint16_t start_angle;\n'}
[7.442520] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:55:25]: Replace [\\n    ] with [\\n  ]\n'}
[7.442592] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t start_angle;\n'}
[7.442664] (ldlidar_component) StdoutLine: {'line': b'7: -     LidarPointStructDef point[POINT_PER_PACK];\n'}
[7.442736] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t start_angle;\n'}
[7.442858] (ldlidar_component) StdoutLine: {'line': b'7: +   LidarPointStructDef point[POINT_PER_PACK];\n'}
[7.442935] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:56:46]: Replace [\\n    ] with [\\n  ]\n'}
[7.443009] (ldlidar_component) StdoutLine: {'line': b'7: -     LidarPointStructDef point[POINT_PER_PACK];\n'}
[7.443082] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t end_angle;\n'}
[7.443154] (ldlidar_component) StdoutLine: {'line': b'7: +     LidarPointStructDef point[POINT_PER_PACK];\n'}
[7.443276] (ldlidar_component) StdoutLine: {'line': b'7: +   uint16_t end_angle;\n'}
[7.443367] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:57:23]: Replace [\\n    ] with [\\n  ]\n'}
[7.443443] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t end_angle;\n'}
[7.443517] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t timestamp;\n'}
[7.443589] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t end_angle;\n'}
[7.443661] (ldlidar_component) StdoutLine: {'line': b'7: +   uint16_t timestamp;\n'}
[7.443732] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:58:23]: Replace [\\n    ] with [\\n  ]\n'}
[7.443805] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t timestamp;\n'}
[7.443878] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t crc8;\n'}
[7.443949] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t timestamp;\n'}
[7.444021] (ldlidar_component) StdoutLine: {'line': b'7: +   uint8_t crc8;\n'}
[7.444093] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:59:17]: Replace [\\n  ] with [\\n]\n'}
[7.444165] (ldlidar_component) StdoutLine: {'line': b'7: -     uint8_t crc8;\n'}
[7.444262] (ldlidar_component) StdoutLine: {'line': b'7: -   } LiDARFrameTypeDef;\n'}
[7.444340] (ldlidar_component) StdoutLine: {'line': b'7: +     uint8_t crc8;\n'}
[7.444413] (ldlidar_component) StdoutLine: {'line': b'7: + } LiDARFrameTypeDef;\n'}
[7.444514] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:60:22]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.444590] (ldlidar_component) StdoutLine: {'line': b'7: -   } LiDARFrameTypeDef;\n'}
[7.444663] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.444735] (ldlidar_component) StdoutLine: {'line': b'7: -   class LiPkg {\n'}
[7.444807] (ldlidar_component) StdoutLine: {'line': b'7: +   } LiDARFrameTypeDef;\n'}
[7.444880] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.444952] (ldlidar_component) StdoutLine: {'line': b'7: + class LiPkg {\n'}
[7.445024] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:62:13]: Replace [ ] with [\\n]\n'}
[7.445098] (ldlidar_component) StdoutLine: {'line': b'7: -   class LiPkg {\n'}
[7.445171] (ldlidar_component) StdoutLine: {'line': b'7: +   class LiPkg\n'}
[7.445291] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.445391] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:63:7]: Replace [\\n    ] with [\\n  ]\n'}
[7.445468] (ldlidar_component) StdoutLine: {'line': b'7: - public:\n'}
[7.445543] (ldlidar_component) StdoutLine: {'line': b'7: -     LiPkg();\n'}
[7.445617] (ldlidar_component) StdoutLine: {'line': b'7: + public:\n'}
[7.445690] (ldlidar_component) StdoutLine: {'line': b'7: +   LiPkg();\n'}
[7.445763] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:64:12]: Replace [\\n    ] with [\\n  ]\n'}
[7.445837] (ldlidar_component) StdoutLine: {'line': b'7: -     LiPkg();\n'}
[7.445910] (ldlidar_component) StdoutLine: {'line': b'7: -     ~LiPkg();\n'}
[7.445983] (ldlidar_component) StdoutLine: {'line': b'7: +     LiPkg();\n'}
[7.446055] (ldlidar_component) StdoutLine: {'line': b'7: +   ~LiPkg();\n'}
[7.446127] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:65:13]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.446206] (ldlidar_component) StdoutLine: {'line': b'7: -     ~LiPkg();\n'}
[7.446336] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.446414] (ldlidar_component) StdoutLine: {'line': b'7: -     // set product type (belong to enum class LDType)\n'}
[7.446487] (ldlidar_component) StdoutLine: {'line': b'7: +     ~LiPkg();\n'}
[7.446560] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.446632] (ldlidar_component) StdoutLine: {'line': b'7: +   // set product type (belong to enum class LDType)\n'}
[7.446704] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:67:53]: Replace [\\n    ] with [\\n  ]\n'}
[7.446777] (ldlidar_component) StdoutLine: {'line': b'7: -     // set product type (belong to enum class LDType)\n'}
[7.446849] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetProductType(LDType type_number);\n'}
[7.446921] (ldlidar_component) StdoutLine: {'line': b'7: +     // set product type (belong to enum class LDType)\n'}
[7.446993] (ldlidar_component) StdoutLine: {'line': b'7: +   void SetProductType(LDType type_number);\n'}
[7.447065] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:68:44]: Replace [\\n    ] with [\\n  ]\n'}
[7.447138] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetProductType(LDType type_number);\n'}
[7.447223] (ldlidar_component) StdoutLine: {'line': b'7: -     // get Lidar spin speed (Hz)\n'}
[7.447335] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetProductType(LDType type_number);\n'}
[7.447412] (ldlidar_component) StdoutLine: {'line': b'7: +   // get Lidar spin speed (Hz)\n'}
[7.447485] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:69:32]: Replace [\\n    ] with [\\n  ]\n'}
[7.447559] (ldlidar_component) StdoutLine: {'line': b'7: -     // get Lidar spin speed (Hz)\n'}
[7.447632] (ldlidar_component) StdoutLine: {'line': b'7: -     double GetSpeed(void);\n'}
[7.447704] (ldlidar_component) StdoutLine: {'line': b'7: +     // get Lidar spin speed (Hz)\n'}
[7.447791] (ldlidar_component) StdoutLine: {'line': b'7: +   double GetSpeed(void);\n'}
[7.447865] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:70:26]: Replace [\\n    ] with [\\n  ]\n'}
[7.447939] (ldlidar_component) StdoutLine: {'line': b'7: -     double GetSpeed(void);\n'}
[7.448011] (ldlidar_component) StdoutLine: {'line': b'7: -     // get lidar spind speed (degree per second) origin\n'}
[7.448085] (ldlidar_component) StdoutLine: {'line': b'7: +     double GetSpeed(void);\n'}
[7.448157] (ldlidar_component) StdoutLine: {'line': b'7: +   // get lidar spind speed (degree per second) origin\n'}
[7.448268] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:71:55]: Replace [\\n    ] with [\\n  ]\n'}
[7.448373] (ldlidar_component) StdoutLine: {'line': b'7: -     // get lidar spind speed (degree per second) origin\n'}
[7.448451] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t GetSpeedOrigin(void);\n'}
[7.448525] (ldlidar_component) StdoutLine: {'line': b'7: +     // get lidar spind speed (degree per second) origin\n'}
[7.448598] (ldlidar_component) StdoutLine: {'line': b'7: +   uint16_t GetSpeedOrigin(void);\n'}
[7.448671] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:72:34]: Replace [\\n    ] with [\\n  ]\n'}
[7.448744] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t GetSpeedOrigin(void);\n'}
[7.448816] (ldlidar_component) StdoutLine: {'line': b'7: -     // get time stamp of the packet\n'}
[7.448889] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t GetSpeedOrigin(void);\n'}
[7.448962] (ldlidar_component) StdoutLine: {'line': b'7: +   // get time stamp of the packet\n'}
[7.449034] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:73:35]: Replace [\\n    ] with [\\n  ]\n'}
[7.449107] (ldlidar_component) StdoutLine: {'line': b'7: -     // get time stamp of the packet\n'}
[7.449179] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t GetTimestamp(void);\n'}
[7.449324] (ldlidar_component) StdoutLine: {'line': b'7: +     // get time stamp of the packet\n'}
[7.449405] (ldlidar_component) StdoutLine: {'line': b'7: +   uint16_t GetTimestamp(void);\n'}
[7.449480] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:74:32]: Replace [\\n    ] with [\\n  ]\n'}
[7.449555] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t GetTimestamp(void);\n'}
[7.449629] (ldlidar_component) StdoutLine: {'line': b'7: -     // get lidar measure frequence(Hz)\n'}
[7.449707] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t GetTimestamp(void);\n'}
[7.449779] (ldlidar_component) StdoutLine: {'line': b'7: +   // get lidar measure frequence(Hz)\n'}
[7.449852] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:75:38]: Replace [\\n    ] with [\\n  ]\n'}
[7.449926] (ldlidar_component) StdoutLine: {'line': b'7: -     // get lidar measure frequence(Hz)\n'}
[7.449999] (ldlidar_component) StdoutLine: {'line': b'7: -     int GetLidarMeasurePointFrequence(void);\n'}
[7.450073] (ldlidar_component) StdoutLine: {'line': b'7: +     // get lidar measure frequence(Hz)\n'}
[7.450145] (ldlidar_component) StdoutLine: {'line': b'7: +   int GetLidarMeasurePointFrequence(void);\n'}
[7.450238] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:76:44]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.450361] (ldlidar_component) StdoutLine: {'line': b'7: -     int GetLidarMeasurePointFrequence(void);\n'}
[7.450438] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.450512] (ldlidar_component) StdoutLine: {'line': b'7: -     void CommReadCallback(const char * byte, size_t len);\n'}
[7.450586] (ldlidar_component) StdoutLine: {'line': b'7: +     int GetLidarMeasurePointFrequence(void);\n'}
[7.450659] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.450732] (ldlidar_component) StdoutLine: {'line': b'7: +   void CommReadCallback(const char * byte, size_t len);\n'}
[7.450841] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:78:57]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.450916] (ldlidar_component) StdoutLine: {'line': b'7: -     void CommReadCallback(const char * byte, size_t len);\n'}
[7.450989] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.451061] (ldlidar_component) StdoutLine: {'line': b'7: -     bool GetLaserScanData(Points2D & out);\n'}
[7.451133] (ldlidar_component) StdoutLine: {'line': b'7: +     void CommReadCallback(const char * byte, size_t len);\n'}
[7.451234] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.451331] (ldlidar_component) StdoutLine: {'line': b'7: +   bool GetLaserScanData(Points2D & out);\n'}
[7.451407] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:80:42]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.451481] (ldlidar_component) StdoutLine: {'line': b'7: -     bool GetLaserScanData(Points2D & out);\n'}
[7.451555] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.451627] (ldlidar_component) StdoutLine: {'line': b'7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);\n'}
[7.451701] (ldlidar_component) StdoutLine: {'line': b'7: +     bool GetLaserScanData(Points2D & out);\n'}
[7.451773] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.451844] (ldlidar_component) StdoutLine: {'line': b'7: +   void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);\n'}
[7.451917] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:82:53]: Replace [ ] with []\n'}
[7.451989] (ldlidar_component) StdoutLine: {'line': b'7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);\n'}
[7.452062] (ldlidar_component) StdoutLine: {'line': b'7: +     void RegisterTimestampGetFunctional(std::function< uint64_t(void) > timestamp_handle);\n'}
[7.452135] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:82:55]: Replace [ ] with []\n'}
[7.452220] (ldlidar_component) StdoutLine: {'line': b'7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);\n'}
[7.452334] (ldlidar_component) StdoutLine: {'line': b'7: +     void RegisterTimestampGetFunctional(std::function <uint64_t(void) > timestamp_handle);\n'}
[7.452410] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:82:70]: Replace [ ] with []\n'}
[7.452483] (ldlidar_component) StdoutLine: {'line': b'7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);\n'}
[7.452556] (ldlidar_component) StdoutLine: {'line': b'7: +     void RegisterTimestampGetFunctional(std::function < uint64_t(void)> timestamp_handle);\n'}
[7.452628] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:82:91]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.452701] (ldlidar_component) StdoutLine: {'line': b'7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);\n'}
[7.452772] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.452843] (ldlidar_component) StdoutLine: {'line': b'7: -     bool GetLidarPowerOnCommStatus(void);\n'}
[7.452915] (ldlidar_component) StdoutLine: {'line': b'7: +     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);\n'}
[7.452987] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.453059] (ldlidar_component) StdoutLine: {'line': b'7: +   bool GetLidarPowerOnCommStatus(void);\n'}
[7.453130] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:84:41]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.453219] (ldlidar_component) StdoutLine: {'line': b'7: -     bool GetLidarPowerOnCommStatus(void);\n'}
[7.453363] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.453441] (ldlidar_component) StdoutLine: {'line': b'7: -     void EnableFilter(bool is_enable);\n'}
[7.453524] (ldlidar_component) StdoutLine: {'line': b'7: +     bool GetLidarPowerOnCommStatus(void);\n'}
[7.453599] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.453672] (ldlidar_component) StdoutLine: {'line': b'7: +   void EnableFilter(bool is_enable);\n'}
[7.453746] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:86:38]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.453820] (ldlidar_component) StdoutLine: {'line': b'7: -     void EnableFilter(bool is_enable);\n'}
[7.453893] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.453965] (ldlidar_component) StdoutLine: {'line': b'7: -     LidarStatus GetLidarStatus(void);\n'}
[7.454038] (ldlidar_component) StdoutLine: {'line': b'7: +     void EnableFilter(bool is_enable);\n'}
[7.454111] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.454189] (ldlidar_component) StdoutLine: {'line': b'7: +   LidarStatus GetLidarStatus(void);\n'}
[7.454313] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:88:37]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.454392] (ldlidar_component) StdoutLine: {'line': b'7: -     LidarStatus GetLidarStatus(void);\n'}
[7.454465] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.454537] (ldlidar_component) StdoutLine: {'line': b'7: -     void ClearDataProcessStatus(void)\n'}
[7.454610] (ldlidar_component) StdoutLine: {'line': b'7: +     LidarStatus GetLidarStatus(void);\n'}
[7.454682] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.454754] (ldlidar_component) StdoutLine: {'line': b'7: +   void ClearDataProcessStatus(void)\n'}
[7.454826] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:90:37]: Replace [\\n    ] with [\\n  ]\n'}
[7.454899] (ldlidar_component) StdoutLine: {'line': b'7: -     void ClearDataProcessStatus(void)\n'}
[7.454971] (ldlidar_component) StdoutLine: {'line': b'7: -     {\n'}
[7.455043] (ldlidar_component) StdoutLine: {'line': b'7: +     void ClearDataProcessStatus(void)\n'}
[7.455115] (ldlidar_component) StdoutLine: {'line': b'7: +   {\n'}
[7.455194] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:91:5]: Replace [\\n      ] with [\\n    ]\n'}
[7.455323] (ldlidar_component) StdoutLine: {'line': b'7: -     {\n'}
[7.455402] (ldlidar_component) StdoutLine: {'line': b'7: -       is_frame_ready_ = false;\n'}
[7.455475] (ldlidar_component) StdoutLine: {'line': b'7: +     {\n'}
[7.455548] (ldlidar_component) StdoutLine: {'line': b'7: +     is_frame_ready_ = false;\n'}
[7.455621] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:92:30]: Replace [\\n      ] with [\\n    ]\n'}
[7.455695] (ldlidar_component) StdoutLine: {'line': b'7: -       is_frame_ready_ = false;\n'}
[7.455767] (ldlidar_component) StdoutLine: {'line': b'7: -       is_poweron_comm_normal_ = false;\n'}
[7.455840] (ldlidar_component) StdoutLine: {'line': b'7: +       is_frame_ready_ = false;\n'}
[7.455913] (ldlidar_component) StdoutLine: {'line': b'7: +     is_poweron_comm_normal_ = false;\n'}
[7.455986] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:93:38]: Replace [\\n      ] with [\\n    ]\n'}
[7.456060] (ldlidar_component) StdoutLine: {'line': b'7: -       is_poweron_comm_normal_ = false;\n'}
[7.456133] (ldlidar_component) StdoutLine: {'line': b'7: -       lidarstatus_ = LidarStatus::NORMAL;\n'}
[7.456227] (ldlidar_component) StdoutLine: {'line': b'7: +       is_poweron_comm_normal_ = false;\n'}
[7.456340] (ldlidar_component) StdoutLine: {'line': b'7: +     lidarstatus_ = LidarStatus::NORMAL;\n'}
[7.456415] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:94:41]: Replace [\\n      ] with [\\n    ]\n'}
[7.456488] (ldlidar_component) StdoutLine: {'line': b'7: -       lidarstatus_ = LidarStatus::NORMAL;\n'}
[7.456559] (ldlidar_component) StdoutLine: {'line': b'7: -       last_pkg_timestamp_ = 0;\n'}
[7.456631] (ldlidar_component) StdoutLine: {'line': b'7: +       lidarstatus_ = LidarStatus::NORMAL;\n'}
[7.456738] (ldlidar_component) StdoutLine: {'line': b'7: +     last_pkg_timestamp_ = 0;\n'}
[7.456814] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:95:30]: Replace [\\n      ] with [\\n    ]\n'}
[7.456887] (ldlidar_component) StdoutLine: {'line': b'7: -       last_pkg_timestamp_ = 0;\n'}
[7.456959] (ldlidar_component) StdoutLine: {'line': b'7: -       first_frame_ = true;\n'}
[7.457031] (ldlidar_component) StdoutLine: {'line': b'7: +       last_pkg_timestamp_ = 0;\n'}
[7.457103] (ldlidar_component) StdoutLine: {'line': b'7: +     first_frame_ = true;\n'}
[7.457175] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:96:26]: Replace [\\n    ] with [\\n  ]\n'}
[7.457300] (ldlidar_component) StdoutLine: {'line': b'7: -       first_frame_ = true;\n'}
[7.457394] (ldlidar_component) StdoutLine: {'line': b'7: -     }\n'}
[7.457468] (ldlidar_component) StdoutLine: {'line': b'7: +       first_frame_ = true;\n'}
[7.457542] (ldlidar_component) StdoutLine: {'line': b'7: +   }\n'}
[7.457615] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:99:8]: Replace [\\n    ] with [\\n  ]\n'}
[7.457690] (ldlidar_component) StdoutLine: {'line': b'7: - private:\n'}
[7.457762] (ldlidar_component) StdoutLine: {'line': b'7: -     LDType product_type_;\n'}
[7.457835] (ldlidar_component) StdoutLine: {'line': b'7: + private:\n'}
[7.457908] (ldlidar_component) StdoutLine: {'line': b'7: +   LDType product_type_;\n'}
[7.457981] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:100:25]: Replace [\\n    ] with [\\n  ]\n'}
[7.458054] (ldlidar_component) StdoutLine: {'line': b'7: -     LDType product_type_;\n'}
[7.458127] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t timestamp_;\n'}
[7.458208] (ldlidar_component) StdoutLine: {'line': b'7: +     LDType product_type_;\n'}
[7.458338] (ldlidar_component) StdoutLine: {'line': b'7: +   uint16_t timestamp_;\n'}
[7.458417] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:101:24]: Replace [\\n    ] with [\\n  ]\n'}
[7.458493] (ldlidar_component) StdoutLine: {'line': b'7: -     uint16_t timestamp_;\n'}
[7.458566] (ldlidar_component) StdoutLine: {'line': b'7: -     double speed_;\n'}
[7.458638] (ldlidar_component) StdoutLine: {'line': b'7: +     uint16_t timestamp_;\n'}
[7.458710] (ldlidar_component) StdoutLine: {'line': b'7: +   double speed_;\n'}
[7.458782] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:102:18]: Replace [\\n    ] with [\\n  ]\n'}
[7.458855] (ldlidar_component) StdoutLine: {'line': b'7: -     double speed_;\n'}
[7.458926] (ldlidar_component) StdoutLine: {'line': b'7: -     bool is_frame_ready_;\n'}
[7.458998] (ldlidar_component) StdoutLine: {'line': b'7: +     double speed_;\n'}
[7.459070] (ldlidar_component) StdoutLine: {'line': b'7: +   bool is_frame_ready_;\n'}
[7.459142] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:103:25]: Replace [\\n    ] with [\\n  ]\n'}
[7.459248] (ldlidar_component) StdoutLine: {'line': b'7: -     bool is_frame_ready_;\n'}
[7.459362] (ldlidar_component) StdoutLine: {'line': b'7: -     bool is_poweron_comm_normal_;\n'}
[7.459437] (ldlidar_component) StdoutLine: {'line': b'7: +     bool is_frame_ready_;\n'}
[7.459509] (ldlidar_component) StdoutLine: {'line': b'7: +   bool is_poweron_comm_normal_;\n'}
[7.459582] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:104:33]: Replace [\\n    ] with [\\n  ]\n'}
[7.459662] (ldlidar_component) StdoutLine: {'line': b'7: -     bool is_poweron_comm_normal_;\n'}
[7.459738] (ldlidar_component) StdoutLine: {'line': b'7: -     bool is_filter_;\n'}
[7.459810] (ldlidar_component) StdoutLine: {'line': b'7: +     bool is_poweron_comm_normal_;\n'}
[7.459883] (ldlidar_component) StdoutLine: {'line': b'7: +   bool is_filter_;\n'}
[7.459962] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:105:20]: Replace [\\n    ] with [\\n  ]\n'}
[7.460037] (ldlidar_component) StdoutLine: {'line': b'7: -     bool is_filter_;\n'}
[7.460108] (ldlidar_component) StdoutLine: {'line': b'7: -     LidarStatus lidarstatus_;\n'}
[7.460181] (ldlidar_component) StdoutLine: {'line': b'7: +     bool is_filter_;\n'}
[7.460326] (ldlidar_component) StdoutLine: {'line': b'7: +   LidarStatus lidarstatus_;\n'}
[7.460407] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:106:29]: Replace [\\n    ] with [\\n  ]\n'}
[7.460483] (ldlidar_component) StdoutLine: {'line': b'7: -     LidarStatus lidarstatus_;\n'}
[7.460557] (ldlidar_component) StdoutLine: {'line': b'7: -     int measure_point_frequence_;\n'}
[7.460630] (ldlidar_component) StdoutLine: {'line': b'7: +     LidarStatus lidarstatus_;\n'}
[7.460702] (ldlidar_component) StdoutLine: {'line': b'7: +   int measure_point_frequence_;\n'}
[7.460774] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:107:33]: Replace [\\n    ] with [\\n  ]\n'}
[7.460847] (ldlidar_component) StdoutLine: {'line': b'7: -     int measure_point_frequence_;\n'}
[7.460919] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < uint64_t(void) > get_timestamp_;\n'}
[7.460992] (ldlidar_component) StdoutLine: {'line': b'7: +     int measure_point_frequence_;\n'}
[7.461063] (ldlidar_component) StdoutLine: {'line': b'7: +   std::function < uint64_t(void) > get_timestamp_;\n'}
[7.461136] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:108:17]: Replace [ ] with []\n'}
[7.461221] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < uint64_t(void) > get_timestamp_;\n'}
[7.461337] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function< uint64_t(void) > get_timestamp_;\n'}
[7.461412] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:108:19]: Replace [ ] with []\n'}
[7.461485] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < uint64_t(void) > get_timestamp_;\n'}
[7.461557] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function <uint64_t(void) > get_timestamp_;\n'}
[7.461629] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:108:34]: Replace [ ] with []\n'}
[7.461702] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < uint64_t(void) > get_timestamp_;\n'}
[7.461774] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < uint64_t(void)> get_timestamp_;\n'}
[7.461846] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:108:52]: Replace [\\n    ] with [\\n  ]\n'}
[7.461918] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < uint64_t(void) > get_timestamp_;\n'}
[7.461990] (ldlidar_component) StdoutLine: {'line': b'7: -     uint64_t last_pkg_timestamp_;\n'}
[7.462062] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < uint64_t(void) > get_timestamp_;\n'}
[7.462134] (ldlidar_component) StdoutLine: {'line': b'7: +   uint64_t last_pkg_timestamp_;\n'}
[7.462238] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:109:33]: Replace [\\n    ] with [\\n  ]\n'}
[7.462348] (ldlidar_component) StdoutLine: {'line': b'7: -     uint64_t last_pkg_timestamp_;\n'}
[7.462424] (ldlidar_component) StdoutLine: {'line': b'7: -     bool first_frame_;\n'}
[7.462496] (ldlidar_component) StdoutLine: {'line': b'7: +     uint64_t last_pkg_timestamp_;\n'}
[7.462568] (ldlidar_component) StdoutLine: {'line': b'7: +   bool first_frame_;\n'}
[7.462640] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:110:22]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.462712] (ldlidar_component) StdoutLine: {'line': b'7: -     bool first_frame_;\n'}
[7.462784] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.462856] (ldlidar_component) StdoutLine: {'line': b'7: -     LiDARFrameTypeDef pkg_;\n'}
[7.462954] (ldlidar_component) StdoutLine: {'line': b'7: +     bool first_frame_;\n'}
[7.463027] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.463100] (ldlidar_component) StdoutLine: {'line': b'7: +   LiDARFrameTypeDef pkg_;\n'}
[7.463172] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:112:27]: Replace [\\n    ] with [\\n  ]\n'}
[7.463291] (ldlidar_component) StdoutLine: {'line': b'7: -     LiDARFrameTypeDef pkg_;\n'}
[7.463394] (ldlidar_component) StdoutLine: {'line': b'7: -     Points2D frame_tmp_;\n'}
[7.463469] (ldlidar_component) StdoutLine: {'line': b'7: +     LiDARFrameTypeDef pkg_;\n'}
[7.463541] (ldlidar_component) StdoutLine: {'line': b'7: +   Points2D frame_tmp_;\n'}
[7.463614] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:113:24]: Replace [\\n    ] with [\\n  ]\n'}
[7.463687] (ldlidar_component) StdoutLine: {'line': b'7: -     Points2D frame_tmp_;\n'}
[7.463759] (ldlidar_component) StdoutLine: {'line': b'7: -     Points2D laser_scan_data_;\n'}
[7.463831] (ldlidar_component) StdoutLine: {'line': b'7: +     Points2D frame_tmp_;\n'}
[7.463904] (ldlidar_component) StdoutLine: {'line': b'7: +   Points2D laser_scan_data_;\n'}
[7.463976] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:114:30]: Replace [\\n    ] with [\\n  ]\n'}
[7.464066] (ldlidar_component) StdoutLine: {'line': b'7: -     Points2D laser_scan_data_;\n'}
[7.464140] (ldlidar_component) StdoutLine: {'line': b'7: -     std::mutex mutex_lock1_;\n'}
[7.464229] (ldlidar_component) StdoutLine: {'line': b'7: +     Points2D laser_scan_data_;\n'}
[7.464354] (ldlidar_component) StdoutLine: {'line': b'7: +   std::mutex mutex_lock1_;\n'}
[7.464431] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:115:28]: Replace [\\n    ] with [\\n  ]\n'}
[7.464506] (ldlidar_component) StdoutLine: {'line': b'7: -     std::mutex mutex_lock1_;\n'}
[7.464578] (ldlidar_component) StdoutLine: {'line': b'7: -     std::mutex mutex_lock2_;\n'}
[7.464650] (ldlidar_component) StdoutLine: {'line': b'7: +     std::mutex mutex_lock1_;\n'}
[7.464722] (ldlidar_component) StdoutLine: {'line': b'7: +   std::mutex mutex_lock2_;\n'}
[7.464793] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:116:28]: Replace [\\n\\n\\n    ] with [\\n\\n  ]\n'}
[7.464866] (ldlidar_component) StdoutLine: {'line': b'7: -     std::mutex mutex_lock2_;\n'}
[7.464937] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.465009] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.465080] (ldlidar_component) StdoutLine: {'line': b'7: -     // parse single packet\n'}
[7.465153] (ldlidar_component) StdoutLine: {'line': b'7: +     std::mutex mutex_lock2_;\n'}
[7.465260] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.465342] (ldlidar_component) StdoutLine: {'line': b'7: +   // parse single packet\n'}
[7.465416] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:119:26]: Replace [\\n    ] with [\\n  ]\n'}
[7.465489] (ldlidar_component) StdoutLine: {'line': b'7: -     // parse single packet\n'}
[7.465562] (ldlidar_component) StdoutLine: {'line': b'7: -     bool AnalysisOne(uint8_t byte);\n'}
[7.465663] (ldlidar_component) StdoutLine: {'line': b'7: +     // parse single packet\n'}
[7.465743] (ldlidar_component) StdoutLine: {'line': b'7: +   bool AnalysisOne(uint8_t byte);\n'}
[7.465816] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:120:35]: Replace [\\n    ] with [\\n  ]\n'}
[7.465890] (ldlidar_component) StdoutLine: {'line': b'7: -     bool AnalysisOne(uint8_t byte);\n'}
[7.465962] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Parse(const uint8_t * data, long len);\n'}
[7.466035] (ldlidar_component) StdoutLine: {'line': b'7: +     bool AnalysisOne(uint8_t byte);\n'}
[7.466108] (ldlidar_component) StdoutLine: {'line': b'7: +   bool Parse(const uint8_t * data, long len);\n'}
[7.466201] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:121:47]: Replace [\\n    ] with [\\n  ]\n'}
[7.466337] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Parse(const uint8_t * data, long len);\n'}
[7.466415] (ldlidar_component) StdoutLine: {'line': b'7: -     // combine stantard data into data frames and calibrate\n'}
[7.466489] (ldlidar_component) StdoutLine: {'line': b'7: +     bool Parse(const uint8_t * data, long len);\n'}
[7.466562] (ldlidar_component) StdoutLine: {'line': b'7: +   // combine stantard data into data frames and calibrate\n'}
[7.466635] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:122:59]: Replace [\\n    ] with [\\n  ]\n'}
[7.466708] (ldlidar_component) StdoutLine: {'line': b'7: -     // combine stantard data into data frames and calibrate\n'}
[7.466781] (ldlidar_component) StdoutLine: {'line': b'7: -     bool AssemblePacket();\n'}
[7.466853] (ldlidar_component) StdoutLine: {'line': b'7: +     // combine stantard data into data frames and calibrate\n'}
[7.466925] (ldlidar_component) StdoutLine: {'line': b'7: +   bool AssemblePacket();\n'}
[7.466996] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:123:26]: Replace [\\n    ] with [\\n  ]\n'}
[7.467069] (ldlidar_component) StdoutLine: {'line': b'7: -     bool AssemblePacket();\n'}
[7.467142] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetFrameReady(void);\n'}
[7.467250] (ldlidar_component) StdoutLine: {'line': b'7: +     bool AssemblePacket();\n'}
[7.467336] (ldlidar_component) StdoutLine: {'line': b'7: +   void SetFrameReady(void);\n'}
[7.467410] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:124:29]: Replace [\\n    ] with [\\n  ]\n'}
[7.467483] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetFrameReady(void);\n'}
[7.467556] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetLaserScanData(Points2D & src);\n'}
[7.467628] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetFrameReady(void);\n'}
[7.467700] (ldlidar_component) StdoutLine: {'line': b'7: +   void SetLaserScanData(Points2D & src);\n'}
[7.467774] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:125:42]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.467847] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetLaserScanData(Points2D & src);\n'}
[7.467920] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.467992] (ldlidar_component) StdoutLine: {'line': b'7: -     // Get lidar data frame ready flag\n'}
[7.468064] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetLaserScanData(Points2D & src);\n'}
[7.468136] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.468242] (ldlidar_component) StdoutLine: {'line': b'7: +   // Get lidar data frame ready flag\n'}
[7.468357] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:127:38]: Replace [\\n    ] with [\\n  ]\n'}
[7.468434] (ldlidar_component) StdoutLine: {'line': b'7: -     // Get lidar data frame ready flag\n'}
[7.468508] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsFrameReady(void);\n'}
[7.468580] (ldlidar_component) StdoutLine: {'line': b'7: +     // Get lidar data frame ready flag\n'}
[7.468653] (ldlidar_component) StdoutLine: {'line': b'7: +   bool IsFrameReady(void);\n'}
[7.468725] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:128:28]: Replace [\\n    ] with [\\n  ]\n'}
[7.468798] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsFrameReady(void);\n'}
[7.468870] (ldlidar_component) StdoutLine: {'line': b'7: -     // Lidar data frame readiness flag reset\n'}
[7.468942] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsFrameReady(void);\n'}
[7.469013] (ldlidar_component) StdoutLine: {'line': b'7: +   // Lidar data frame readiness flag reset\n'}
[7.469086] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:129:44]: Replace [\\n    ] with [\\n  ]\n'}
[7.469168] (ldlidar_component) StdoutLine: {'line': b'7: -     // Lidar data frame readiness flag reset\n'}
[7.469285] (ldlidar_component) StdoutLine: {'line': b'7: -     void ResetFrameReady(void);\n'}
[7.469368] (ldlidar_component) StdoutLine: {'line': b'7: +     // Lidar data frame readiness flag reset\n'}
[7.469442] (ldlidar_component) StdoutLine: {'line': b'7: +   void ResetFrameReady(void);\n'}
[7.469515] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:130:31]: Replace [\\n  ] with [\\n]\n'}
[7.469590] (ldlidar_component) StdoutLine: {'line': b'7: -     void ResetFrameReady(void);\n'}
[7.469663] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.469736] (ldlidar_component) StdoutLine: {'line': b'7: +     void ResetFrameReady(void);\n'}
[7.469808] (ldlidar_component) StdoutLine: {'line': b'7: + };\n'}
[7.469881] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/dataprocess/lipkg.h:133:1]: Replace [ ] with [  ]\n'}
[7.469954] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.470026] (ldlidar_component) StdoutLine: {'line': b'7: + }  // namespace ldlidar\n'}
[7.470098] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.470172] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/include/filter/tofbf.h':\n"}
[7.470301] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.470403] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:25:0]: Replace [#include <stdint.h>\\n\\n#include <vector>\\n#include <math.h>\\n\\n#include <algorithm>\\n#include <iostream>\\n\\n#include "ldlidar_datatype.h"] with [#include <math.h>\\n#include <stdint.h>\\n\\n#include <algorithm>\\n#include <iostream>\\n#include <vector>\\n\\n#include "ldlidar_datatype.h"]\n'}
[7.470484] (ldlidar_component) StdoutLine: {'line': b'7: - #include <stdint.h>\n'}
[7.470557] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.470630] (ldlidar_component) StdoutLine: {'line': b'7: - #include <vector>\n'}
[7.470702] (ldlidar_component) StdoutLine: {'line': b'7: - #include <math.h>\n'}
[7.470774] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.470846] (ldlidar_component) StdoutLine: {'line': b'7: - #include <algorithm>\n'}
[7.470918] (ldlidar_component) StdoutLine: {'line': b'7: - #include <iostream>\n'}
[7.471004] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.471076] (ldlidar_component) StdoutLine: {'line': b'7: - #include "ldlidar_datatype.h"\n'}
[7.471148] (ldlidar_component) StdoutLine: {'line': b'7: + #include <math.h>\n'}
[7.471237] (ldlidar_component) StdoutLine: {'line': b'7: + #include <stdint.h>\n'}
[7.471343] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.471418] (ldlidar_component) StdoutLine: {'line': b'7: + #include <algorithm>\n'}
[7.471490] (ldlidar_component) StdoutLine: {'line': b'7: + #include <iostream>\n'}
[7.471573] (ldlidar_component) StdoutLine: {'line': b'7: + #include <vector>\n'}
[7.471649] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.471721] (ldlidar_component) StdoutLine: {'line': b'7: + #include "ldlidar_datatype.h"\n'}
[7.471793] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:35:17]: Replace [ ] with [\\n]\n'}
[7.471866] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.471938] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar\n'}
[7.472011] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.472083] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:35:19]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.472156] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.472283] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.472379] (ldlidar_component) StdoutLine: {'line': b'7: -   enum class FilterType\n'}
[7.472454] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar {\n'}
[7.472527] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.472608] (ldlidar_component) StdoutLine: {'line': b'7: + enum class FilterType\n'}
[7.472682] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:37:23]: Replace [\\n  ] with [ ]\n'}
[7.472756] (ldlidar_component) StdoutLine: {'line': b'7: -   enum class FilterType\n'}
[7.472828] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.472900] (ldlidar_component) StdoutLine: {'line': b'7: +   enum class FilterType {\n'}
[7.472972] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:38:3]: Replace [\\n    ] with [ ]\n'}
[7.473045] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.473117] (ldlidar_component) StdoutLine: {'line': b'7: -     NO_FILTER,\n'}
[7.473196] (ldlidar_component) StdoutLine: {'line': b'7: +   { NO_FILTER,\n'}
[7.473315] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:39:14]: Replace [\\n    ] with [ ]\n'}
[7.473394] (ldlidar_component) StdoutLine: {'line': b'7: -     NO_FILTER,\n'}
[7.473467] (ldlidar_component) StdoutLine: {'line': b'7: -     NEAR_FILTER,\n'}
[7.473540] (ldlidar_component) StdoutLine: {'line': b'7: +     NO_FILTER, NEAR_FILTER,\n'}
[7.473612] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:40:16]: Replace [\\n    ] with [ ]\n'}
[7.473686] (ldlidar_component) StdoutLine: {'line': b'7: -     NEAR_FILTER,\n'}
[7.473758] (ldlidar_component) StdoutLine: {'line': b'7: -     NOISE_FILTER\n'}
[7.473831] (ldlidar_component) StdoutLine: {'line': b'7: +     NEAR_FILTER, NOISE_FILTER\n'}
[7.473904] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:41:16]: Replace [\\n  ] with [ ]\n'}
[7.473977] (ldlidar_component) StdoutLine: {'line': b'7: -     NOISE_FILTER\n'}
[7.474049] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.474121] (ldlidar_component) StdoutLine: {'line': b'7: +     NOISE_FILTER };\n'}
[7.474201] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:42:4]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.474332] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.474412] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.474485] (ldlidar_component) StdoutLine: {'line': b'7: -   class Tofbf {\n'}
[7.474558] (ldlidar_component) StdoutLine: {'line': b'7: +   };\n'}
[7.474632] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.474705] (ldlidar_component) StdoutLine: {'line': b'7: + class Tofbf {\n'}
[7.474778] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:44:13]: Replace [ ] with [\\n]\n'}
[7.474854] (ldlidar_component) StdoutLine: {'line': b'7: -   class Tofbf {\n'}
[7.474926] (ldlidar_component) StdoutLine: {'line': b'7: +   class Tofbf\n'}
[7.474999] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.475070] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:45:7]: Replace [\\n    ] with [\\n  ]\n'}
[7.475143] (ldlidar_component) StdoutLine: {'line': b'7: - public:\n'}
[7.475243] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf(int speed, LDType type);\n'}
[7.475354] (ldlidar_component) StdoutLine: {'line': b'7: + public:\n'}
[7.475429] (ldlidar_component) StdoutLine: {'line': b'7: +   Tofbf(int speed, LDType type);\n'}
[7.475502] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:46:34]: Replace [\\n    ] with [\\n  ]\n'}
[7.475575] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf(int speed, LDType type);\n'}
[7.475648] (ldlidar_component) StdoutLine: {'line': b'7: -     ~Tofbf();\n'}
[7.475720] (ldlidar_component) StdoutLine: {'line': b'7: +     Tofbf(int speed, LDType type);\n'}
[7.475793] (ldlidar_component) StdoutLine: {'line': b'7: +   ~Tofbf();\n'}
[7.475866] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:47:13]: Replace [\\n    ] with [\\n  ]\n'}
[7.475938] (ldlidar_component) StdoutLine: {'line': b'7: -     ~Tofbf();\n'}
[7.476021] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.476096] (ldlidar_component) StdoutLine: {'line': b'7: +     ~Tofbf();\n'}
[7.476169] (ldlidar_component) StdoutLine: {'line': b'7: +   std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.476314] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:48:15]: Replace [ ] with []\n'}
[7.476409] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.476484] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector< PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.476558] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:48:17]: Replace [ ] with []\n'}
[7.476632] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.476704] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector <PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.476776] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:48:27]: Replace [ ] with []\n'}
[7.476849] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.476921] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData> Filter(const std::vector < PointData > &tmp) const;\n'}
[7.476993] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:48:54]: Replace [ ] with []\n'}
[7.477066] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.477139] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > Filter(const std::vector< PointData > &tmp) const;\n'}
[7.477224] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:48:56]: Replace [ ] with []\n'}
[7.477334] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.477410] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > Filter(const std::vector <PointData > &tmp) const;\n'}
[7.477484] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:48:66]: Replace [ ] with []\n'}
[7.477557] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.477661] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > Filter(const std::vector < PointData> &tmp) const;\n'}
[7.477742] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:48:70]: Replace [] with [ ]\n'}
[7.477815] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;\n'}
[7.477889] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > Filter(const std::vector < PointData > & tmp) const;\n'}
[7.477961] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:50:8]: Replace [\\n    ] with [\\n  ]\n'}
[7.478034] (ldlidar_component) StdoutLine: {'line': b'7: - private:\n'}
[7.478105] (ldlidar_component) StdoutLine: {'line': b'7: -     FilterType filter_type_;\n'}
[7.478177] (ldlidar_component) StdoutLine: {'line': b'7: + private:\n'}
[7.478307] (ldlidar_component) StdoutLine: {'line': b'7: +   FilterType filter_type_;\n'}
[7.478410] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:51:28]: Replace [\\n    ] with [\\n  ]\n'}
[7.478501] (ldlidar_component) StdoutLine: {'line': b'7: -     FilterType filter_type_;\n'}
[7.478575] (ldlidar_component) StdoutLine: {'line': b'7: -     // Low intensity threshold\n'}
[7.478648] (ldlidar_component) StdoutLine: {'line': b'7: +     FilterType filter_type_;\n'}
[7.478729] (ldlidar_component) StdoutLine: {'line': b'7: +   // Low intensity threshold\n'}
[7.478802] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:52:30]: Replace [\\n    ] with [\\n  ]\n'}
[7.478874] (ldlidar_component) StdoutLine: {'line': b'7: -     // Low intensity threshold\n'}
[7.478946] (ldlidar_component) StdoutLine: {'line': b'7: -     int intensity_low_;\n'}
[7.479018] (ldlidar_component) StdoutLine: {'line': b'7: +     // Low intensity threshold\n'}
[7.479089] (ldlidar_component) StdoutLine: {'line': b'7: +   int intensity_low_;\n'}
[7.479161] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:53:23]: Replace [\\n    ] with [\\n  ]\n'}
[7.479275] (ldlidar_component) StdoutLine: {'line': b'7: -     int intensity_low_;\n'}
[7.479376] (ldlidar_component) StdoutLine: {'line': b'7: -     // Discrete points require higher intensity\n'}
[7.479452] (ldlidar_component) StdoutLine: {'line': b'7: +     int intensity_low_;\n'}
[7.479526] (ldlidar_component) StdoutLine: {'line': b'7: +   // Discrete points require higher intensity\n'}
[7.479599] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:54:47]: Replace [\\n    ] with [\\n  ]\n'}
[7.479674] (ldlidar_component) StdoutLine: {'line': b'7: -     // Discrete points require higher intensity\n'}
[7.479746] (ldlidar_component) StdoutLine: {'line': b'7: -     int intensity_single_;\n'}
[7.479819] (ldlidar_component) StdoutLine: {'line': b'7: +     // Discrete points require higher intensity\n'}
[7.479892] (ldlidar_component) StdoutLine: {'line': b'7: +   int intensity_single_;\n'}
[7.479964] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:55:26]: Replace [\\n    ] with [\\n  ]\n'}
[7.480037] (ldlidar_component) StdoutLine: {'line': b'7: -     int intensity_single_;\n'}
[7.480110] (ldlidar_component) StdoutLine: {'line': b'7: -     // Default scan frequency, to change, read according to radar protocol\n'}
[7.480183] (ldlidar_component) StdoutLine: {'line': b'7: +     int intensity_single_;\n'}
[7.480318] (ldlidar_component) StdoutLine: {'line': b'7: +   // Default scan frequency, to change, read according to radar protocol\n'}
[7.480399] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:56:74]: Replace [\\n    ] with [\\n  ]\n'}
[7.480473] (ldlidar_component) StdoutLine: {'line': b'7: -     // Default scan frequency, to change, read according to radar protocol\n'}
[7.480547] (ldlidar_component) StdoutLine: {'line': b'7: -     int scan_frequency_;\n'}
[7.480619] (ldlidar_component) StdoutLine: {'line': b'7: +     // Default scan frequency, to change, read according to radar protocol\n'}
[7.480691] (ldlidar_component) StdoutLine: {'line': b'7: +   int scan_frequency_;\n'}
[7.480763] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:57:24]: Replace [\\n    ] with [\\n  ]\n'}
[7.480835] (ldlidar_component) StdoutLine: {'line': b'7: -     int scan_frequency_;\n'}
[7.480907] (ldlidar_component) StdoutLine: {'line': b'7: -     double curr_speed_;\n'}
[7.480979] (ldlidar_component) StdoutLine: {'line': b'7: +     int scan_frequency_;\n'}
[7.481050] (ldlidar_component) StdoutLine: {'line': b'7: +   double curr_speed_;\n'}
[7.481122] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:58:23]: Replace [\\n    ] with [\\n  ]\n'}
[7.481202] (ldlidar_component) StdoutLine: {'line': b'7: -     double curr_speed_;\n'}
[7.481313] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf() = delete;\n'}
[7.481390] (ldlidar_component) StdoutLine: {'line': b'7: +     double curr_speed_;\n'}
[7.481463] (ldlidar_component) StdoutLine: {'line': b'7: +   Tofbf() = delete;\n'}
[7.481536] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:59:21]: Replace [\\n    ] with [\\n  ]\n'}
[7.481610] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf() = delete;\n'}
[7.481695] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf(const Tofbf &) = delete;\n'}
[7.481769] (ldlidar_component) StdoutLine: {'line': b'7: +     Tofbf() = delete;\n'}
[7.481841] (ldlidar_component) StdoutLine: {'line': b'7: +   Tofbf(const Tofbf &) = delete;\n'}
[7.481914] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:60:34]: Replace [\\n    ] with [\\n  ]\n'}
[7.481988] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf(const Tofbf &) = delete;\n'}
[7.482060] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf & operator = (const Tofbf &) = delete;\n'}
[7.482133] (ldlidar_component) StdoutLine: {'line': b'7: +     Tofbf(const Tofbf &) = delete;\n'}
[7.482232] (ldlidar_component) StdoutLine: {'line': b'7: +   Tofbf & operator = (const Tofbf &) = delete;\n'}
[7.482353] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:61:20]: Replace [ ] with []\n'}
[7.482431] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf & operator = (const Tofbf &) = delete;\n'}
[7.482505] (ldlidar_component) StdoutLine: {'line': b'7: +     Tofbf & operator= (const Tofbf &) = delete;\n'}
[7.482577] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:61:22]: Replace [ ] with []\n'}
[7.482650] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf & operator = (const Tofbf &) = delete;\n'}
[7.482722] (ldlidar_component) StdoutLine: {'line': b'7: +     Tofbf & operator =(const Tofbf &) = delete;\n'}
[7.482795] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:61:48]: Replace [\\n    ] with [\\n  ]\n'}
[7.482873] (ldlidar_component) StdoutLine: {'line': b'7: -     Tofbf & operator = (const Tofbf &) = delete;\n'}
[7.482945] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.483019] (ldlidar_component) StdoutLine: {'line': b'7: +     Tofbf & operator = (const Tofbf &) = delete;\n'}
[7.483103] (ldlidar_component) StdoutLine: {'line': b'7: +   std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.483180] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:62:15]: Replace [ ] with []\n'}
[7.483317] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.483398] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector< PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.483473] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:62:17]: Replace [ ] with []\n'}
[7.483547] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.483621] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector <PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.483695] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:62:27]: Replace [ ] with []\n'}
[7.483769] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.483842] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData> NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.483916] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:62:58]: Replace [ ] with []\n'}
[7.483989] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.484063] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NearFilter(const std::vector< PointData > &tmp) const;\n'}
[7.484136] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:62:60]: Replace [ ] with []\n'}
[7.484243] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.484357] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NearFilter(const std::vector <PointData > &tmp) const;\n'}
[7.484434] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:62:70]: Replace [ ] with []\n'}
[7.484508] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.484581] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NearFilter(const std::vector < PointData> &tmp) const;\n'}
[7.484655] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:62:74]: Replace [] with [ ]\n'}
[7.484728] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.484800] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NearFilter(const std::vector < PointData > & tmp) const;\n'}
[7.484873] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:62:85]: Replace [\\n    ] with [\\n  ]\n'}
[7.484946] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485018] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485091] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485163] (ldlidar_component) StdoutLine: {'line': b'7: +   std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485279] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:63:15]: Replace [ ] with []\n'}
[7.485379] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485454] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector< PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485528] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:63:17]: Replace [ ] with []\n'}
[7.485600] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485673] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector <PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485747] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:63:27]: Replace [ ] with []\n'}
[7.485819] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485892] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData> NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.485965] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:63:59]: Replace [ ] with []\n'}
[7.486037] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.486111] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NoiseFilter(const std::vector< PointData > &tmp) const;\n'}
[7.486190] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:63:61]: Replace [ ] with []\n'}
[7.486321] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.486401] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NoiseFilter(const std::vector <PointData > &tmp) const;\n'}
[7.486475] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:63:71]: Replace [ ] with []\n'}
[7.486549] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.486679] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NoiseFilter(const std::vector < PointData> &tmp) const;\n'}
[7.486762] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:63:75]: Replace [] with [ ]\n'}
[7.486838] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.486912] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NoiseFilter(const std::vector < PointData > & tmp) const;\n'}
[7.486985] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:63:86]: Replace [\\n  ] with [\\n]\n'}
[7.487058] (ldlidar_component) StdoutLine: {'line': b'7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.487131] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.487226] (ldlidar_component) StdoutLine: {'line': b'7: +     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;\n'}
[7.487343] (ldlidar_component) StdoutLine: {'line': b'7: + };\n'}
[7.487418] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/filter/tofbf.h:66:1]: Replace [ ] with [  ]\n'}
[7.487492] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.487565] (ldlidar_component) StdoutLine: {'line': b'7: + }  // namespace ldlidar\n'}
[7.487639] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.487713] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/include/logger/log_module.h':\n"}
[7.487788] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.487861] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:18:7]: Replace [  ] with [ ]\n'}
[7.487934] (ldlidar_component) StdoutLine: {'line': b'7: - #ifndef  __LOGMODULE_H_\n'}
[7.488006] (ldlidar_component) StdoutLine: {'line': b'7: + #ifndef __LOGMODULE_H_\n'}
[7.488079] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:19:7]: Replace [  ] with [ ]\n'}
[7.488153] (ldlidar_component) StdoutLine: {'line': b'7: - #define  __LOGMODULE_H_\n'}
[7.488275] (ldlidar_component) StdoutLine: {'line': b'7: + #define __LOGMODULE_H_\n'}
[7.488374] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:19:23]: Replace [\\n\\n\\n] with [\\n\\n]\n'}
[7.488451] (ldlidar_component) StdoutLine: {'line': b'7: - #define  __LOGMODULE_H_\n'}
[7.488524] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.488603] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.488676] (ldlidar_component) StdoutLine: {'line': b'7: - #define LINUX\n'}
[7.488750] (ldlidar_component) StdoutLine: {'line': b'7: + #define  __LOGMODULE_H_\n'}
[7.488822] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.488895] (ldlidar_component) StdoutLine: {'line': b'7: + #define LINUX\n'}
[7.488967] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:32:0]: Replace [#include <stdio.h>\\n#include <string>\\n#include <chrono>\\n#include <stdlib.h>] with [#include <stdio.h>\\n#include <stdlib.h>\\n\\n#include <chrono>\\n#include <string>]\n'}
[7.489078] (ldlidar_component) StdoutLine: {'line': b'7: - #include <stdio.h>\n'}
[7.489154] (ldlidar_component) StdoutLine: {'line': b'7: - #include <string>\n'}
[7.489253] (ldlidar_component) StdoutLine: {'line': b'7: - #include <chrono>\n'}
[7.489333] (ldlidar_component) StdoutLine: {'line': b'7: - #include <stdlib.h>\n'}
[7.489406] (ldlidar_component) StdoutLine: {'line': b'7: + #include <stdio.h>\n'}
[7.489479] (ldlidar_component) StdoutLine: {'line': b'7: + #include <stdlib.h>\n'}
[7.489552] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.489625] (ldlidar_component) StdoutLine: {'line': b'7: + #include <chrono>\n'}
[7.489697] (ldlidar_component) StdoutLine: {'line': b'7: + #include <string>\n'}
[7.489803] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:42:30]: Replace [  ] with [ ]\n'}
[7.489879] (ldlidar_component) StdoutLine: {'line': b'7: - #define printf_s(fileptr, str)  (fprintf(fileptr, "%s", str))\n'}
[7.489953] (ldlidar_component) StdoutLine: {'line': b'7: + #define printf_s(fileptr, str) (fprintf(fileptr, "%s", str))\n'}
[7.490025] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:44:6]: Replace [ ] with [  ]\n'}
[7.490099] (ldlidar_component) StdoutLine: {'line': b'7: - #endif // ??????????????????????\n'}
[7.490172] (ldlidar_component) StdoutLine: {'line': b'7: + #endif  // ??????????????????????\n'}
[7.490292] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:44:32]: Replace [\\n\\n\\n] with [\\n\\n]\n'}
[7.490377] (ldlidar_component) StdoutLine: {'line': b'7: - #endif // ??????????????????????\n'}
[7.490452] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.490526] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.490600] (ldlidar_component) StdoutLine: {'line': b'7: - struct LogVersion\n'}
[7.490675] (ldlidar_component) StdoutLine: {'line': b'7: + #endif // ??????????????????????\n'}
[7.490748] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.490820] (ldlidar_component) StdoutLine: {'line': b'7: + struct LogVersion\n'}
[7.490893] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:51:2]: Replace [\\n\\n\\n] with [\\n\\n]\n'}
[7.490966] (ldlidar_component) StdoutLine: {'line': b'7: - };\n'}
[7.491038] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.491110] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.491182] (ldlidar_component) StdoutLine: {'line': b'7: - class ILogRealization {\n'}
[7.491314] (ldlidar_component) StdoutLine: {'line': b'7: + };\n'}
[7.491391] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.491466] (ldlidar_component) StdoutLine: {'line': b'7: + class ILogRealization {\n'}
[7.491539] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:54:21]: Replace [ ] with [\\n]\n'}
[7.491613] (ldlidar_component) StdoutLine: {'line': b'7: - class ILogRealization {\n'}
[7.491685] (ldlidar_component) StdoutLine: {'line': b'7: + class ILogRealization\n'}
[7.491757] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.491830] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:56:30]: Replace [\\n\\n  ] with []\n'}
[7.491904] (ldlidar_component) StdoutLine: {'line': b'7: -   virtual ~ILogRealization() {\n'}
[7.491977] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.492049] (ldlidar_component) StdoutLine: {'line': b'7: -   }\n'}
[7.492122] (ldlidar_component) StdoutLine: {'line': b'7: +   virtual ~ILogRealization() {}\n'}
[7.492202] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:69:2]: Replace [\\n\\n\\n] with [\\n\\n]\n'}
[7.492340] (ldlidar_component) StdoutLine: {'line': b'7: - };\n'}
[7.492424] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.492499] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.492571] (ldlidar_component) StdoutLine: {'line': b'7: - #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \\\n'}
[7.492645] (ldlidar_component) StdoutLine: {'line': b'7: + };\n'}
[7.492718] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.492790] (ldlidar_component) StdoutLine: {'line': b'7: + #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \\\n'}
[7.492863] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:72:7]: Replace [  ] with [ ]\n'}
[7.492936] (ldlidar_component) StdoutLine: {'line': b'7: - #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \\\n'}
[7.493009] (ldlidar_component) StdoutLine: {'line': b'7: + #define ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \\\n'}
[7.493123] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:72:38]: Replace [  ] with [                                                 \\\\n  ]\n'}
[7.493223] (ldlidar_component) StdoutLine: {'line': b'7: - #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \\\n'}
[7.493316] (ldlidar_component) StdoutLine: {'line': b'7: + #define  ILOGFREE(LogRealizationClass)                                                 \\\n'}
[7.493390] (ldlidar_component) StdoutLine: {'line': b'7: +   virtual void free(ILogRealization * plogger) \\\n'}
[7.493463] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:72:84]: Replace [ \\\\n  ] with [                                        \\\\n  ]\n'}
[7.493537] (ldlidar_component) StdoutLine: {'line': b'7: - #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \\\n'}
[7.493610] (ldlidar_component) StdoutLine: {'line': b'7: -   { \\\n'}
[7.493682] (ldlidar_component) StdoutLine: {'line': b'7: + #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger)                                        \\\n'}
[7.493756] (ldlidar_component) StdoutLine: {'line': b'7: +   { \\\n'}
[7.493827] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:73:3]: Replace [ \\\\n    ] with [                                                                                   \\\\n    ]\n'}
[7.493902] (ldlidar_component) StdoutLine: {'line': b'7: -   { \\\n'}
[7.493974] (ldlidar_component) StdoutLine: {'line': b'7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \\\n'}
[7.494048] (ldlidar_component) StdoutLine: {'line': b'7: +   {                                                                                   \\\n'}
[7.494122] (ldlidar_component) StdoutLine: {'line': b'7: +     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \\\n'}
[7.494201] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:74:52]: Replace [ ] with []\n'}
[7.494324] (ldlidar_component) StdoutLine: {'line': b'7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \\\n'}
[7.494405] (ldlidar_component) StdoutLine: {'line': b'7: +     LogRealizationClass * prealization = static_cast< LogRealizationClass * > (plogger); \\\n'}
[7.494480] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:74:54]: Replace [ ] with []\n'}
[7.494555] (ldlidar_component) StdoutLine: {'line': b'7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \\\n'}
[7.494629] (ldlidar_component) StdoutLine: {'line': b'7: +     LogRealizationClass * prealization = static_cast <LogRealizationClass * > (plogger); \\\n'}
[7.494703] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:74:76]: Replace [ ] with []\n'}
[7.494777] (ldlidar_component) StdoutLine: {'line': b'7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \\\n'}
[7.494850] (ldlidar_component) StdoutLine: {'line': b'7: +     LogRealizationClass * prealization = static_cast < LogRealizationClass *> (plogger); \\\n'}
[7.494923] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:74:78]: Replace [ ] with []\n'}
[7.494995] (ldlidar_component) StdoutLine: {'line': b'7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \\\n'}
[7.495068] (ldlidar_component) StdoutLine: {'line': b'7: +     LogRealizationClass * prealization = static_cast < LogRealizationClass * >(plogger); \\\n'}
[7.495172] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:75:31]: Replace [] with [                                                       \\\\n      ]\n'}
[7.495293] (ldlidar_component) StdoutLine: {'line': b'7: -     if (prealization != NULL) {delete prealization;} \\\n'}
[7.495387] (ldlidar_component) StdoutLine: {'line': b'7: +     if (prealization != NULL) {                                                       \\\n'}
[7.495462] (ldlidar_component) StdoutLine: {'line': b'7: +       delete prealization;} \\\n'}
[7.495535] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:75:51]: Replace [] with [                                                            \\\\n    ]\n'}
[7.495609] (ldlidar_component) StdoutLine: {'line': b'7: -     if (prealization != NULL) {delete prealization;} \\\n'}
[7.495683] (ldlidar_component) StdoutLine: {'line': b'7: +     if (prealization != NULL) {delete prealization;                                                            \\\n'}
[7.495756] (ldlidar_component) StdoutLine: {'line': b'7: +     } \\\n'}
[7.495829] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:75:52]: Replace [ \\\\n  ] with [                                                                                 \\\\n  ]\n'}
[7.495902] (ldlidar_component) StdoutLine: {'line': b'7: -     if (prealization != NULL) {delete prealization;} \\\n'}
[7.495975] (ldlidar_component) StdoutLine: {'line': b'7: -   }\n'}
[7.496047] (ldlidar_component) StdoutLine: {'line': b'7: +     if (prealization != NULL) {delete prealization;}                                                                                 \\\n'}
[7.496120] (ldlidar_component) StdoutLine: {'line': b'7: +   }\n'}
[7.496198] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:78:14]: Replace [] with [ ]\n'}
[7.496322] (ldlidar_component) StdoutLine: {'line': b'7: - class LogPrint: public ILogRealization {\n'}
[7.496400] (ldlidar_component) StdoutLine: {'line': b'7: + class LogPrint : public ILogRealization {\n'}
[7.496474] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:78:38]: Replace [ ] with [\\n]\n'}
[7.496548] (ldlidar_component) StdoutLine: {'line': b'7: - class LogPrint: public ILogRealization {\n'}
[7.496621] (ldlidar_component) StdoutLine: {'line': b'7: + class LogPrint: public ILogRealization\n'}
[7.496702] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.496778] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:86:21]: Replace [] with [ ]\n'}
[7.496853] (ldlidar_component) StdoutLine: {'line': b'7: - class LogOutputString: public ILogRealization {\n'}
[7.496926] (ldlidar_component) StdoutLine: {'line': b'7: + class LogOutputString : public ILogRealization {\n'}
[7.497000] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:86:45]: Replace [ ] with [\\n]\n'}
[7.497074] (ldlidar_component) StdoutLine: {'line': b'7: - class LogOutputString: public ILogRealization {\n'}
[7.497148] (ldlidar_component) StdoutLine: {'line': b'7: + class LogOutputString: public ILogRealization\n'}
[7.497255] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.497362] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:88:53]: Replace [\\n  ] with [ ]\n'}
[7.497438] (ldlidar_component) StdoutLine: {'line': b'7: -   virtual void Initializion(const char * path = NULL)\n'}
[7.497512] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.497584] (ldlidar_component) StdoutLine: {'line': b'7: +   virtual void Initializion(const char * path = NULL) {\n'}
[7.497657] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:89:3]: Replace [\\n    ] with [ ]\n'}
[7.497730] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.497802] (ldlidar_component) StdoutLine: {'line': b'7: -     return;\n'}
[7.497874] (ldlidar_component) StdoutLine: {'line': b'7: +   { return;\n'}
[7.497945] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:90:11]: Replace [\\n  ] with [ ]\n'}
[7.498018] (ldlidar_component) StdoutLine: {'line': b'7: -     return;\n'}
[7.498102] (ldlidar_component) StdoutLine: {'line': b'7: -   }\n'}
[7.498176] (ldlidar_component) StdoutLine: {'line': b'7: +     return; }\n'}
[7.498305] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:99:27]: Replace [\\n] with [\\n  ]\n'}
[7.498390] (ldlidar_component) StdoutLine: {'line': b'7: -   ILOGFREE(LogOutputString)\n'}
[7.498465] (ldlidar_component) StdoutLine: {'line': b'7: - /*\n'}
[7.498540] (ldlidar_component) StdoutLine: {'line': b'7: +   ILOGFREE(LogOutputString)\n'}
[7.498614] (ldlidar_component) StdoutLine: {'line': b'7: +   /*\n'}
[7.498688] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:111:6]: Replace [\\n\\n\\n] with [\\n\\n]\n'}
[7.498763] (ldlidar_component) StdoutLine: {'line': b'7: - #endif\n'}
[7.498837] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.498911] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.498984] (ldlidar_component) StdoutLine: {'line': b'7: - class LogModule {\n'}
[7.499058] (ldlidar_component) StdoutLine: {'line': b'7: + #endif\n'}
[7.499132] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.499219] (ldlidar_component) StdoutLine: {'line': b'7: + class LogModule {\n'}
[7.499355] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:114:15]: Replace [ ] with [\\n]\n'}
[7.499435] (ldlidar_component) StdoutLine: {'line': b'7: - class LogModule {\n'}
[7.499504] (ldlidar_component) StdoutLine: {'line': b'7: + class LogModule\n'}
[7.499571] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.499648] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:116:15]: Replace [\\n  ] with [ ]\n'}
[7.499721] (ldlidar_component) StdoutLine: {'line': b'7: -   enum LogLevel\n'}
[7.499794] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.499866] (ldlidar_component) StdoutLine: {'line': b'7: +   enum LogLevel {\n'}
[7.499938] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:117:3]: Replace [\\n    ] with [ ]\n'}
[7.500010] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.500082] (ldlidar_component) StdoutLine: {'line': b'7: -     DEBUG_LEVEL,\n'}
[7.500154] (ldlidar_component) StdoutLine: {'line': b'7: +   { DEBUG_LEVEL,\n'}
[7.500272] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:118:16]: Replace [\\n    ] with [ ]\n'}
[7.500365] (ldlidar_component) StdoutLine: {'line': b'7: -     DEBUG_LEVEL,\n'}
[7.500439] (ldlidar_component) StdoutLine: {'line': b'7: -     WARNING_LEVEL,\n'}
[7.500514] (ldlidar_component) StdoutLine: {'line': b'7: +     DEBUG_LEVEL, WARNING_LEVEL,\n'}
[7.500587] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:119:18]: Replace [\\n    ] with [ ]\n'}
[7.500662] (ldlidar_component) StdoutLine: {'line': b'7: -     WARNING_LEVEL,\n'}
[7.500736] (ldlidar_component) StdoutLine: {'line': b'7: -     ERROR_LEVEL,\n'}
[7.500810] (ldlidar_component) StdoutLine: {'line': b'7: +     WARNING_LEVEL, ERROR_LEVEL,\n'}
[7.500883] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:120:16]: Replace [\\n    ] with [ ]\n'}
[7.500956] (ldlidar_component) StdoutLine: {'line': b'7: -     ERROR_LEVEL,\n'}
[7.501028] (ldlidar_component) StdoutLine: {'line': b'7: -     INFO_LEVEL\n'}
[7.501101] (ldlidar_component) StdoutLine: {'line': b'7: +     ERROR_LEVEL, INFO_LEVEL\n'}
[7.501174] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:121:14]: Replace [\\n  ] with [ ]\n'}
[7.501360] (ldlidar_component) StdoutLine: {'line': b'7: -     INFO_LEVEL\n'}
[7.501448] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.501524] (ldlidar_component) StdoutLine: {'line': b'7: +     INFO_LEVEL };\n'}
[7.501597] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:136:59]: Replace [\\n    ] with [ ]\n'}
[7.501671] (ldlidar_component) StdoutLine: {'line': b'7: -     __in const char * filename, __in const char * funcname,\n'}
[7.501779] (ldlidar_component) StdoutLine: {'line': b'7: -     __in int lineno, LogLevel level, ILogRealization * plog = NULL);\n'}
[7.501854] (ldlidar_component) StdoutLine: {'line': b'7: +     __in const char * filename, __in const char * funcname, __in int lineno, LogLevel level, ILogRealization * plog = NULL);\n'}
[7.501929] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:137:36]: Replace [ ] with [\\n    ]\n'}
[7.502002] (ldlidar_component) StdoutLine: {'line': b'7: -     __in int lineno, LogLevel level, ILogRealization * plog = NULL);\n'}
[7.502090] (ldlidar_component) StdoutLine: {'line': b'7: +     __in int lineno, LogLevel level,\n'}
[7.502165] (ldlidar_component) StdoutLine: {'line': b'7: +     ILogRealization * plog = NULL);\n'}
[7.502278] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:161:41]: Replace [:] with []\n'}
[7.502379] (ldlidar_component) StdoutLine: {'line': b'7: -     std::chrono::time_point < std::chrono::system_clock, std::chrono::nanoseconds > tp =\n'}
[7.502454] (ldlidar_component) StdoutLine: {'line': b'7: +     std::chrono::time_point < std::chrono:system_clock, std::chrono::nanoseconds > tp =\n'}
[7.502526] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:161:43]: Replace [s] with []\n'}
[7.502599] (ldlidar_component) StdoutLine: {'line': b'7: -     std::chrono::time_point < std::chrono::system_clock, std::chrono::nanoseconds > tp =\n'}
[7.502671] (ldlidar_component) StdoutLine: {'line': b'7: +     std::chrono::time_point < std::chrono::ystem_clock, std::chrono::nanoseconds > tp =\n'}
[7.502743] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:162:6]: Replace [s] with []\n'}
[7.502816] (ldlidar_component) StdoutLine: {'line': b'7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());\n'}
[7.502896] (ldlidar_component) StdoutLine: {'line': b'7: +       td::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());\n'}
[7.502972] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:162:48]: Replace [:] with []\n'}
[7.503045] (ldlidar_component) StdoutLine: {'line': b'7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());\n'}
[7.503118] (ldlidar_component) StdoutLine: {'line': b'7: +       std::chrono::time_point_cast < std::chrono:nanoseconds > (std::chrono::system_clock::now());\n'}
[7.503198] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:162:50]: Replace [n] with []\n'}
[7.503296] (ldlidar_component) StdoutLine: {'line': b'7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());\n'}
[7.503371] (ldlidar_component) StdoutLine: {'line': b'7: +       std::chrono::time_point_cast < std::chrono::anoseconds > (std::chrono::system_clock::now());\n'}
[7.503445] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:162:75]: Replace [o] with []\n'}
[7.503518] (ldlidar_component) StdoutLine: {'line': b'7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());\n'}
[7.503591] (ldlidar_component) StdoutLine: {'line': b'7: +       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chron::system_clock::now());\n'}
[7.503663] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:162:77]: Replace [:] with []\n'}
[7.503736] (ldlidar_component) StdoutLine: {'line': b'7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());\n'}
[7.503809] (ldlidar_component) StdoutLine: {'line': b'7: +       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono:system_clock::now());\n'}
[7.503882] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:163:55]: Replace [:] with []\n'}
[7.503989] (ldlidar_component) StdoutLine: {'line': b'7: -     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_since_epoch());\n'}
[7.504064] (ldlidar_component) StdoutLine: {'line': b'7: +     auto tmp = std::chrono::duration_cast < std::chrono:nanoseconds > (tp.time_since_epoch());\n'}
[7.504136] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:163:57]: Replace [n] with []\n'}
[7.504220] (ldlidar_component) StdoutLine: {'line': b'7: -     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_since_epoch());\n'}
[7.504336] (ldlidar_component) StdoutLine: {'line': b'7: +     auto tmp = std::chrono::duration_cast < std::chrono::anoseconds > (tp.time_since_epoch());\n'}
[7.504414] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:163:82]: Replace [n] with []\n'}
[7.504488] (ldlidar_component) StdoutLine: {'line': b'7: -     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_since_epoch());\n'}
[7.504562] (ldlidar_component) StdoutLine: {'line': b'7: +     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_sice_epoch());\n'}
[7.504635] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:163:84]: Replace [e] with []\n'}
[7.504708] (ldlidar_component) StdoutLine: {'line': b'7: -     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_since_epoch());\n'}
[7.504780] (ldlidar_component) StdoutLine: {'line': b'7: +     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_sinc_epoch());\n'}
[7.504852] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:169:27]: Replace [ue] with [ ]\n'}
[7.504925] (ldlidar_component) StdoutLine: {'line': b'7: -   std::string  GetFormatValue(int n_value);\n'}
[7.504997] (ldlidar_component) StdoutLine: {'line': b'7: +   std::string  GetFormatVal (int n_value);\n'}
[7.505070] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:171:27]: Replace [e(] with [ ]\n'}
[7.505143] (ldlidar_component) StdoutLine: {'line': b'7: -   std::string  GetLevelValue(int level);\n'}
[7.505261] (ldlidar_component) StdoutLine: {'line': b'7: +   std::string  GetLevelValu int level);\n'}
[7.505350] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:184:7]: Replace [\xe5\x8a\x9f\xe8\x83\xbd\xe6\x94\xaf] with [\\n]\n'}
[7.505428] (ldlidar_component) StdoutLine: {'line': b'7: - //// \xe4\xbb\xa5\xe4\xb8\x8b\xe5\x8a\x9f\xe8\x83\xbd\xe6\x94\xaf\xe6\x8c\x81\xe6\x89\x80\xe5\xa4\x84\xe6\x96\x87\xe4\xbb\xb6\xe3\x80\x81\xe5\x87\xbd\xe6\x95\xb0\xe3\x80\x81\xe8\xa1\x8c\xe5\x8f\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\x89\x93\xe5\x8d\xb0\n'}
[7.505506] (ldlidar_component) StdoutLine: {'line': b'7: + //// \xe4\xbb\xa5\xe4\xb8\x8b\n'}
[7.505579] (ldlidar_component) StdoutLine: {'line': b'7: + \xe6\x8c\x81\xe6\x89\x80\xe5\xa4\x84\xe6\x96\x87\xe4\xbb\xb6\xe3\x80\x81\xe5\x87\xbd\xe6\x95\xb0\xe3\x80\x81\xe8\xa1\x8c\xe5\x8f\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\x89\x93\xe5\x8d\xb0\n'}
[7.505654] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:186:2]: Replace [  ] with [ ]\n'}
[7.505728] (ldlidar_component) StdoutLine: {'line': b'7: -     __FILE__, __FUNCTION__, __LINE__, \\\n'}
[7.505800] (ldlidar_component) StdoutLine: {'line': b'7: +    __FILE__, __FUNCTION__, __LINE__, \\\n'}
[7.505874] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:186:27]: Replace [ __] with [ \\\\n  ]\n'}
[7.505946] (ldlidar_component) StdoutLine: {'line': b'7: -     __FILE__, __FUNCTION__, __LINE__, \\\n'}
[7.506019] (ldlidar_component) StdoutLine: {'line': b'7: +     __FILE__, __FUNCTION__, \\\n'}
[7.506091] (ldlidar_component) StdoutLine: {'line': b'7: +   LINE__, \\\n'}
[7.506164] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:187:13]: Replace [ogPrint] with []\n'}
[7.506314] (ldlidar_component) StdoutLine: {'line': b'7: -     level)->LogPrintInf(format, __VA_ARGS__);\n'}
[7.506415] (ldlidar_component) StdoutLine: {'line': b'7: +     level)->LInf(format, __VA_ARGS__);\n'}
[7.506490] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:188:7]: Replace [ENABLE_] with [ ]\n'}
[7.506564] (ldlidar_component) StdoutLine: {'line': b'7: - #ifdef ENABLE_LOG_DIS_OUTPUT\n'}
[7.506636] (ldlidar_component) StdoutLine: {'line': b'7: + #ifdef  LOG_DIS_OUTPUT\n'}
[7.506714] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:189:63]: Replace [, ] with [ ]\n'}
[7.506790] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_DEBUG(format, ...)   LOG(LogModule::DEBUG_LEVEL, format, __VA_ARGS__)\n'}
[7.506864] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_DEBUG(format, ...)   LOG(LogModule::DEBUG_LEVEL format, __VA_ARGS__)\n'}
[7.506936] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:190:4]: Replace [ine] with [ ]\n'}
[7.507008] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_INFO(format, ...)    LOG(LogModule::INFO_LEVEL, format, __VA_ARGS__)\n'}
[7.507081] (ldlidar_component) StdoutLine: {'line': b'7: + #def   LD_LOG_INFO(format, ...)    LOG(LogModule::INFO_LEVEL, format, __VA_ARGS__)\n'}
[7.507153] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:190:63]: Replace [ f] with [ ]\n'}
[7.507251] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_INFO(format, ...)    LOG(LogModule::INFO_LEVEL, format, __VA_ARGS__)\n'}
[7.507331] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_INFO(format, ...)    LOG(LogModule::INFO_LEVEL, ormat, __VA_ARGS__)\n'}
[7.507405] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:191:4]: Replace [ine ] with [ ]\n'}
[7.507479] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_WARN(format, ...)    LOG(LogModule::WARNING_LEVEL, format, __VA_ARGS__)\n'}
[7.507554] (ldlidar_component) StdoutLine: {'line': b'7: + #def  LD_LOG_WARN(format, ...)    LOG(LogModule::WARNING_LEVEL, format, __VA_ARGS__)\n'}
[7.507627] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:191:63]: Replace [EL] with [ ]\n'}
[7.507700] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_WARN(format, ...)    LOG(LogModule::WARNING_LEVEL, format, __VA_ARGS__)\n'}
[7.507773] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_WARN(format, ...)    LOG(LogModule::WARNING_LEV , format, __VA_ARGS__)\n'}
[7.507845] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:192:1]: Replace [defi] with [ ]\n'}
[7.507917] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_ERROR(format, ...)   LOG(LogModule::ERROR_LEVEL, format, __VA_ARGS__)\n'}
[7.507989] (ldlidar_component) StdoutLine: {'line': b'7: + # ne  LD_LOG_ERROR(format, ...)   LOG(LogModule::ERROR_LEVEL, format, __VA_ARGS__)\n'}
[7.508061] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:192:63]: Replace [, ] with [ ]\n'}
[7.508132] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_ERROR(format, ...)   LOG(LogModule::ERROR_LEVEL, format, __VA_ARGS__)\n'}
[7.508214] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_ERROR(format, ...)   LOG(LogModule::ERROR_LEVEL format, __VA_ARGS__)\n'}
[7.508349] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:193:4]: Replace [e\\n#] with [ ]\n'}
[7.508427] (ldlidar_component) StdoutLine: {'line': b'7: - #else\n'}
[7.508501] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_DEBUG(format, ...)   do {} while(0)\n'}
[7.508574] (ldlidar_component) StdoutLine: {'line': b'7: + #els define  LD_LOG_DEBUG(format, ...)   do {} while(0)\n'}
[7.508648] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:195:11]: Replace [_L] with [ ]\n'}
[7.508749] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_INFO(format, ...)    do {} while(0)\n'}
[7.508824] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD OG_INFO(format, ...)    do {} while(0)\n'}
[7.508897] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:195:38]: Replace [o {] with [ \\\\n  ]\n'}
[7.508990] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_INFO(format, ...)    do {} while(0)\n'}
[7.509065] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_INFO(format, ...)    d \\\n'}
[7.509138] (ldlidar_component) StdoutLine: {'line': b'7: +   } while(0)\n'}
[7.509235] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:195:45]: Replace [] with [                            \\\\n  ]\n'}
[7.509349] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_INFO(format, ...)    do {} while(0)\n'}
[7.509425] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_INFO(format, ...)    do {} wh                            \\\n'}
[7.509500] (ldlidar_component) StdoutLine: {'line': b'7: +   ile(0)\n'}
[7.509574] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:196:0]: Replace [] with [ ]\n'}
[7.509648] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.509721] (ldlidar_component) StdoutLine: {'line': b'7: +  #define  LD_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.509795] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:196:11]: Replace [_L] with [ ]\n'}
[7.509868] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.509940] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD OG_WARN(format, ...)    do {} while(0)\n'}
[7.510012] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:196:37]: Replace [do {] with [ \\\\n  ]\n'}
[7.510085] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.510157] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_WARN(format, ...)     \\\n'}
[7.510272] (ldlidar_component) StdoutLine: {'line': b'7: +   } while(0)\n'}
[7.510375] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:196:45]: Replace [] with [                           \\\\n  ]\n'}
[7.510452] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.510524] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_WARN(format, ...)    do {} wh                           \\\n'}
[7.510598] (ldlidar_component) StdoutLine: {'line': b'7: +   ile(0)\n'}
[7.510669] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:197:0]: Replace [] with [ ]\n'}
[7.510741] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.510833] (ldlidar_component) StdoutLine: {'line': b'7: +  #define  LD_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.510912] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:197:11]: Replace [_L] with [ ]\n'}
[7.510987] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.511073] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD OG_ERROR(format, ...)   do {} while(0)\n'}
[7.511148] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:197:37]: Replace [do {] with [ \\\\n  ]\n'}
[7.511255] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.511400] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_ERROR(format, ...)    \\\n'}
[7.511476] (ldlidar_component) StdoutLine: {'line': b'7: +   } while(0)\n'}
[7.511562] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:197:45]: Replace [] with [                           \\\\n  ]\n'}
[7.511637] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LD_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.511709] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD_LOG_ERROR(format, ...)   do {} wh                           \\\n'}
[7.511783] (ldlidar_component) StdoutLine: {'line': b'7: +   ile(0)\n'}
[7.511855] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:198:0]: Replace [] with [ ]\n'}
[7.511927] (ldlidar_component) StdoutLine: {'line': b'7: - #endif\n'}
[7.511999] (ldlidar_component) StdoutLine: {'line': b'7: +  #endif\n'}
[7.512070] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:199:4]: Replace [ \xe4\xbb\xa5] with [ ]\n'}
[7.512144] (ldlidar_component) StdoutLine: {'line': b'7: - //// \xe4\xbb\xa5\xe4\xb8\x8b\xe5\x8a\x9f\xe8\x83\xbd\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe6\x89\x80\xe5\xa4\x84\xe6\x96\x87\xe4\xbb\xb6\xe3\x80\x81\xe5\x87\xbd\xe6\x95\xb0\xe3\x80\x81\xe8\xa1\x8c\xe5\x8f\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\x89\x93\xe5\x8d\xb0\n'}
[7.512301] (ldlidar_component) StdoutLine: {'line': b'7: + //// \xe4\xb8\x8b\xe5\x8a\x9f\xe8\x83\xbd\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe6\x89\x80\xe5\xa4\x84\xe6\x96\x87\xe4\xbb\xb6\xe3\x80\x81\xe5\x87\xbd\xe6\x95\xb0\xe3\x80\x81\xe8\xa1\x8c\xe5\x8f\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe6\x89\x93\xe5\x8d\xb0\n'}
[7.512434] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:200:3]: Replace [def] with [ \\\\n  ]\n'}
[7.512510] (ldlidar_component) StdoutLine: {'line': b'7: - #ifdef ENABLE_LOG_DIS_OUTPUT\n'}
[7.512583] (ldlidar_component) StdoutLine: {'line': b'7: + #if \\\n'}
[7.512656] (ldlidar_component) StdoutLine: {'line': b'7: +    ENABLE_LOG_DIS_OUTPUT\n'}
[7.512728] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:200:10]: Replace [] with [                            \\\\n  ]\n'}
[7.512801] (ldlidar_component) StdoutLine: {'line': b'7: - #ifdef ENABLE_LOG_DIS_OUTPUT\n'}
[7.512873] (ldlidar_component) StdoutLine: {'line': b'7: + #ifdef ENA                            \\\n'}
[7.512944] (ldlidar_component) StdoutLine: {'line': b'7: +   BLE_LOG_DIS_OUTPUT\n'}
[7.513016] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:200:17]: Replace [] with [ ]\n'}
[7.513089] (ldlidar_component) StdoutLine: {'line': b'7: - #ifdef ENABLE_LOG_DIS_OUTPUT\n'}
[7.513161] (ldlidar_component) StdoutLine: {'line': b'7: + #ifdef ENABLE_LOG _DIS_OUTPUT\n'}
[7.513325] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:202:6]: Replace [rm] with [ ]\n'}
[7.513423] (ldlidar_component) StdoutLine: {'line': b'7: -     format, __VA_ARGS__);\n'}
[7.513498] (ldlidar_component) StdoutLine: {'line': b'7: +     fo at, __VA_ARGS__);\n'}
[7.513571] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:203:15]: Replace [G_D] with [ \\\\n  ]\n'}
[7.513645] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_DEBUG(format, ...)   LOG_NO_DESCRI(LogModule::DEBUG_LEVEL, format, __VA_ARGS__)\n'}
[7.513718] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LO \\\n'}
[7.513791] (ldlidar_component) StdoutLine: {'line': b'7: +   EBUG(format, ...)   LOG_NO_DESCRI(LogModule::DEBUG_LEVEL, format, __VA_ARGS__)\n'}
[7.513864] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:203:71]: Replace [VEL, fo] with []\n'}
[7.513937] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_DEBUG(format, ...)   LOG_NO_DESCRI(LogModule::DEBUG_LEVEL, format, __VA_ARGS__)\n'}
[7.514010] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_DEBUG(format, ...)   LOG_NO_DESCRI(LogModule::DEBUG_LErmat, __VA_ARGS__)\n'}
[7.514084] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:204:10]: Replace [DS] with [ ]\n'}
[7.514197] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_INFO(format, ...)    LOG_NO_DESCRI(LogModule::INFO_LEVEL, format, __VA_ARGS__)\n'}
[7.514353] (ldlidar_component) StdoutLine: {'line': b'7: + #define  L _LOG_INFO(format, ...)    LOG_NO_DESCRI(LogModule::INFO_LEVEL, format, __VA_ARGS__)\n'}
[7.514432] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:204:38]: Replace [LOG] with [ ]\n'}
[7.514506] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_INFO(format, ...)    LOG_NO_DESCRI(LogModule::INFO_LEVEL, format, __VA_ARGS__)\n'}
[7.514580] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_INFO(format, ...)     _NO_DESCRI(LogModule::INFO_LEVEL, format, __VA_ARGS__)\n'}
[7.514653] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:205:11]: Replace [S_] with [ ]\n'}
[7.514726] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_WARN(format, ...)    LOG_NO_DESCRI(LogModule::WARNING_LEVEL, format, __VA_ARGS__)\n'}
[7.514799] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LD LOG_WARN(format, ...)    LOG_NO_DESCRI(LogModule::WARNING_LEVEL, format, __VA_ARGS__)\n'}
[7.514871] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:205:38]: Replace [LOG_] with [ ]\n'}
[7.514945] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_WARN(format, ...)    LOG_NO_DESCRI(LogModule::WARNING_LEVEL, format, __VA_ARGS__)\n'}
[7.515018] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_WARN(format, ...)     NO_DESCRI(LogModule::WARNING_LEVEL, format, __VA_ARGS__)\n'}
[7.515091] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:206:8]: Replace [ L] with [ ]\n'}
[7.515163] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_ERROR(format, ...)   LOG_NO_DESCRI(LogModule::ERROR_LEVEL, format, __VA_ARGS__)\n'}
[7.515306] (ldlidar_component) StdoutLine: {'line': b'7: + #define  DS_LOG_ERROR(format, ...)   LOG_NO_DESCRI(LogModule::ERROR_LEVEL, format, __VA_ARGS__)\n'}
[7.515422] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:206:35]: Replace [   L] with [ ]\n'}
[7.515497] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_ERROR(format, ...)   LOG_NO_DESCRI(LogModule::ERROR_LEVEL, format, __VA_ARGS__)\n'}
[7.515571] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_ERROR(format, ...) OG_NO_DESCRI(LogModule::ERROR_LEVEL, format, __VA_ARGS__)\n'}
[7.515644] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:208:4]: Replace [in] with [ ]\n'}
[7.515717] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_DEBUG(format, ...)   do {} while(0)\n'}
[7.515791] (ldlidar_component) StdoutLine: {'line': b'7: + #def e  LDS_LOG_DEBUG(format, ...)   do {} while(0)\n'}
[7.515863] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:208:32]: Replace [..)] with [ ]\n'}
[7.515938] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_DEBUG(format, ...)   do {} while(0)\n'}
[7.516063] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_DEBUG(format, .    do {} while(0)\n'}
[7.516139] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:210:1]: Replace [de] with [ ]\n'}
[7.516544] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.516700] (ldlidar_component) StdoutLine: {'line': b'7: + # fine  LDS_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.516787] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:210:29]: Replace [ ..] with [ \\\\n  ]\n'}
[7.516867] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.516943] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_WARN(format, \\\n'}
[7.517063] (ldlidar_component) StdoutLine: {'line': b'7: +   .)    do {} while(0)\n'}
[7.517141] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:210:36]: Replace [] with [                             \\\\n  ]\n'}
[7.517312] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.517437] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_WARN(format, ...)                               \\\n'}
[7.517520] (ldlidar_component) StdoutLine: {'line': b'7: +     do {} while(0)\n'}
[7.517596] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:210:43]: Replace [] with [ ]\n'}
[7.517671] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_WARN(format, ...)    do {} while(0)\n'}
[7.517745] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_WARN(format, ...)    do {}  while(0)\n'}
[7.517819] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:211:1]: Replace [de] with [ ]\n'}
[7.517892] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.517965] (ldlidar_component) StdoutLine: {'line': b'7: + # fine  LDS_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.518037] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:211:28]: Replace [t, .] with [ \\\\n  ]\n'}
[7.518110] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.518182] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_ERROR(forma \\\n'}
[7.518415] (ldlidar_component) StdoutLine: {'line': b'7: +   ..)   do {} while(0)\n'}
[7.518551] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:211:36]: Replace [] with [                            \\\\n  ]\n'}
[7.518637] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.518716] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_ERROR(format, ...)                             \\\n'}
[7.518793] (ldlidar_component) StdoutLine: {'line': b'7: +     do {} while(0)\n'}
[7.518869] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:211:43]: Replace [] with [ ]\n'}
[7.518946] (ldlidar_component) StdoutLine: {'line': b'7: - #define  LDS_LOG_ERROR(format, ...)   do {} while(0)\n'}
[7.519021] (ldlidar_component) StdoutLine: {'line': b'7: + #define  LDS_LOG_ERROR(format, ...)   do {}  while(0)\n'}
[7.519096] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:212:1]: Replace [en] with [ ]\n'}
[7.519170] (ldlidar_component) StdoutLine: {'line': b'7: - #endif\n'}
[7.519352] (ldlidar_component) StdoutLine: {'line': b'7: + # dif\n'}
[7.519477] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:214:20]: Replace [GGER] with [ \\\\n  ]\n'}
[7.519554] (ldlidar_component) StdoutLine: {'line': b'7: - #endif//__LDLIDAR_LOGGER_H__\n'}
[7.519627] (ldlidar_component) StdoutLine: {'line': b'7: + #endif//__LDLIDAR_LO \\\n'}
[7.519699] (ldlidar_component) StdoutLine: {'line': b'7: +   _H__\n'}
[7.519773] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:214:28]: Replace [] with [                            \\\\n  ]\n'}
[7.519847] (ldlidar_component) StdoutLine: {'line': b'7: - #endif//__LDLIDAR_LOGGER_H__\n'}
[7.519921] (ldlidar_component) StdoutLine: {'line': b'7: + #endif//__LDLIDAR_LOGGER_H__                            \\\n'}
[7.519994] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.520066] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:215:6]: Replace [] with [ ]\n'}
[7.520139] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/\n'}
[7.520273] (ldlidar_component) StdoutLine: {'line': b'7: + /***** **************** (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/\n'}
[7.520482] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:215:17]: Replace [**] with [ ]\n'}
[7.520561] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/\n'}
[7.520635] (ldlidar_component) StdoutLine: {'line': b'7: + /**************** *** (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/\n'}
[7.520708] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:215:45]: Replace [ LD] with [ \\\\n  ]\n'}
[7.520781] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/\n'}
[7.520903] (ldlidar_component) StdoutLine: {'line': b'7: + /********************* (C) COPYRIGHT SHENZHEN \\\n'}
[7.520985] (ldlidar_component) StdoutLine: {'line': b'7: +   ROBOT CO., LTD *******END OF FILE ********/\n'}
[7.521060] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:215:52]: Replace [] with [                             \\\\n  ]\n'}
[7.521134] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/\n'}
[7.521259] (ldlidar_component) StdoutLine: {'line': b'7: + /********************* (C) COPYRIGHT SHENZHEN LDROBO                             \\\n'}
[7.521424] (ldlidar_component) StdoutLine: {'line': b'7: +   T CO., LTD *******END OF FILE ********/\n'}
[7.521501] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:215:59]: Replace [] with [ ]\n'}
[7.521576] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/\n'}
[7.521649] (ldlidar_component) StdoutLine: {'line': b'7: + /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO.,  LTD *******END OF FILE ********/\n'}
[7.521722] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/logger/log_module.h:215:77]: Replace [] with [  ]\n'}
[7.521795] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/\n'}
[7.521869] (ldlidar_component) StdoutLine: {'line': b'7: + /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF   FILE ********/\n'}
[7.521942] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.522014] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/include/networkcom/network_socket_interface_linux.h':\n"}
[7.522173] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.522385] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:23:0]: Replace [#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <stdint.h>\\n\\n#include <sys/types.h>\\n#include <sys/socket.h>\\n#include <netinet/in.h>\\n#include <arpa/inet.h>\\n\\n#include <sys/select.h>\\n#include <sys/time.h>\\n#include <unistd.h>\\n\\n#include <iostream>\\n#include <atomic>\\n#include <condition_variable>\\n#include <functional>\\n#include <mutex>\\n#include <string>\\n#include <thread>\\n#include <vector>] with [#include <arpa/inet.h>\\n#include <netinet/in.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <sys/select.h>\\n#include <sys/socket.h>\\n#include <sys/time.h>\\n#include <sys/types.h>\\n#include <unistd.h>\\n\\n#include <atomic>\\n#include <condition_variable>\\n#include <functional>\\n#include <iostream>\\n#include <mutex>\\n#include <string>\\n#include <thread>\\n#include <vector>]\n'}
[7.522524] (ldlidar_component) StdoutLine: {'line': b'7: - #include <stdio.h>\n'}
[7.522599] (ldlidar_component) StdoutLine: {'line': b'7: - #include <stdlib.h>\n'}
[7.522672] (ldlidar_component) StdoutLine: {'line': b'7: - #include <string.h>\n'}
[7.522803] (ldlidar_component) StdoutLine: {'line': b'7: - #include <stdint.h>\n'}
[7.522877] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.522949] (ldlidar_component) StdoutLine: {'line': b'7: - #include <sys/types.h>\n'}
[7.523021] (ldlidar_component) StdoutLine: {'line': b'7: - #include <sys/socket.h>\n'}
[7.523092] (ldlidar_component) StdoutLine: {'line': b'7: - #include <netinet/in.h>\n'}
[7.523164] (ldlidar_component) StdoutLine: {'line': b'7: - #include <arpa/inet.h>\n'}
[7.523383] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.523511] (ldlidar_component) StdoutLine: {'line': b'7: - #include <sys/select.h>\n'}
[7.523584] (ldlidar_component) StdoutLine: {'line': b'7: - #include <sys/time.h>\n'}
[7.523656] (ldlidar_component) StdoutLine: {'line': b'7: - #include <unistd.h>\n'}
[7.523729] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.523802] (ldlidar_component) StdoutLine: {'line': b'7: - #include <iostream>\n'}
[7.523874] (ldlidar_component) StdoutLine: {'line': b'7: - #include <atomic>\n'}
[7.523946] (ldlidar_component) StdoutLine: {'line': b'7: - #include <condition_variable>\n'}
[7.524018] (ldlidar_component) StdoutLine: {'line': b'7: - #include <functional>\n'}
[7.524090] (ldlidar_component) StdoutLine: {'line': b'7: - #include <mutex>\n'}
[7.524163] (ldlidar_component) StdoutLine: {'line': b'7: - #include <string>\n'}
[7.524374] (ldlidar_component) StdoutLine: {'line': b'7: - #include <thread>\n'}
[7.524504] (ldlidar_component) StdoutLine: {'line': b'7: - #include <vector>\n'}
[7.524578] (ldlidar_component) StdoutLine: {'line': b'7: + #include <arpa/inet.h>\n'}
[7.524651] (ldlidar_component) StdoutLine: {'line': b'7: + #include <netinet/in.h>\n'}
[7.524722] (ldlidar_component) StdoutLine: {'line': b'7: + #include <stdint.h>\n'}
[7.524795] (ldlidar_component) StdoutLine: {'line': b'7: + #include <stdio.h>\n'}
[7.524867] (ldlidar_component) StdoutLine: {'line': b'7: + #include <stdlib.h>\n'}
[7.524938] (ldlidar_component) StdoutLine: {'line': b'7: + #include <string.h>\n'}
[7.525009] (ldlidar_component) StdoutLine: {'line': b'7: + #include <sys/select.h>\n'}
[7.525080] (ldlidar_component) StdoutLine: {'line': b'7: + #include <sys/socket.h>\n'}
[7.525151] (ldlidar_component) StdoutLine: {'line': b'7: + #include <sys/time.h>\n'}
[7.525368] (-) TimerEvent: {}
[7.525538] (ldlidar_component) StdoutLine: {'line': b'7: + #include <sys/types.h>\n'}
[7.525673] (ldlidar_component) StdoutLine: {'line': b'7: + #include <unistd.h>\n'}
[7.525758] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.525834] (ldlidar_component) StdoutLine: {'line': b'7: + #include <atomic>\n'}
[7.525908] (ldlidar_component) StdoutLine: {'line': b'7: + #include <condition_variable>\n'}
[7.525982] (ldlidar_component) StdoutLine: {'line': b'7: + #include <functional>\n'}
[7.526056] (ldlidar_component) StdoutLine: {'line': b'7: + #include <iostream>\n'}
[7.526129] (ldlidar_component) StdoutLine: {'line': b'7: + #include <mutex>\n'}
[7.526217] (ldlidar_component) StdoutLine: {'line': b'7: + #include <string>\n'}
[7.526401] (ldlidar_component) StdoutLine: {'line': b'7: + #include <thread>\n'}
[7.526477] (ldlidar_component) StdoutLine: {'line': b'7: + #include <vector>\n'}
[7.526551] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:46:17]: Replace [ ] with [\\n]\n'}
[7.526625] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.526698] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar\n'}
[7.526771] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.526844] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:46:19]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.526918] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.526990] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.527063] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef enum NetworkCommDevEnum\n'}
[7.527136] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar {\n'}
[7.527285] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.527371] (ldlidar_component) StdoutLine: {'line': b'7: + typedef enum NetworkCommDevEnum\n'}
[7.527446] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:48:33]: Replace [\\n  ] with [ ]\n'}
[7.527522] (ldlidar_component) StdoutLine: {'line': b'7: -   typedef enum NetworkCommDevEnum\n'}
[7.527595] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.527668] (ldlidar_component) StdoutLine: {'line': b'7: +   typedef enum NetworkCommDevEnum {\n'}
[7.527742] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:49:3]: Replace [\\n    ] with [\\n  ]\n'}
[7.527893] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.527972] (ldlidar_component) StdoutLine: {'line': b'7: -     NET_NULL,\n'}
[7.528046] (ldlidar_component) StdoutLine: {'line': b'7: +   {\n'}
[7.528119] (ldlidar_component) StdoutLine: {'line': b'7: +   NET_NULL,\n'}
[7.528199] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:50:13]: Replace [\\n    ] with [\\n  ]\n'}
[7.528591] (ldlidar_component) StdoutLine: {'line': b'7: -     NET_NULL,\n'}
[7.528671] (ldlidar_component) StdoutLine: {'line': b'7: -     UDP_SERVER,\n'}
[7.528746] (ldlidar_component) StdoutLine: {'line': b'7: +     NET_NULL,\n'}
[7.528820] (ldlidar_component) StdoutLine: {'line': b'7: +   UDP_SERVER,\n'}
[7.528893] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:51:15]: Replace [\\n    ] with [\\n  ]\n'}
[7.528968] (ldlidar_component) StdoutLine: {'line': b'7: -     UDP_SERVER,\n'}
[7.529041] (ldlidar_component) StdoutLine: {'line': b'7: -     UDP_CLIENT,\n'}
[7.529113] (ldlidar_component) StdoutLine: {'line': b'7: +     UDP_SERVER,\n'}
[7.529192] (ldlidar_component) StdoutLine: {'line': b'7: +   UDP_CLIENT,\n'}
[7.529340] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:52:15]: Replace [\\n    ] with [\\n  ]\n'}
[7.529421] (ldlidar_component) StdoutLine: {'line': b'7: -     UDP_CLIENT,\n'}
[7.529496] (ldlidar_component) StdoutLine: {'line': b'7: -     TCP_SERVER,\n'}
[7.529569] (ldlidar_component) StdoutLine: {'line': b'7: +     UDP_CLIENT,\n'}
[7.529642] (ldlidar_component) StdoutLine: {'line': b'7: +   TCP_SERVER,\n'}
[7.529715] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:53:15]: Replace [\\n    ] with [\\n  ]\n'}
[7.529789] (ldlidar_component) StdoutLine: {'line': b'7: -     TCP_SERVER,\n'}
[7.529862] (ldlidar_component) StdoutLine: {'line': b'7: -     TCP_CLIENT\n'}
[7.529934] (ldlidar_component) StdoutLine: {'line': b'7: +     TCP_SERVER,\n'}
[7.530007] (ldlidar_component) StdoutLine: {'line': b'7: +   TCP_CLIENT\n'}
[7.530081] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:54:14]: Replace [\\n  ] with [\\n]\n'}
[7.530155] (ldlidar_component) StdoutLine: {'line': b'7: -     TCP_CLIENT\n'}
[7.530255] (ldlidar_component) StdoutLine: {'line': b'7: -   } NetCommDevTypeDef;\n'}
[7.530338] (ldlidar_component) StdoutLine: {'line': b'7: +     TCP_CLIENT\n'}
[7.530415] (ldlidar_component) StdoutLine: {'line': b'7: + } NetCommDevTypeDef;\n'}
[7.530489] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:55:22]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.530564] (ldlidar_component) StdoutLine: {'line': b'7: -   } NetCommDevTypeDef;\n'}
[7.530637] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.530710] (ldlidar_component) StdoutLine: {'line': b'7: -   class UDPSocketInterfaceLinux {\n'}
[7.530784] (ldlidar_component) StdoutLine: {'line': b'7: +   } NetCommDevTypeDef;\n'}
[7.530857] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.530929] (ldlidar_component) StdoutLine: {'line': b'7: + class UDPSocketInterfaceLinux {\n'}
[7.531028] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:57:31]: Replace [ ] with [\\n]\n'}
[7.531104] (ldlidar_component) StdoutLine: {'line': b'7: -   class UDPSocketInterfaceLinux {\n'}
[7.531178] (ldlidar_component) StdoutLine: {'line': b'7: +   class UDPSocketInterfaceLinux\n'}
[7.531399] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.531547] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:58:7]: Replace [\\n    ] with [\\n  ]\n'}
[7.531625] (ldlidar_component) StdoutLine: {'line': b'7: - public:\n'}
[7.531698] (ldlidar_component) StdoutLine: {'line': b'7: -     UDPSocketInterfaceLinux();\n'}
[7.531771] (ldlidar_component) StdoutLine: {'line': b'7: + public:\n'}
[7.531843] (ldlidar_component) StdoutLine: {'line': b'7: +   UDPSocketInterfaceLinux();\n'}
[7.531916] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:59:30]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.531990] (ldlidar_component) StdoutLine: {'line': b'7: -     UDPSocketInterfaceLinux();\n'}
[7.532062] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.532135] (ldlidar_component) StdoutLine: {'line': b'7: -     ~UDPSocketInterfaceLinux();\n'}
[7.532262] (ldlidar_component) StdoutLine: {'line': b'7: +     UDPSocketInterfaceLinux();\n'}
[7.532459] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.532534] (ldlidar_component) StdoutLine: {'line': b'7: +   ~UDPSocketInterfaceLinux();\n'}
[7.532608] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:61:31]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.532682] (ldlidar_component) StdoutLine: {'line': b'7: -     ~UDPSocketInterfaceLinux();\n'}
[7.532755] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.532827] (ldlidar_component) StdoutLine: {'line': b'7: -     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);\n'}
[7.532901] (ldlidar_component) StdoutLine: {'line': b'7: +     ~UDPSocketInterfaceLinux();\n'}
[7.532974] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.533046] (ldlidar_component) StdoutLine: {'line': b'7: +   bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);\n'}
[7.533120] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:63:81]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.533201] (ldlidar_component) StdoutLine: {'line': b'7: -     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);\n'}
[7.533412] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.533491] (ldlidar_component) StdoutLine: {'line': b'7: -     bool CloseSocket();\n'}
[7.533564] (ldlidar_component) StdoutLine: {'line': b'7: +     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);\n'}
[7.533638] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.533710] (ldlidar_component) StdoutLine: {'line': b'7: +   bool CloseSocket();\n'}
[7.533782] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:65:23]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.533855] (ldlidar_component) StdoutLine: {'line': b'7: -     bool CloseSocket();\n'}
[7.533927] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.533998] (ldlidar_component) StdoutLine: {'line': b'7: -     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);\n'}
[7.534071] (ldlidar_component) StdoutLine: {'line': b'7: +     bool CloseSocket();\n'}
[7.534142] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.534306] (ldlidar_component) StdoutLine: {'line': b'7: +   bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);\n'}
[7.534467] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:67:79]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.534621] (ldlidar_component) StdoutLine: {'line': b'7: -     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);\n'}
[7.534703] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.534777] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.534851] (ldlidar_component) StdoutLine: {'line': b'7: +     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);\n'}
[7.534924] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.534996] (ldlidar_component) StdoutLine: {'line': b'7: +   void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.535070] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:69:38]: Replace [ ] with []\n'}
[7.535144] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.535312] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetRecvCallback(std::function< void(const char *, size_t length) > callback);\n'}
[7.535462] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:69:40]: Replace [ ] with []\n'}
[7.535555] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.535630] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetRecvCallback(std::function <void(const char *, size_t length) > callback);\n'}
[7.535704] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:69:74]: Replace [ ] with []\n'}
[7.535778] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.535852] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetRecvCallback(std::function < void(const char *, size_t length)> callback);\n'}
[7.535928] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:69:87]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.536003] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.536076] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.536148] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsClientAck() {return is_server_recv_ack_flag_.load();}\n'}
[7.536298] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.536454] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.536528] (ldlidar_component) StdoutLine: {'line': b'7: +   bool IsClientAck() {return is_server_recv_ack_flag_.load();}\n'}
[7.536601] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:71:24]: Replace [] with [ ]\n'}
[7.536674] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsClientAck() {return is_server_recv_ack_flag_.load();}\n'}
[7.536746] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsClientAck() { return is_server_recv_ack_flag_.load();}\n'}
[7.536818] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:71:63]: Replace [] with [ ]\n'}
[7.536891] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsClientAck() {return is_server_recv_ack_flag_.load();}\n'}
[7.536963] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsClientAck() {return is_server_recv_ack_flag_.load(); }\n'}
[7.537034] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:73:8]: Replace [\\n    ] with [\\n  ]\n'}
[7.537107] (ldlidar_component) StdoutLine: {'line': b'7: - private:\n'}
[7.537178] (ldlidar_component) StdoutLine: {'line': b'7: -     std::thread * recv_thread_;\n'}
[7.537445] (ldlidar_component) StdoutLine: {'line': b'7: + private:\n'}
[7.537527] (ldlidar_component) StdoutLine: {'line': b'7: +   std::thread * recv_thread_;\n'}
[7.537600] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:74:31]: Replace [\\n    ] with [\\n  ]\n'}
[7.537764] (ldlidar_component) StdoutLine: {'line': b'7: -     std::thread * recv_thread_;\n'}
[7.537840] (ldlidar_component) StdoutLine: {'line': b'7: -     long long recv_count_;\n'}
[7.537915] (ldlidar_component) StdoutLine: {'line': b'7: +     std::thread * recv_thread_;\n'}
[7.537987] (ldlidar_component) StdoutLine: {'line': b'7: +   long long recv_count_;\n'}
[7.538060] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:75:26]: Replace [\\n    ] with [\\n  ]\n'}
[7.538134] (ldlidar_component) StdoutLine: {'line': b'7: -     long long recv_count_;\n'}
[7.538256] (ldlidar_component) StdoutLine: {'line': b'7: -     int32_t com_sockfd_;\n'}
[7.538439] (ldlidar_component) StdoutLine: {'line': b'7: +     long long recv_count_;\n'}
[7.538514] (ldlidar_component) StdoutLine: {'line': b'7: +   int32_t com_sockfd_;\n'}
[7.538588] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:76:24]: Replace [\\n    ] with [\\n  ]\n'}
[7.538662] (ldlidar_component) StdoutLine: {'line': b'7: -     int32_t com_sockfd_;\n'}
[7.538734] (ldlidar_component) StdoutLine: {'line': b'7: -     NetCommDevTypeDef ncd_;\n'}
[7.538806] (ldlidar_component) StdoutLine: {'line': b'7: +     int32_t com_sockfd_;\n'}
[7.538878] (ldlidar_component) StdoutLine: {'line': b'7: +   NetCommDevTypeDef ncd_;\n'}
[7.538950] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:77:27]: Replace [\\n    ] with [\\n  ]\n'}
[7.539023] (ldlidar_component) StdoutLine: {'line': b'7: -     NetCommDevTypeDef ncd_;\n'}
[7.539095] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.539168] (ldlidar_component) StdoutLine: {'line': b'7: +     NetCommDevTypeDef ncd_;\n'}
[7.539345] (ldlidar_component) StdoutLine: {'line': b'7: +   std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.539444] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:78:15]: Replace [ ] with []\n'}
[7.539528] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.539605] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic< bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.539679] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:78:17]: Replace [ ] with []\n'}
[7.539752] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.539826] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic <bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.539899] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:78:22]: Replace [ ] with []\n'}
[7.539972] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.540045] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic < bool> is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.540120] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:78:91]: Replace [\\n    ] with [\\n  ]\n'}
[7.540200] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.540340] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.540420] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;\n'}
[7.540495] (ldlidar_component) StdoutLine: {'line': b'7: +   std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.540569] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:79:17]: Replace [ ] with []\n'}
[7.540644] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.540718] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function< void(const char *, size_t length) > recv_callback_;\n'}
[7.540793] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:79:19]: Replace [ ] with []\n'}
[7.540866] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.540939] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function <void(const char *, size_t length) > recv_callback_;\n'}
[7.541012] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:79:53]: Replace [ ] with []\n'}
[7.541086] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.541159] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < void(const char *, size_t length)> recv_callback_;\n'}
[7.541331] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:79:71]: Replace [\\n    ] with [\\n  ]\n'}
[7.541417] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.541492] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string server_ip_, server_port_;\n'}
[7.541565] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.541639] (ldlidar_component) StdoutLine: {'line': b'7: +   std::string server_ip_, server_port_;\n'}
[7.541711] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:80:41]: Replace [\\n    ] with [\\n  ]\n'}
[7.541785] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string server_ip_, server_port_;\n'}
[7.541858] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string client_ip_, client_port_;\n'}
[7.541931] (ldlidar_component) StdoutLine: {'line': b'7: +     std::string server_ip_, server_port_;\n'}
[7.542004] (ldlidar_component) StdoutLine: {'line': b'7: +   std::string client_ip_, client_port_;\n'}
[7.542077] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:81:41]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.542151] (ldlidar_component) StdoutLine: {'line': b'7: -     std::string client_ip_, client_port_;\n'}
[7.542276] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.542567] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.542644] (ldlidar_component) StdoutLine: {'line': b'7: +     std::string client_ip_, client_port_;\n'}
[7.542718] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.542792] (ldlidar_component) StdoutLine: {'line': b'7: +   bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.542867] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:83:22]: Replace [] with [ ]\n'}
[7.542968] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.543039] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsCreated() { return is_cmd_created_.load();}\n'}
[7.543136] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:83:52]: Replace [] with [ ]\n'}
[7.543229] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.543352] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsCreated() {return is_cmd_created_.load(); }\n'}
[7.543427] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:83:53]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.543501] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.543574] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.543648] (ldlidar_component) StdoutLine: {'line': b'7: -     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);\n'}
[7.543741] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.543832] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.543905] (ldlidar_component) StdoutLine: {'line': b'7: +   bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);\n'}
[7.543978] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:85:80]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.544051] (ldlidar_component) StdoutLine: {'line': b'7: -     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);\n'}
[7.544124] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.544203] (ldlidar_component) StdoutLine: {'line': b'7: -     static void RecvThreadProc(void * param);\n'}
[7.544315] (ldlidar_component) StdoutLine: {'line': b'7: +     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);\n'}
[7.544393] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.544466] (ldlidar_component) StdoutLine: {'line': b'7: +   static void RecvThreadProc(void * param);\n'}
[7.544540] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:87:45]: Replace [\\n  ] with [\\n]\n'}
[7.544614] (ldlidar_component) StdoutLine: {'line': b'7: -     static void RecvThreadProc(void * param);\n'}
[7.544687] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.544759] (ldlidar_component) StdoutLine: {'line': b'7: +     static void RecvThreadProc(void * param);\n'}
[7.544832] (ldlidar_component) StdoutLine: {'line': b'7: + };\n'}
[7.544905] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:88:4]: Replace [\\n\\n\\n  ] with [\\n\\n]\n'}
[7.544978] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.545050] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.545123] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.545202] (ldlidar_component) StdoutLine: {'line': b'7: -   class TCPSocketInterfaceLinux {\n'}
[7.545314] (ldlidar_component) StdoutLine: {'line': b'7: +   };\n'}
[7.545405] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.545480] (ldlidar_component) StdoutLine: {'line': b'7: + class TCPSocketInterfaceLinux {\n'}
[7.545554] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:91:31]: Replace [ ] with [\\n]\n'}
[7.545628] (ldlidar_component) StdoutLine: {'line': b'7: -   class TCPSocketInterfaceLinux {\n'}
[7.545700] (ldlidar_component) StdoutLine: {'line': b'7: +   class TCPSocketInterfaceLinux\n'}
[7.545773] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.545844] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:92:7]: Replace [\\n    ] with [\\n  ]\n'}
[7.545915] (ldlidar_component) StdoutLine: {'line': b'7: - public:\n'}
[7.545987] (ldlidar_component) StdoutLine: {'line': b'7: -     TCPSocketInterfaceLinux();\n'}
[7.546058] (ldlidar_component) StdoutLine: {'line': b'7: + public:\n'}
[7.546139] (ldlidar_component) StdoutLine: {'line': b'7: +   TCPSocketInterfaceLinux();\n'}
[7.546567] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:93:30]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.546711] (ldlidar_component) StdoutLine: {'line': b'7: -     TCPSocketInterfaceLinux();\n'}
[7.546789] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.546864] (ldlidar_component) StdoutLine: {'line': b'7: -     ~TCPSocketInterfaceLinux();\n'}
[7.546937] (ldlidar_component) StdoutLine: {'line': b'7: +     TCPSocketInterfaceLinux();\n'}
[7.547011] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.547085] (ldlidar_component) StdoutLine: {'line': b'7: +   ~TCPSocketInterfaceLinux();\n'}
[7.547159] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:95:31]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.547303] (ldlidar_component) StdoutLine: {'line': b'7: -     ~TCPSocketInterfaceLinux();\n'}
[7.547413] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.547489] (ldlidar_component) StdoutLine: {'line': b'7: -     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);\n'}
[7.547564] (ldlidar_component) StdoutLine: {'line': b'7: +     ~TCPSocketInterfaceLinux();\n'}
[7.547638] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.547711] (ldlidar_component) StdoutLine: {'line': b'7: +   bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);\n'}
[7.547785] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:97:81]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.547859] (ldlidar_component) StdoutLine: {'line': b'7: -     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);\n'}
[7.547933] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.548006] (ldlidar_component) StdoutLine: {'line': b'7: -     bool CloseSocket();\n'}
[7.548078] (ldlidar_component) StdoutLine: {'line': b'7: +     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);\n'}
[7.548151] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.548281] (ldlidar_component) StdoutLine: {'line': b'7: +   bool CloseSocket();\n'}
[7.548375] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:99:23]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.548450] (ldlidar_component) StdoutLine: {'line': b'7: -     bool CloseSocket();\n'}
[7.548523] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.548595] (ldlidar_component) StdoutLine: {'line': b'7: -     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);\n'}
[7.548668] (ldlidar_component) StdoutLine: {'line': b'7: +     bool CloseSocket();\n'}
[7.548740] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.548812] (ldlidar_component) StdoutLine: {'line': b'7: +   bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);\n'}
[7.548885] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:101:79]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.548959] (ldlidar_component) StdoutLine: {'line': b'7: -     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);\n'}
[7.549035] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.549107] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.549180] (ldlidar_component) StdoutLine: {'line': b'7: +     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);\n'}
[7.549340] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.549419] (ldlidar_component) StdoutLine: {'line': b'7: +   void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.549494] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:103:38]: Replace [ ] with []\n'}
[7.549579] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.549654] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetRecvCallback(std::function< void(const char *, size_t length) > callback);\n'}
[7.549761] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:103:40]: Replace [ ] with []\n'}
[7.549839] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.549914] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetRecvCallback(std::function <void(const char *, size_t length) > callback);\n'}
[7.549988] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:103:74]: Replace [ ] with []\n'}
[7.550061] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);\n'}
[7.550135] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetRecvCallback(std::function < void(const char *, size_t length)> callback);\n'}
[7.550230] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:105:8]: Replace [\\n    ] with [\\n  ]\n'}
[7.550356] (ldlidar_component) StdoutLine: {'line': b'7: - private:\n'}
[7.550434] (ldlidar_component) StdoutLine: {'line': b'7: -     std::thread * recv_thread_;\n'}
[7.550509] (ldlidar_component) StdoutLine: {'line': b'7: + private:\n'}
[7.550582] (ldlidar_component) StdoutLine: {'line': b'7: +   std::thread * recv_thread_;\n'}
[7.550655] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:106:31]: Replace [\\n    ] with [\\n  ]\n'}
[7.550728] (ldlidar_component) StdoutLine: {'line': b'7: -     std::thread * recv_thread_;\n'}
[7.550800] (ldlidar_component) StdoutLine: {'line': b'7: -     long long recv_count_;\n'}
[7.550873] (ldlidar_component) StdoutLine: {'line': b'7: +     std::thread * recv_thread_;\n'}
[7.550945] (ldlidar_component) StdoutLine: {'line': b'7: +   long long recv_count_;\n'}
[7.551017] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:107:26]: Replace [\\n    ] with [\\n  ]\n'}
[7.551090] (ldlidar_component) StdoutLine: {'line': b'7: -     long long recv_count_;\n'}
[7.551162] (ldlidar_component) StdoutLine: {'line': b'7: -     int32_t com_sockfd_;\n'}
[7.551300] (ldlidar_component) StdoutLine: {'line': b'7: +     long long recv_count_;\n'}
[7.551392] (ldlidar_component) StdoutLine: {'line': b'7: +   int32_t com_sockfd_;\n'}
[7.551468] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:108:24]: Replace [\\n    ] with [\\n  ]\n'}
[7.551542] (ldlidar_component) StdoutLine: {'line': b'7: -     int32_t com_sockfd_;\n'}
[7.551615] (ldlidar_component) StdoutLine: {'line': b'7: -     int32_t listend_client_sockfd_; //// server model used\n'}
[7.551689] (ldlidar_component) StdoutLine: {'line': b'7: +     int32_t com_sockfd_;\n'}
[7.551762] (ldlidar_component) StdoutLine: {'line': b'7: +   int32_t listend_client_sockfd_; //// server model used\n'}
[7.551835] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:109:35]: Replace [ ] with [  ]\n'}
[7.551909] (ldlidar_component) StdoutLine: {'line': b'7: -     int32_t listend_client_sockfd_; //// server model used\n'}
[7.551982] (ldlidar_component) StdoutLine: {'line': b'7: +     int32_t listend_client_sockfd_;  //// server model used\n'}
[7.552055] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:109:58]: Replace [\\n    ] with [\\n  ]\n'}
[7.552128] (ldlidar_component) StdoutLine: {'line': b'7: -     int32_t listend_client_sockfd_; //// server model used\n'}
[7.552212] (ldlidar_component) StdoutLine: {'line': b'7: -     NetCommDevTypeDef ncd_;\n'}
[7.552334] (ldlidar_component) StdoutLine: {'line': b'7: +     int32_t listend_client_sockfd_; //// server model used\n'}
[7.552411] (ldlidar_component) StdoutLine: {'line': b'7: +   NetCommDevTypeDef ncd_;\n'}
[7.552484] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:110:27]: Replace [\\n    ] with [\\n  ]\n'}
[7.552558] (ldlidar_component) StdoutLine: {'line': b'7: -     NetCommDevTypeDef ncd_;\n'}
[7.552630] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.552704] (ldlidar_component) StdoutLine: {'line': b'7: +     NetCommDevTypeDef ncd_;\n'}
[7.552776] (ldlidar_component) StdoutLine: {'line': b'7: +   std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.552850] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:111:15]: Replace [ ] with []\n'}
[7.552924] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.552996] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic< bool > is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.553068] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:111:17]: Replace [ ] with []\n'}
[7.553141] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.553261] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic <bool > is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.553391] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:111:22]: Replace [ ] with []\n'}
[7.553467] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.553541] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic < bool> is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.553615] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:111:65]: Replace [\\n    ] with [\\n  ]\n'}
[7.553689] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.553762] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.553835] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;\n'}
[7.553908] (ldlidar_component) StdoutLine: {'line': b'7: +   std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.553982] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:112:17]: Replace [ ] with []\n'}
[7.554063] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.554140] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function< void(const char *, size_t length) > recv_callback_;\n'}
[7.554243] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:112:19]: Replace [ ] with []\n'}
[7.554359] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.554435] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function <void(const char *, size_t length) > recv_callback_;\n'}
[7.554509] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:112:53]: Replace [ ] with []\n'}
[7.554609] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.554685] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < void(const char *, size_t length)> recv_callback_;\n'}
[7.554766] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:112:71]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.554841] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.554913] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.554985] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.555058] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < void(const char *, size_t length) > recv_callback_;\n'}
[7.555130] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.555221] (ldlidar_component) StdoutLine: {'line': b'7: +   bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.555345] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:114:22]: Replace [] with [ ]\n'}
[7.555422] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.555497] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsCreated() { return is_cmd_created_.load();}\n'}
[7.555570] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:114:52]: Replace [] with [ ]\n'}
[7.555644] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.555716] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsCreated() {return is_cmd_created_.load(); }\n'}
[7.555789] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:114:53]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.555862] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.555935] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.556007] (ldlidar_component) StdoutLine: {'line': b'7: -     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);\n'}
[7.556081] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsCreated() {return is_cmd_created_.load();}\n'}
[7.556154] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.556281] (ldlidar_component) StdoutLine: {'line': b'7: +   bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);\n'}
[7.556377] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:116:80]: Replace [\\n\\n    ] with [\\n\\n  ]\n'}
[7.556454] (ldlidar_component) StdoutLine: {'line': b'7: -     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);\n'}
[7.556529] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.556602] (ldlidar_component) StdoutLine: {'line': b'7: -     static void RecvThreadProc(void * param);\n'}
[7.556675] (ldlidar_component) StdoutLine: {'line': b'7: +     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);\n'}
[7.556748] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.556820] (ldlidar_component) StdoutLine: {'line': b'7: +   static void RecvThreadProc(void * param);\n'}
[7.556892] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:118:45]: Replace [\\n  ] with [\\n]\n'}
[7.556966] (ldlidar_component) StdoutLine: {'line': b'7: -     static void RecvThreadProc(void * param);\n'}
[7.557038] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.557110] (ldlidar_component) StdoutLine: {'line': b'7: +     static void RecvThreadProc(void * param);\n'}
[7.557182] (ldlidar_component) StdoutLine: {'line': b'7: + };\n'}
[7.557322] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:121:1]: Replace [ ] with [  ]\n'}
[7.557401] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.557475] (ldlidar_component) StdoutLine: {'line': b'7: + }  // namespace ldlidar\n'}
[7.557557] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:122:6]: Replace [ ] with [  ]\n'}
[7.557631] (ldlidar_component) StdoutLine: {'line': b'7: - #endif //  __SOCKET_INTERFACE_LINUX_H__\n'}
[7.557704] (ldlidar_component) StdoutLine: {'line': b'7: + #endif  //  __SOCKET_INTERFACE_LINUX_H__\n'}
[7.557776] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.557849] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/include/serialcom/serial_interface_linux.h':\n"}
[7.557923] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.557995] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:23:0]: Replace [#include <inttypes.h>\\n#include <errno.h>\\n#include <fcntl.h>\\n#include <memory.h>\\n#include <string.h>\\n#include <sys/file.h>\\n#include <sys/ioctl.h>] with [#include <errno.h>\\n#include <fcntl.h>\\n#include <inttypes.h>\\n#include <memory.h>\\n#include <string.h>\\n#include <sys/file.h>\\n#include <sys/ioctl.h>]\n'}
[7.558075] (ldlidar_component) StdoutLine: {'line': b'7: - #include <inttypes.h>\n'}
[7.558149] (ldlidar_component) StdoutLine: {'line': b'7: - #include <errno.h>\n'}
[7.558279] (ldlidar_component) StdoutLine: {'line': b'7: - #include <fcntl.h>\n'}
[7.558393] (ldlidar_component) StdoutLine: {'line': b'7: - #include <memory.h>\n'}
[7.558470] (ldlidar_component) StdoutLine: {'line': b'7: - #include <string.h>\n'}
[7.558544] (ldlidar_component) StdoutLine: {'line': b'7: - #include <sys/file.h>\n'}
[7.558617] (ldlidar_component) StdoutLine: {'line': b'7: - #include <sys/ioctl.h>\n'}
[7.558698] (ldlidar_component) StdoutLine: {'line': b'7: + #include <errno.h>\n'}
[7.558773] (ldlidar_component) StdoutLine: {'line': b'7: + #include <fcntl.h>\n'}
[7.558845] (ldlidar_component) StdoutLine: {'line': b'7: + #include <inttypes.h>\n'}
[7.558918] (ldlidar_component) StdoutLine: {'line': b'7: + #include <memory.h>\n'}
[7.558990] (ldlidar_component) StdoutLine: {'line': b'7: + #include <string.h>\n'}
[7.559062] (ldlidar_component) StdoutLine: {'line': b'7: + #include <sys/file.h>\n'}
[7.559134] (ldlidar_component) StdoutLine: {'line': b'7: + #include <sys/ioctl.h>\n'}
[7.559228] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:30:20]: Replace [ ] with [\\n]\n'}
[7.559357] (ldlidar_component) StdoutLine: {'line': b'7: - namespace asmtermios {\n'}
[7.559431] (ldlidar_component) StdoutLine: {'line': b'7: + namespace asmtermios\n'}
[7.559505] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.559577] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:33:0]: Replace [#include <termios.h>\\n#include <unistd.h>\\n\\n#include <iostream>\\n#include <atomic>\\n#include <condition_variable>\\n#include <functional>\\n#include <mutex>\\n#include <string>\\n#include <thread>\\n#include <vector>] with [#include <termios.h>\\n#include <unistd.h>\\n\\n#include <atomic>\\n#include <condition_variable>\\n#include <functional>\\n#include <iostream>\\n#include <mutex>\\n#include <string>\\n#include <thread>\\n#include <vector>]\n'}
[7.559668] (ldlidar_component) StdoutLine: {'line': b'7: - #include <termios.h>\n'}
[7.559743] (ldlidar_component) StdoutLine: {'line': b'7: - #include <unistd.h>\n'}
[7.559815] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.559888] (ldlidar_component) StdoutLine: {'line': b'7: - #include <iostream>\n'}
[7.559960] (ldlidar_component) StdoutLine: {'line': b'7: - #include <atomic>\n'}
[7.560033] (ldlidar_component) StdoutLine: {'line': b'7: - #include <condition_variable>\n'}
[7.560135] (ldlidar_component) StdoutLine: {'line': b'7: - #include <functional>\n'}
[7.560232] (ldlidar_component) StdoutLine: {'line': b'7: - #include <mutex>\n'}
[7.560357] (ldlidar_component) StdoutLine: {'line': b'7: - #include <string>\n'}
[7.560433] (ldlidar_component) StdoutLine: {'line': b'7: - #include <thread>\n'}
[7.560508] (ldlidar_component) StdoutLine: {'line': b'7: - #include <vector>\n'}
[7.560591] (ldlidar_component) StdoutLine: {'line': b'7: + #include <termios.h>\n'}
[7.560665] (ldlidar_component) StdoutLine: {'line': b'7: + #include <unistd.h>\n'}
[7.560739] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.560813] (ldlidar_component) StdoutLine: {'line': b'7: + #include <atomic>\n'}
[7.560886] (ldlidar_component) StdoutLine: {'line': b'7: + #include <condition_variable>\n'}
[7.560960] (ldlidar_component) StdoutLine: {'line': b'7: + #include <functional>\n'}
[7.561033] (ldlidar_component) StdoutLine: {'line': b'7: + #include <iostream>\n'}
[7.561105] (ldlidar_component) StdoutLine: {'line': b'7: + #include <mutex>\n'}
[7.561178] (ldlidar_component) StdoutLine: {'line': b'7: + #include <string>\n'}
[7.561309] (ldlidar_component) StdoutLine: {'line': b'7: + #include <thread>\n'}
[7.561386] (ldlidar_component) StdoutLine: {'line': b'7: + #include <vector>\n'}
[7.561459] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:45:17]: Replace [ ] with [\\n]\n'}
[7.561533] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.561606] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar\n'}
[7.561679] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.561751] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:45:19]: Replace [\\n\\n  ] with [\\n\\n]\n'}
[7.561825] (ldlidar_component) StdoutLine: {'line': b'7: - namespace ldlidar {\n'}
[7.561898] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.561970] (ldlidar_component) StdoutLine: {'line': b'7: -   class SerialInterfaceLinux {\n'}
[7.562042] (ldlidar_component) StdoutLine: {'line': b'7: + namespace ldlidar {\n'}
[7.562115] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.562193] (ldlidar_component) StdoutLine: {'line': b'7: + class SerialInterfaceLinux {\n'}
[7.562343] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:47:28]: Replace [ ] with [\\n]\n'}
[7.562423] (ldlidar_component) StdoutLine: {'line': b'7: -   class SerialInterfaceLinux {\n'}
[7.562496] (ldlidar_component) StdoutLine: {'line': b'7: +   class SerialInterfaceLinux\n'}
[7.562570] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.562643] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:48:7]: Replace [\\n    ] with [\\n  ]\n'}
[7.562718] (ldlidar_component) StdoutLine: {'line': b'7: - public:\n'}
[7.562791] (ldlidar_component) StdoutLine: {'line': b'7: -     SerialInterfaceLinux();\n'}
[7.562864] (ldlidar_component) StdoutLine: {'line': b'7: + public:\n'}
[7.562938] (ldlidar_component) StdoutLine: {'line': b'7: +   SerialInterfaceLinux();\n'}
[7.563011] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:49:27]: Replace [\\n    ] with [\\n  ]\n'}
[7.563085] (ldlidar_component) StdoutLine: {'line': b'7: -     SerialInterfaceLinux();\n'}
[7.563158] (ldlidar_component) StdoutLine: {'line': b'7: -     ~SerialInterfaceLinux();\n'}
[7.563289] (ldlidar_component) StdoutLine: {'line': b'7: +     SerialInterfaceLinux();\n'}
[7.563382] (ldlidar_component) StdoutLine: {'line': b'7: +   ~SerialInterfaceLinux();\n'}
[7.563456] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:50:28]: Replace [\\n    ] with [\\n  ]\n'}
[7.563530] (ldlidar_component) StdoutLine: {'line': b'7: -     ~SerialInterfaceLinux();\n'}
[7.563602] (ldlidar_component) StdoutLine: {'line': b'7: -     // open serial port\n'}
[7.563674] (ldlidar_component) StdoutLine: {'line': b'7: +     ~SerialInterfaceLinux();\n'}
[7.563746] (ldlidar_component) StdoutLine: {'line': b'7: +   // open serial port\n'}
[7.563818] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:51:23]: Replace [\\n    ] with [\\n  ]\n'}
[7.563891] (ldlidar_component) StdoutLine: {'line': b'7: -     // open serial port\n'}
[7.563972] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Open(std::string & port_name, uint32_t com_baudrate);\n'}
[7.564045] (ldlidar_component) StdoutLine: {'line': b'7: +     // open serial port\n'}
[7.564117] (ldlidar_component) StdoutLine: {'line': b'7: +   bool Open(std::string & port_name, uint32_t com_baudrate);\n'}
[7.564196] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:52:62]: Replace [\\n    ] with [\\n  ]\n'}
[7.564338] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Open(std::string & port_name, uint32_t com_baudrate);\n'}
[7.564417] (ldlidar_component) StdoutLine: {'line': b'7: -     // close serial port\n'}
[7.564490] (ldlidar_component) StdoutLine: {'line': b'7: +     bool Open(std::string & port_name, uint32_t com_baudrate);\n'}
[7.564563] (ldlidar_component) StdoutLine: {'line': b'7: +   // close serial port\n'}
[7.564636] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:53:24]: Replace [\\n    ] with [\\n  ]\n'}
[7.564710] (ldlidar_component) StdoutLine: {'line': b'7: -     // close serial port\n'}
[7.564783] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Close();\n'}
[7.564856] (ldlidar_component) StdoutLine: {'line': b'7: +     // close serial port\n'}
[7.564929] (ldlidar_component) StdoutLine: {'line': b'7: +   bool Close();\n'}
[7.565002] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:54:17]: Replace [\\n    ] with [\\n  ]\n'}
[7.565083] (ldlidar_component) StdoutLine: {'line': b'7: -     bool Close();\n'}
[7.565159] (ldlidar_component) StdoutLine: {'line': b'7: -     // receive from port channel data\n'}
[7.565286] (ldlidar_component) StdoutLine: {'line': b'7: +     bool Close();\n'}
[7.565378] (ldlidar_component) StdoutLine: {'line': b'7: +   // receive from port channel data\n'}
[7.565453] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:55:37]: Replace [\\n    ] with [\\n  ]\n'}
[7.565527] (ldlidar_component) StdoutLine: {'line': b'7: -     // receive from port channel data\n'}
[7.565600] (ldlidar_component) StdoutLine: {'line': b'7: -     bool ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len);\n'}
[7.565674] (ldlidar_component) StdoutLine: {'line': b'7: +     // receive from port channel data\n'}
[7.565746] (ldlidar_component) StdoutLine: {'line': b'7: +   bool ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len);\n'}
[7.565820] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:56:78]: Replace [\\n    ] with [\\n  ]\n'}
[7.565893] (ldlidar_component) StdoutLine: {'line': b'7: -     bool ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len);\n'}
[7.565966] (ldlidar_component) StdoutLine: {'line': b'7: -     // transmit data to port channel\n'}
[7.566039] (ldlidar_component) StdoutLine: {'line': b'7: +     bool ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len);\n'}
[7.566112] (ldlidar_component) StdoutLine: {'line': b'7: +   // transmit data to port channel\n'}
[7.566191] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:57:36]: Replace [\\n    ] with [\\n  ]\n'}
[7.566328] (ldlidar_component) StdoutLine: {'line': b'7: -     // transmit data to port channel\n'}
[7.566407] (ldlidar_component) StdoutLine: {'line': b'7: -     bool WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len);\n'}
[7.566482] (ldlidar_component) StdoutLine: {'line': b'7: +     // transmit data to port channel\n'}
[7.566556] (ldlidar_component) StdoutLine: {'line': b'7: +   bool WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len);\n'}
[7.566629] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:58:83]: Replace [\\n    ] with [\\n  ]\n'}
[7.566704] (ldlidar_component) StdoutLine: {'line': b'7: -     bool WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len);\n'}
[7.566788] (ldlidar_component) StdoutLine: {'line': b'7: -     // set receive port channel data callback deal with fuction\n'}
[7.566864] (ldlidar_component) StdoutLine: {'line': b'7: +     bool WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len);\n'}
[7.566938] (ldlidar_component) StdoutLine: {'line': b'7: +   // set receive port channel data callback deal with fuction\n'}
[7.567012] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:59:63]: Replace [\\n    ] with [\\n  ]\n'}
[7.567128] (ldlidar_component) StdoutLine: {'line': b'7: -     // set receive port channel data callback deal with fuction\n'}
[7.567225] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)\n'}
[7.567349] (ldlidar_component) StdoutLine: {'line': b'7: +     // set receive port channel data callback deal with fuction\n'}
[7.567426] (ldlidar_component) StdoutLine: {'line': b'7: +   void SetReadCallback(std::function < void(const char *, size_t length) > callback)\n'}
[7.567501] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:60:38]: Replace [ ] with []\n'}
[7.567575] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)\n'}
[7.567648] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetReadCallback(std::function< void(const char *, size_t length) > callback)\n'}
[7.567722] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:60:40]: Replace [ ] with []\n'}
[7.567795] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)\n'}
[7.567867] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetReadCallback(std::function <void(const char *, size_t length) > callback)\n'}
[7.567939] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:60:74]: Replace [ ] with []\n'}
[7.568012] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)\n'}
[7.568084] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetReadCallback(std::function < void(const char *, size_t length)> callback)\n'}
[7.568157] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:60:86]: Replace [\\n    ] with [\\n  ]\n'}
[7.568284] (ldlidar_component) StdoutLine: {'line': b'7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)\n'}
[7.568397] (ldlidar_component) StdoutLine: {'line': b'7: -     {\n'}
[7.568473] (ldlidar_component) StdoutLine: {'line': b'7: +     void SetReadCallback(std::function < void(const char *, size_t length) > callback)\n'}
[7.568548] (ldlidar_component) StdoutLine: {'line': b'7: +   {\n'}
[7.568621] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:61:5]: Replace [\\n      ] with [\\n    ]\n'}
[7.568696] (ldlidar_component) StdoutLine: {'line': b'7: -     {\n'}
[7.568769] (ldlidar_component) StdoutLine: {'line': b'7: -       read_callback_ = callback;\n'}
[7.568843] (ldlidar_component) StdoutLine: {'line': b'7: +     {\n'}
[7.568917] (ldlidar_component) StdoutLine: {'line': b'7: +     read_callback_ = callback;\n'}
[7.568990] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:62:32]: Replace [\\n    ] with [\\n  ]\n'}
[7.569066] (ldlidar_component) StdoutLine: {'line': b'7: -       read_callback_ = callback;\n'}
[7.569139] (ldlidar_component) StdoutLine: {'line': b'7: -     }\n'}
[7.569237] (ldlidar_component) StdoutLine: {'line': b'7: +       read_callback_ = callback;\n'}
[7.569375] (ldlidar_component) StdoutLine: {'line': b'7: +   }\n'}
[7.569474] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:63:5]: Replace [\\n    ] with [\\n  ]\n'}
[7.569558] (ldlidar_component) StdoutLine: {'line': b'7: -     }\n'}
[7.569635] (ldlidar_component) StdoutLine: {'line': b'7: -     // whether open\n'}
[7.569710] (ldlidar_component) StdoutLine: {'line': b'7: +     }\n'}
[7.569783] (ldlidar_component) StdoutLine: {'line': b'7: +   // whether open\n'}
[7.569856] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:64:19]: Replace [\\n    ] with [\\n  ]\n'}
[7.569930] (ldlidar_component) StdoutLine: {'line': b'7: -     // whether open\n'}
[7.570002] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsOpened() {return is_cmd_opened_.load();}\n'}
[7.570075] (ldlidar_component) StdoutLine: {'line': b'7: +     // whether open\n'}
[7.570148] (ldlidar_component) StdoutLine: {'line': b'7: +   bool IsOpened() {return is_cmd_opened_.load();}\n'}
[7.570266] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:65:21]: Replace [] with [ ]\n'}
[7.570384] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsOpened() {return is_cmd_opened_.load();}\n'}
[7.570460] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsOpened() { return is_cmd_opened_.load();}\n'}
[7.570533] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:65:50]: Replace [] with [ ]\n'}
[7.570607] (ldlidar_component) StdoutLine: {'line': b'7: -     bool IsOpened() {return is_cmd_opened_.load();}\n'}
[7.570680] (ldlidar_component) StdoutLine: {'line': b'7: +     bool IsOpened() {return is_cmd_opened_.load(); }\n'}
[7.570753] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:67:8]: Replace [\\n    ] with [\\n  ]\n'}
[7.570826] (ldlidar_component) StdoutLine: {'line': b'7: - private:\n'}
[7.570898] (ldlidar_component) StdoutLine: {'line': b'7: -     std::thread * rx_thread_;\n'}
[7.570972] (ldlidar_component) StdoutLine: {'line': b'7: + private:\n'}
[7.571044] (ldlidar_component) StdoutLine: {'line': b'7: +   std::thread * rx_thread_;\n'}
[7.571117] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:68:29]: Replace [\\n    ] with [\\n  ]\n'}
[7.571197] (ldlidar_component) StdoutLine: {'line': b'7: -     std::thread * rx_thread_;\n'}
[7.571341] (ldlidar_component) StdoutLine: {'line': b'7: -     long long rx_count_;\n'}
[7.571420] (ldlidar_component) StdoutLine: {'line': b'7: +     std::thread * rx_thread_;\n'}
[7.571494] (ldlidar_component) StdoutLine: {'line': b'7: +   long long rx_count_;\n'}
[7.571568] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:69:24]: Replace [\\n    ] with [\\n  ]\n'}
[7.571642] (ldlidar_component) StdoutLine: {'line': b'7: -     long long rx_count_;\n'}
[7.571715] (ldlidar_component) StdoutLine: {'line': b'7: -     int32_t com_handle_;\n'}
[7.571788] (ldlidar_component) StdoutLine: {'line': b'7: +     long long rx_count_;\n'}
[7.571860] (ldlidar_component) StdoutLine: {'line': b'7: +   int32_t com_handle_;\n'}
[7.571935] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:70:24]: Replace [\\n    ] with [\\n  ]\n'}
[7.572008] (ldlidar_component) StdoutLine: {'line': b'7: -     int32_t com_handle_;\n'}
[7.572080] (ldlidar_component) StdoutLine: {'line': b'7: -     uint32_t com_baudrate_;\n'}
[7.572152] (ldlidar_component) StdoutLine: {'line': b'7: +     int32_t com_handle_;\n'}
[7.572562] (ldlidar_component) StdoutLine: {'line': b'7: +   uint32_t com_baudrate_;\n'}
[7.572645] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:71:27]: Replace [\\n    ] with [\\n  ]\n'}
[7.572721] (ldlidar_component) StdoutLine: {'line': b'7: -     uint32_t com_baudrate_;\n'}
[7.572793] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.572875] (ldlidar_component) StdoutLine: {'line': b'7: +     uint32_t com_baudrate_;\n'}
[7.572949] (ldlidar_component) StdoutLine: {'line': b'7: +   std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.573022] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:72:15]: Replace [ ] with []\n'}
[7.573094] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.573167] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic< bool > is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.573678] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:72:17]: Replace [ ] with []\n'}
[7.573788] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.573865] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic <bool > is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.573939] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:72:22]: Replace [ ] with []\n'}
[7.574013] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.574086] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic < bool> is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.574159] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:72:62]: Replace [\\n    ] with [\\n  ]\n'}
[7.574296] (ldlidar_component) StdoutLine: {'line': b'7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.574383] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > read_callback_;\n'}
[7.574459] (ldlidar_component) StdoutLine: {'line': b'7: +     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;\n'}
[7.574542] (ldlidar_component) StdoutLine: {'line': b'7: +   std::function < void(const char *, size_t length) > read_callback_;\n'}
[7.574617] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:73:17]: Replace [ ] with []\n'}
[7.574691] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > read_callback_;\n'}
[7.574765] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function< void(const char *, size_t length) > read_callback_;\n'}
[7.574839] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:73:19]: Replace [ ] with []\n'}
[7.574914] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > read_callback_;\n'}
[7.574987] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function <void(const char *, size_t length) > read_callback_;\n'}
[7.575060] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:73:53]: Replace [ ] with []\n'}
[7.575189] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > read_callback_;\n'}
[7.576286] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < void(const char *, size_t length)> read_callback_;\n'}
[7.576398] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:73:71]: Replace [\\n    ] with [\\n  ]\n'}
[7.576476] (ldlidar_component) StdoutLine: {'line': b'7: -     std::function < void(const char *, size_t length) > read_callback_;\n'}
[7.576550] (ldlidar_component) StdoutLine: {'line': b'7: -     static void RxThreadProc(void * param);\n'}
[7.576622] (ldlidar_component) StdoutLine: {'line': b'7: +     std::function < void(const char *, size_t length) > read_callback_;\n'}
[7.576691] (ldlidar_component) StdoutLine: {'line': b'7: +   static void RxThreadProc(void * param);\n'}
[7.576773] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:74:43]: Replace [\\n  ] with [\\n]\n'}
[7.576843] (ldlidar_component) StdoutLine: {'line': b'7: -     static void RxThreadProc(void * param);\n'}
[7.576910] (ldlidar_component) StdoutLine: {'line': b'7: -   };\n'}
[7.576977] (ldlidar_component) StdoutLine: {'line': b'7: +     static void RxThreadProc(void * param);\n'}
[7.577043] (ldlidar_component) StdoutLine: {'line': b'7: + };\n'}
[7.577109] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:77:1]: Replace [ ] with [  ]\n'}
[7.577176] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.577262] (ldlidar_component) StdoutLine: {'line': b'7: + }  // namespace ldlidar\n'}
[7.577334] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.577402] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/src/core/ldlidar_driver.cpp':\n"}
[7.577469] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.577535] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:59:57]: Replace [\\n] with [ ]\n'}
[7.577602] (ldlidar_component) StdoutLine: {'line': b'7: - std::string LDLidarDriver::GetLidarSdkVersionNumber(void)\n'}
[7.577668] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.577734] (ldlidar_component) StdoutLine: {'line': b'7: + std::string LDLidarDriver::GetLidarSdkVersionNumber(void) {\n'}
[7.577801] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:60:1]: Replace [\\n  ] with [ ]\n'}
[7.577867] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.577932] (ldlidar_component) StdoutLine: {'line': b'7: -   return sdk_version_number_;\n'}
[7.577998] (ldlidar_component) StdoutLine: {'line': b'7: + { return sdk_version_number_;\n'}
[7.578063] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:61:29]: Replace [\\n] with [ ]\n'}
[7.578128] (ldlidar_component) StdoutLine: {'line': b'7: -   return sdk_version_number_;\n'}
[7.578326] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.578419] (ldlidar_component) StdoutLine: {'line': b'7: +   return sdk_version_number_; }\n'}
[7.578488] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:65:22]: Replace [\\n  ] with [ ]\n'}
[7.578555] (ldlidar_component) StdoutLine: {'line': b'7: -   LDType product_name,\n'}
[7.578620] (ldlidar_component) StdoutLine: {'line': b'7: -   std::string serial_port_name,\n'}
[7.578686] (ldlidar_component) StdoutLine: {'line': b'7: +   LDType product_name, std::string serial_port_name,\n'}
[7.578753] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:66:31]: Replace [\\n  ] with [ ]\n'}
[7.578818] (ldlidar_component) StdoutLine: {'line': b'7: -   std::string serial_port_name,\n'}
[7.578883] (ldlidar_component) StdoutLine: {'line': b'7: -   uint32_t serial_baudrate,\n'}
[7.578949] (ldlidar_component) StdoutLine: {'line': b'7: +   std::string serial_port_name, uint32_t serial_baudrate,\n'}
[7.579014] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:95:16]: Replace [\\n        ] with []\n'}
[7.579081] (ldlidar_component) StdoutLine: {'line': b'7: -       std::bind(\n'}
[7.579147] (ldlidar_component) StdoutLine: {'line': b'7: -         &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.579237] (ldlidar_component) StdoutLine: {'line': b'7: +       std::bind(&LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.579314] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:96:44]: Replace [\\n        ] with [ ]\n'}
[7.579383] (ldlidar_component) StdoutLine: {'line': b'7: -         &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.579450] (ldlidar_component) StdoutLine: {'line': b'7: -         std::placeholders::_1, std::placeholders::_2));\n'}
[7.579518] (ldlidar_component) StdoutLine: {'line': b'7: +         &LiPkg::CommReadCallback, comm_pkg_, std::placeholders::_1, std::placeholders::_2));\n'}
[7.579598] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:115:22]: Replace [\\n  ] with [ ]\n'}
[7.579666] (ldlidar_component) StdoutLine: {'line': b'7: -   LDType product_name,\n'}
[7.579732] (ldlidar_component) StdoutLine: {'line': b'7: -   const char * server_ip,\n'}
[7.579797] (ldlidar_component) StdoutLine: {'line': b'7: +   LDType product_name, const char * server_ip,\n'}
[7.579863] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:116:25]: Replace [\\n  ] with [ ]\n'}
[7.579941] (ldlidar_component) StdoutLine: {'line': b'7: -   const char * server_ip,\n'}
[7.580007] (ldlidar_component) StdoutLine: {'line': b'7: -   const char * server_port,\n'}
[7.580073] (ldlidar_component) StdoutLine: {'line': b'7: +   const char * server_ip, const char * server_port,\n'}
[7.580138] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:119:1]: Replace [\\n\\n  ] with [\\n  ]\n'}
[7.580217] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.580294] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.580361] (ldlidar_component) StdoutLine: {'line': b'7: -   if (is_start_flag_) {\n'}
[7.580426] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.580491] (ldlidar_component) StdoutLine: {'line': b'7: +   if (is_start_flag_) {\n'}
[7.580556] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:150:32]: Replace [\\n        ] with [\\n      ]\n'}
[7.580622] (ldlidar_component) StdoutLine: {'line': b'7: -     case COMM_TCP_CLIENT_MODE: {\n'}
[7.580688] (ldlidar_component) StdoutLine: {'line': b'7: -         comm_tcp_network_->SetRecvCallback(\n'}
[7.580754] (ldlidar_component) StdoutLine: {'line': b'7: +     case COMM_TCP_CLIENT_MODE: {\n'}
[7.580820] (ldlidar_component) StdoutLine: {'line': b'7: +       comm_tcp_network_->SetRecvCallback(\n'}
[7.580886] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:151:43]: Replace [\\n          ] with []\n'}
[7.580953] (ldlidar_component) StdoutLine: {'line': b'7: -         comm_tcp_network_->SetRecvCallback(\n'}
[7.581018] (ldlidar_component) StdoutLine: {'line': b'7: -           std::bind(\n'}
[7.581084] (ldlidar_component) StdoutLine: {'line': b'7: +         comm_tcp_network_->SetRecvCallback(std::bind(\n'}
[7.581157] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:152:20]: Replace [\\n            ] with [\\n        ]\n'}
[7.581250] (ldlidar_component) StdoutLine: {'line': b'7: -           std::bind(\n'}
[7.581322] (ldlidar_component) StdoutLine: {'line': b'7: -             &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.581389] (ldlidar_component) StdoutLine: {'line': b'7: +           std::bind(\n'}
[7.581454] (ldlidar_component) StdoutLine: {'line': b'7: +         &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.581518] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:153:48]: Replace [\\n            ] with [ ]\n'}
[7.581583] (ldlidar_component) StdoutLine: {'line': b'7: -             &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.581648] (ldlidar_component) StdoutLine: {'line': b'7: -             std::placeholders::_1, std::placeholders::_2));\n'}
[7.581713] (ldlidar_component) StdoutLine: {'line': b'7: +             &LiPkg::CommReadCallback, comm_pkg_, std::placeholders::_1, std::placeholders::_2));\n'}
[7.581778] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:154:59]: Replace [\\n        ] with [\\n      ]\n'}
[7.581843] (ldlidar_component) StdoutLine: {'line': b'7: -             std::placeholders::_1, std::placeholders::_2));\n'}
[7.581966] (ldlidar_component) StdoutLine: {'line': b'7: -         bool result = comm_tcp_network_->CreateSocket(TCP_CLIENT, server_ip, server_port);\n'}
[7.582042] (ldlidar_component) StdoutLine: {'line': b'7: +             std::placeholders::_1, std::placeholders::_2));\n'}
[7.582308] (ldlidar_component) StdoutLine: {'line': b'7: +       bool result = comm_tcp_network_->CreateSocket(TCP_CLIENT, server_ip, server_port);\n'}
[7.582385] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:155:90]: Replace [\\n        ] with [\\n      ]\n'}
[7.582455] (ldlidar_component) StdoutLine: {'line': b'7: -         bool result = comm_tcp_network_->CreateSocket(TCP_CLIENT, server_ip, server_port);\n'}
[7.582523] (ldlidar_component) StdoutLine: {'line': b'7: -         if (!result) {\n'}
[7.582589] (ldlidar_component) StdoutLine: {'line': b'7: +         bool result = comm_tcp_network_->CreateSocket(TCP_CLIENT, server_ip, server_port);\n'}
[7.582655] (ldlidar_component) StdoutLine: {'line': b'7: +       if (!result) {\n'}
[7.582721] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:156:22]: Replace [\\n          ] with [\\n        ]\n'}
[7.582788] (ldlidar_component) StdoutLine: {'line': b'7: -         if (!result) {\n'}
[7.582855] (ldlidar_component) StdoutLine: {'line': b'7: -           LD_LOG_ERROR("client host: create socket is fail.", "");\n'}
[7.582922] (ldlidar_component) StdoutLine: {'line': b'7: +         if (!result) {\n'}
[7.582988] (ldlidar_component) StdoutLine: {'line': b'7: +         LD_LOG_ERROR("client host: create socket is fail.", "");\n'}
[7.583055] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:157:66]: Replace [\\n          ] with [\\n        ]\n'}
[7.583122] (ldlidar_component) StdoutLine: {'line': b'7: -           LD_LOG_ERROR("client host: create socket is fail.", "");\n'}
[7.583201] (ldlidar_component) StdoutLine: {'line': b'7: -           return false;\n'}
[7.583465] (ldlidar_component) StdoutLine: {'line': b'7: +           LD_LOG_ERROR("client host: create socket is fail.", "");\n'}
[7.583549] (ldlidar_component) StdoutLine: {'line': b'7: +         return false;\n'}
[7.583624] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:158:23]: Replace [\\n        ] with [\\n      ]\n'}
[7.583699] (ldlidar_component) StdoutLine: {'line': b'7: -           return false;\n'}
[7.583773] (ldlidar_component) StdoutLine: {'line': b'7: -         }\n'}
[7.583846] (ldlidar_component) StdoutLine: {'line': b'7: +           return false;\n'}
[7.583919] (ldlidar_component) StdoutLine: {'line': b'7: +       }\n'}
[7.583991] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:159:9]: Replace [\\n        ] with [\\n      ]\n'}
[7.584065] (ldlidar_component) StdoutLine: {'line': b'7: -         }\n'}
[7.584138] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("client host: create socket is ok.", "");\n'}
[7.584320] (ldlidar_component) StdoutLine: {'line': b'7: +         }\n'}
[7.584866] (ldlidar_component) StdoutLine: {'line': b'7: +       LDS_LOG_INFO("client host: create socket is ok.", "");\n'}
[7.584943] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:160:62]: Replace [\\n      ] with [\\n    ]\n'}
[7.585018] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("client host: create socket is ok.", "");\n'}
[7.585091] (ldlidar_component) StdoutLine: {'line': b'7: -       }\n'}
[7.585164] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_INFO("client host: create socket is ok.", "");\n'}
[7.585331] (ldlidar_component) StdoutLine: {'line': b'7: +     }\n'}
[7.585414] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:161:7]: Replace [\\n      ] with [ ]\n'}
[7.585490] (ldlidar_component) StdoutLine: {'line': b'7: -       }\n'}
[7.585564] (ldlidar_component) StdoutLine: {'line': b'7: -       break;\n'}
[7.585638] (ldlidar_component) StdoutLine: {'line': b'7: +       } break;\n'}
[7.585710] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:163:32]: Replace [\\n        ] with [\\n      ]\n'}
[7.585784] (ldlidar_component) StdoutLine: {'line': b'7: -     case COMM_TCP_SERVER_MODE: {\n'}
[7.585893] (ldlidar_component) StdoutLine: {'line': b'7: -         comm_tcp_network_->SetRecvCallback(\n'}
[7.585969] (ldlidar_component) StdoutLine: {'line': b'7: +     case COMM_TCP_SERVER_MODE: {\n'}
[7.586042] (ldlidar_component) StdoutLine: {'line': b'7: +       comm_tcp_network_->SetRecvCallback(\n'}
[7.586115] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:164:43]: Replace [\\n          ] with []\n'}
[7.586215] (ldlidar_component) StdoutLine: {'line': b'7: -         comm_tcp_network_->SetRecvCallback(\n'}
[7.586442] (ldlidar_component) StdoutLine: {'line': b'7: -           std::bind(\n'}
[7.586523] (ldlidar_component) StdoutLine: {'line': b'7: +         comm_tcp_network_->SetRecvCallback(std::bind(\n'}
[7.586598] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:165:20]: Replace [\\n            ] with [\\n        ]\n'}
[7.586673] (ldlidar_component) StdoutLine: {'line': b'7: -           std::bind(\n'}
[7.587658] (ldlidar_component) StdoutLine: {'line': b'7: -             &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.587759] (ldlidar_component) StdoutLine: {'line': b'7: +           std::bind(\n'}
[7.587834] (ldlidar_component) StdoutLine: {'line': b'7: +         &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.587905] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:166:48]: Replace [\\n            ] with [ ]\n'}
[7.587982] (ldlidar_component) StdoutLine: {'line': b'7: -             &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.588053] (ldlidar_component) StdoutLine: {'line': b'7: -             std::placeholders::_1, std::placeholders::_2));\n'}
[7.588121] (ldlidar_component) StdoutLine: {'line': b'7: +             &LiPkg::CommReadCallback, comm_pkg_, std::placeholders::_1, std::placeholders::_2));\n'}
[7.588202] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:167:59]: Replace [\\n        ] with [\\n      ]\n'}
[7.588286] (ldlidar_component) StdoutLine: {'line': b'7: -             std::placeholders::_1, std::placeholders::_2));\n'}
[7.588381] (ldlidar_component) StdoutLine: {'line': b'7: -         bool result = comm_tcp_network_->CreateSocket(TCP_SERVER, server_ip, server_port);\n'}
[7.588450] (ldlidar_component) StdoutLine: {'line': b'7: +             std::placeholders::_1, std::placeholders::_2));\n'}
[7.588517] (ldlidar_component) StdoutLine: {'line': b'7: +       bool result = comm_tcp_network_->CreateSocket(TCP_SERVER, server_ip, server_port);\n'}
[7.588584] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:168:90]: Replace [\\n        ] with [\\n      ]\n'}
[7.588651] (ldlidar_component) StdoutLine: {'line': b'7: -         bool result = comm_tcp_network_->CreateSocket(TCP_SERVER, server_ip, server_port);\n'}
[7.588716] (ldlidar_component) StdoutLine: {'line': b'7: -         if (!result) {\n'}
[7.588783] (ldlidar_component) StdoutLine: {'line': b'7: +         bool result = comm_tcp_network_->CreateSocket(TCP_SERVER, server_ip, server_port);\n'}
[7.588850] (ldlidar_component) StdoutLine: {'line': b'7: +       if (!result) {\n'}
[7.588916] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:169:22]: Replace [\\n          ] with [\\n        ]\n'}
[7.588983] (ldlidar_component) StdoutLine: {'line': b'7: -         if (!result) {\n'}
[7.589049] (ldlidar_component) StdoutLine: {'line': b'7: -           LD_LOG_ERROR("server host: create socket is fail.", "");\n'}
[7.589115] (ldlidar_component) StdoutLine: {'line': b'7: +         if (!result) {\n'}
[7.589181] (ldlidar_component) StdoutLine: {'line': b'7: +         LD_LOG_ERROR("server host: create socket is fail.", "");\n'}
[7.589271] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:170:66]: Replace [\\n          ] with [\\n        ]\n'}
[7.589342] (ldlidar_component) StdoutLine: {'line': b'7: -           LD_LOG_ERROR("server host: create socket is fail.", "");\n'}
[7.589419] (ldlidar_component) StdoutLine: {'line': b'7: -           return false;\n'}
[7.589486] (ldlidar_component) StdoutLine: {'line': b'7: +           LD_LOG_ERROR("server host: create socket is fail.", "");\n'}
[7.589552] (ldlidar_component) StdoutLine: {'line': b'7: +         return false;\n'}
[7.589618] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:171:23]: Replace [\\n        ] with [\\n      ]\n'}
[7.589685] (ldlidar_component) StdoutLine: {'line': b'7: -           return false;\n'}
[7.589750] (ldlidar_component) StdoutLine: {'line': b'7: -         }\n'}
[7.589816] (ldlidar_component) StdoutLine: {'line': b'7: +           return false;\n'}
[7.589882] (ldlidar_component) StdoutLine: {'line': b'7: +       }\n'}
[7.589947] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:172:9]: Replace [\\n        ] with [\\n      ]\n'}
[7.590013] (ldlidar_component) StdoutLine: {'line': b'7: -         }\n'}
[7.590077] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("server host: create socket is ok.", "");\n'}
[7.590143] (ldlidar_component) StdoutLine: {'line': b'7: +         }\n'}
[7.590219] (ldlidar_component) StdoutLine: {'line': b'7: +       LDS_LOG_INFO("server host: create socket is ok.", "");\n'}
[7.590295] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:173:62]: Replace [\\n      ] with [\\n    ]\n'}
[7.590363] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("server host: create socket is ok.", "");\n'}
[7.590429] (ldlidar_component) StdoutLine: {'line': b'7: -       }\n'}
[7.590495] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_INFO("server host: create socket is ok.", "");\n'}
[7.590562] (ldlidar_component) StdoutLine: {'line': b'7: +     }\n'}
[7.590628] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:174:7]: Replace [\\n      ] with [ ]\n'}
[7.590696] (ldlidar_component) StdoutLine: {'line': b'7: -       }\n'}
[7.590762] (ldlidar_component) StdoutLine: {'line': b'7: -       break;\n'}
[7.590829] (ldlidar_component) StdoutLine: {'line': b'7: +       } break;\n'}
[7.590895] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:176:32]: Replace [\\n        ] with [\\n      ]\n'}
[7.590961] (ldlidar_component) StdoutLine: {'line': b'7: -     case COMM_UDP_CLIENT_MODE: {\n'}
[7.591027] (ldlidar_component) StdoutLine: {'line': b'7: -         comm_udp_network_->SetRecvCallback(\n'}
[7.591093] (ldlidar_component) StdoutLine: {'line': b'7: +     case COMM_UDP_CLIENT_MODE: {\n'}
[7.591160] (ldlidar_component) StdoutLine: {'line': b'7: +       comm_udp_network_->SetRecvCallback(\n'}
[7.591244] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:177:43]: Replace [\\n          ] with []\n'}
[7.591318] (ldlidar_component) StdoutLine: {'line': b'7: -         comm_udp_network_->SetRecvCallback(\n'}
[7.591385] (ldlidar_component) StdoutLine: {'line': b'7: -           std::bind(\n'}
[7.591450] (ldlidar_component) StdoutLine: {'line': b'7: +         comm_udp_network_->SetRecvCallback(std::bind(\n'}
[7.591516] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:178:20]: Replace [\\n            ] with [\\n        ]\n'}
[7.591583] (ldlidar_component) StdoutLine: {'line': b'7: -           std::bind(\n'}
[7.591649] (ldlidar_component) StdoutLine: {'line': b'7: -             &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.591714] (ldlidar_component) StdoutLine: {'line': b'7: +           std::bind(\n'}
[7.591779] (ldlidar_component) StdoutLine: {'line': b'7: +         &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.591844] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:179:48]: Replace [\\n            ] with [ ]\n'}
[7.591910] (ldlidar_component) StdoutLine: {'line': b'7: -             &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.591975] (ldlidar_component) StdoutLine: {'line': b'7: -             std::placeholders::_1, std::placeholders::_2));\n'}
[7.592051] (ldlidar_component) StdoutLine: {'line': b'7: +             &LiPkg::CommReadCallback, comm_pkg_, std::placeholders::_1, std::placeholders::_2));\n'}
[7.592119] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:180:59]: Replace [\\n        ] with [\\n      ]\n'}
[7.592203] (ldlidar_component) StdoutLine: {'line': b'7: -             std::placeholders::_1, std::placeholders::_2));\n'}
[7.592284] (ldlidar_component) StdoutLine: {'line': b'7: -         bool result = comm_udp_network_->CreateSocket(UDP_CLIENT, server_ip, server_port);\n'}
[7.592353] (ldlidar_component) StdoutLine: {'line': b'7: +             std::placeholders::_1, std::placeholders::_2));\n'}
[7.592419] (ldlidar_component) StdoutLine: {'line': b'7: +       bool result = comm_udp_network_->CreateSocket(UDP_CLIENT, server_ip, server_port);\n'}
[7.592485] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:181:90]: Replace [\\n        ] with [\\n      ]\n'}
[7.592564] (ldlidar_component) StdoutLine: {'line': b'7: -         bool result = comm_udp_network_->CreateSocket(UDP_CLIENT, server_ip, server_port);\n'}
[7.592632] (ldlidar_component) StdoutLine: {'line': b'7: -         if (!result) {\n'}
[7.592698] (ldlidar_component) StdoutLine: {'line': b'7: +         bool result = comm_udp_network_->CreateSocket(UDP_CLIENT, server_ip, server_port);\n'}
[7.592764] (ldlidar_component) StdoutLine: {'line': b'7: +       if (!result) {\n'}
[7.592830] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:182:22]: Replace [\\n          ] with [\\n        ]\n'}
[7.592897] (ldlidar_component) StdoutLine: {'line': b'7: -         if (!result) {\n'}
[7.592962] (ldlidar_component) StdoutLine: {'line': b'7: -           LD_LOG_ERROR("client host: create socket is fail.", "");\n'}
[7.593030] (ldlidar_component) StdoutLine: {'line': b'7: +         if (!result) {\n'}
[7.593095] (ldlidar_component) StdoutLine: {'line': b'7: +         LD_LOG_ERROR("client host: create socket is fail.", "");\n'}
[7.593163] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:183:66]: Replace [\\n          ] with [\\n        ]\n'}
[7.593260] (ldlidar_component) StdoutLine: {'line': b'7: -           LD_LOG_ERROR("client host: create socket is fail.", "");\n'}
[7.593337] (ldlidar_component) StdoutLine: {'line': b'7: -           return false;\n'}
[7.593407] (ldlidar_component) StdoutLine: {'line': b'7: +           LD_LOG_ERROR("client host: create socket is fail.", "");\n'}
[7.593474] (ldlidar_component) StdoutLine: {'line': b'7: +         return false;\n'}
[7.593539] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:184:23]: Replace [\\n        ] with [\\n      ]\n'}
[7.593605] (ldlidar_component) StdoutLine: {'line': b'7: -           return false;\n'}
[7.593670] (ldlidar_component) StdoutLine: {'line': b'7: -         }\n'}
[7.593736] (ldlidar_component) StdoutLine: {'line': b'7: +           return false;\n'}
[7.593801] (ldlidar_component) StdoutLine: {'line': b'7: +       }\n'}
[7.593865] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:185:9]: Replace [\\n        ] with [\\n      ]\n'}
[7.593931] (ldlidar_component) StdoutLine: {'line': b'7: -         }\n'}
[7.593997] (ldlidar_component) StdoutLine: {'line': b'7: -         // \xe4\xb8\xbb\xe5\x8a\xa8\xe5\x90\x91\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe5\x8f\x91\xe5\xb8\x83\xe6\xb6\x88\xe6\x81\xaf\xe4\xbd\xbf\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xafip\xef\xbc\x8cport \xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\xbb\xba\xe7\xab\x8b\xe6\xb2\x9f\xe9\x80\x9a\xe6\xb8\xa0\xe9\x81\x93\n'}
[7.594069] (ldlidar_component) StdoutLine: {'line': b'7: +         }\n'}
[7.594135] (ldlidar_component) StdoutLine: {'line': b'7: +       // \xe4\xb8\xbb\xe5\x8a\xa8\xe5\x90\x91\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe5\x8f\x91\xe5\xb8\x83\xe6\xb6\x88\xe6\x81\xaf\xe4\xbd\xbf\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xafip\xef\xbc\x8cport \xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\xbb\xba\xe7\xab\x8b\xe6\xb2\x9f\xe9\x80\x9a\xe6\xb8\xa0\xe9\x81\x93\n'}
[7.594233] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:188:0]: Replace [        u] with [\\n      ]\n'}
[7.594309] (ldlidar_component) StdoutLine: {'line': b'7: -         uint32_t tx_len;\n'}
[7.594377] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.594443] (ldlidar_component) StdoutLine: {'line': b'7: +       int32_t tx_len;\n'}
[7.594509] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:189:32]: Replace [TransToNe] with [\\n      ]\n'}
[7.594576] (ldlidar_component) StdoutLine: {'line': b'7: -         if (!comm_udp_network_->TransToNet((uint8_t *)trans_buf, sizeof(trans_buf), &tx_len)) {\n'}
[7.594643] (ldlidar_component) StdoutLine: {'line': b'7: +         if (!comm_udp_network_->\n'}
[7.594709] (ldlidar_component) StdoutLine: {'line': b'7: +       t((uint8_t *)trans_buf, sizeof(trans_buf), &tx_len)) {\n'}
[7.594776] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:189:57]: Replace [ns_buf, s] with [\\n      ]\n'}
[7.594842] (ldlidar_component) StdoutLine: {'line': b'7: -         if (!comm_udp_network_->TransToNet((uint8_t *)trans_buf, sizeof(trans_buf), &tx_len)) {\n'}
[7.594909] (ldlidar_component) StdoutLine: {'line': b'7: +         if (!comm_udp_network_->TransToNet((uint8_t *)tra\n'}
[7.594976] (ldlidar_component) StdoutLine: {'line': b'7: +       izeof(trans_buf), &tx_len)) {\n'}
[7.595042] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:190:57]: Replace [er is fail.] with [\\n        ]\n'}
[7.595108] (ldlidar_component) StdoutLine: {'line': b'7: -           LD_LOG_ERROR("client host: send request to server is fail. %s", strerror(errno));\n'}
[7.595174] (ldlidar_component) StdoutLine: {'line': b'7: +           LD_LOG_ERROR("client host: send request to serv\n'}
[7.595260] (ldlidar_component) StdoutLine: {'line': b'7: +          %s", strerror(errno));\n'}
[7.595331] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:193:23]: Replace [lient host:] with [\\n        ]\n'}
[7.595398] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("client host: create socket is ok.", "");\n'}
[7.595463] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_INFO("c\n'}
[7.595527] (ldlidar_component) StdoutLine: {'line': b'7: +          create socket is ok.", "");\n'}
[7.595592] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:193:47]: Replace [t is ok."] with [\\n      ]\n'}
[7.595657] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("client host: create socket is ok.", "");\n'}
[7.595723] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_INFO("client host: create socke\n'}
[7.595789] (ldlidar_component) StdoutLine: {'line': b'7: +       , "");\n'}
[7.595855] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:193:57]: Replace [ "");\\n   ] with [\\n      ]\n'}
[7.595921] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("client host: create socket is ok.", "");\n'}
[7.595986] (ldlidar_component) StdoutLine: {'line': b'7: -       }\n'}
[7.596051] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_INFO("client host: create socket is ok.",\n'}
[7.596117] (ldlidar_component) StdoutLine: {'line': b'7: +          }\n'}
[7.596208] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:197:3]: Replace [     co] with [\\n    ]\n'}
[7.596293] (ldlidar_component) StdoutLine: {'line': b'7: -         comm_udp_network_->SetRecvCallback(\n'}
[7.596363] (ldlidar_component) StdoutLine: {'line': b'7: +    \n'}
[7.596429] (ldlidar_component) StdoutLine: {'line': b'7: +     mm_udp_network_->SetRecvCallback(\n'}
[7.596504] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:197:11]: Replace [m_udp_n] with [ ]\n'}
[7.596571] (ldlidar_component) StdoutLine: {'line': b'7: -         comm_udp_network_->SetRecvCallback(\n'}
[7.596638] (ldlidar_component) StdoutLine: {'line': b'7: +         com etwork_->SetRecvCallback(\n'}
[7.596703] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:198:13]: Replace [::bind(\\n ] with [\\n      ]\n'}
[7.596769] (ldlidar_component) StdoutLine: {'line': b'7: -           std::bind(\n'}
[7.596834] (ldlidar_component) StdoutLine: {'line': b'7: -             &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.596900] (ldlidar_component) StdoutLine: {'line': b'7: +           std\n'}
[7.596964] (ldlidar_component) StdoutLine: {'line': b'7: +                  &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.597030] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:199:36]: Replace [, comm_pkg_] with []\n'}
[7.597097] (ldlidar_component) StdoutLine: {'line': b'7: -             &LiPkg::CommReadCallback, comm_pkg_,\n'}
[7.597171] (ldlidar_component) StdoutLine: {'line': b'7: +             &LiPkg::CommReadCallback,\n'}
[7.597256] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:200:8]: Replace [    std::plac] with [\\n        ]\n'}
[7.597341] (ldlidar_component) StdoutLine: {'line': b'7: -             std::placeholders::_1, std::placeholders::_2));\n'}
[7.597410] (ldlidar_component) StdoutLine: {'line': b'7: +         \n'}
[7.597476] (ldlidar_component) StdoutLine: {'line': b'7: +         eholders::_1, std::placeholders::_2));\n'}
[7.597542] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:200:57]: Replace [);\\n        bo] with [ ]\n'}
[7.597608] (ldlidar_component) StdoutLine: {'line': b'7: -             std::placeholders::_1, std::placeholders::_2));\n'}
[7.597674] (ldlidar_component) StdoutLine: {'line': b'7: -         bool result = comm_udp_network_->CreateSocket(UDP_SERVER, server_ip, server_port);\n'}
[7.597741] (ldlidar_component) StdoutLine: {'line': b'7: +             std::placeholders::_1, std::placeholders::_2) ol result = comm_udp_network_->CreateSocket(UDP_SERVER, server_ip, server_port);\n'}
[7.597809] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:201:57]: Replace [_SERVER, ] with [\\n      ]\n'}
[7.597878] (ldlidar_component) StdoutLine: {'line': b'7: -         bool result = comm_udp_network_->CreateSocket(UDP_SERVER, server_ip, server_port);\n'}
[7.597945] (ldlidar_component) StdoutLine: {'line': b'7: +         bool result = comm_udp_network_->CreateSocket(UDP\n'}
[7.598012] (ldlidar_component) StdoutLine: {'line': b'7: +       server_ip, server_port);\n'}
[7.598078] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:203:34]: Replace [t: create] with [\\n      ]\n'}
[7.598146] (ldlidar_component) StdoutLine: {'line': b'7: -           LD_LOG_ERROR("server host: create socket is fail.", "");\n'}
[7.598378] (ldlidar_component) StdoutLine: {'line': b'7: +           LD_LOG_ERROR("server hos\n'}
[7.598596] (ldlidar_component) StdoutLine: {'line': b'7: +        socket is fail.", "");\n'}
[7.598682] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:203:57]: Replace [l.", "");\\n ] with [\\n        ]\n'}
[7.598768] (ldlidar_component) StdoutLine: {'line': b'7: -           LD_LOG_ERROR("server host: create socket is fail.", "");\n'}
[7.598852] (ldlidar_component) StdoutLine: {'line': b'7: -           return false;\n'}
[7.598935] (ldlidar_component) StdoutLine: {'line': b'7: +           LD_LOG_ERROR("server host: create socket is fai\n'}
[7.599018] (ldlidar_component) StdoutLine: {'line': b'7: +                  return false;\n'}
[7.599101] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:206:23]: Replace [erver host:] with [\\n        ]\n'}
[7.599285] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("server host: create socket is ok.", "");\n'}
[7.599360] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_INFO("s\n'}
[7.599427] (ldlidar_component) StdoutLine: {'line': b'7: +          create socket is ok.", "");\n'}
[7.599494] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:206:47]: Replace [t is ok."] with [\\n      ]\n'}
[7.599561] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("server host: create socket is ok.", "");\n'}
[7.599627] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_INFO("server host: create socke\n'}
[7.599694] (ldlidar_component) StdoutLine: {'line': b'7: +       , "");\n'}
[7.599761] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:206:57]: Replace [ "");\\n   ] with [\\n      ]\n'}
[7.599828] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("server host: create socket is ok.", "");\n'}
[7.599895] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("server host: wait client ack connect..", "");\n'}
[7.599962] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_INFO("server host: create socket is ok.",\n'}
[7.600178] (ldlidar_component) StdoutLine: {'line': b'7: +            LDS_LOG_INFO("server host: wait client ack connect..", "");\n'}
[7.600356] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:207:57]: Replace [t..", "")] with [\\n      ]\n'}
[7.600440] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_INFO("server host: wait client ack connect..", "");\n'}
[7.600513] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_INFO("server host: wait client ack connec\n'}
[7.600583] (ldlidar_component) StdoutLine: {'line': b'7: +       ;\n'}
[7.600652] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:209:5]: Replace [     usle] with [\\n      ]\n'}
[7.600722] (ldlidar_component) StdoutLine: {'line': b'7: -           usleep(1000);\n'}
[7.600789] (ldlidar_component) StdoutLine: {'line': b'7: +      \n'}
[7.600857] (ldlidar_component) StdoutLine: {'line': b'7: +       ep(1000);\n'}
[7.600924] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:213:2]: Replace [  default: ] with [\\n        ]\n'}
[7.601002] (ldlidar_component) StdoutLine: {'line': b'7: -     default: {\n'}
[7.601073] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.601140] (ldlidar_component) StdoutLine: {'line': b'7: +         {\n'}
[7.601224] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:214:11]: Replace [_LOG_ERRO] with [\\n      ]\n'}
[7.601303] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_ERROR("input comm_mode param is error.", "");\n'}
[7.601373] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS\n'}
[7.601440] (ldlidar_component) StdoutLine: {'line': b'7: +       R("input comm_mode param is error.", "");\n'}
[7.601508] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:214:21]: Replace [("input] with [\\n    ]\n'}
[7.601579] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_ERROR("input comm_mode param is error.", "");\n'}
[7.601647] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_ERROR\n'}
[7.601716] (ldlidar_component) StdoutLine: {'line': b'7: +      comm_mode param is error.", "");\n'}
[7.601785] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:214:29]: Replace [comm_mo] with [ ]\n'}
[7.601855] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_ERROR("input comm_mode param is error.", "");\n'}
[7.601924] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_ERROR("input  de param is error.", "");\n'}
[7.601993] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:214:57]: Replace ["");\\n    ] with [\\n      ]\n'}
[7.602071] (ldlidar_component) StdoutLine: {'line': b'7: -         LDS_LOG_ERROR("input comm_mode param is error.", "");\n'}
[7.602140] (ldlidar_component) StdoutLine: {'line': b'7: -         return false;\n'}
[7.603531] (ldlidar_component) StdoutLine: {'line': b'7: +         LDS_LOG_ERROR("input comm_mode param is error.", \n'}
[7.603661] (ldlidar_component) StdoutLine: {'line': b'7: +           return false;\n'}
[7.603739] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:220:9]: Replace [t_flag_ =] with [\\n      ]\n'}
[7.603811] (ldlidar_component) StdoutLine: {'line': b'7: -   is_start_flag_ = true;\n'}
[7.603879] (ldlidar_component) StdoutLine: {'line': b'7: +   is_star\n'}
[7.603947] (ldlidar_component) StdoutLine: {'line': b'7: +        true;\n'}
[7.604017] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:222:5]: Replace [IsOkSta] with [\\n    ]\n'}
[7.604088] (ldlidar_component) StdoutLine: {'line': b'7: -   SetIsOkStatus(true);\n'}
[7.604156] (ldlidar_component) StdoutLine: {'line': b'7: +   Set\n'}
[7.604261] (ldlidar_component) StdoutLine: {'line': b'7: +     tus(true);\n'}
[7.604336] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:222:13]: Replace [us(true] with [ ]\n'}
[7.604405] (ldlidar_component) StdoutLine: {'line': b'7: -   SetIsOkStatus(true);\n'}
[7.604471] (ldlidar_component) StdoutLine: {'line': b'7: +   SetIsOkStat );\n'}
[7.604554] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:255:57]: Replace [ < ti] with [\\n                              ]\n'}
[7.604624] (ldlidar_component) StdoutLine: {'line': b'7: -     std::chrono::steady_clock::now() - last_time).count() < timeout));\n'}
[7.604692] (ldlidar_component) StdoutLine: {'line': b'7: +     std::chrono::steady_clock::now() - last_time).count()\n'}
[7.604762] (ldlidar_component) StdoutLine: {'line': b'7: +                               meout));\n'}
[7.604830] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:258:14]: Replace [] with [\\n                              ]\n'}
[7.604899] (ldlidar_component) StdoutLine: {'line': b'7: -     last_pubdata_times_ = std::chrono::steady_clock::now();\n'}
[7.604968] (ldlidar_component) StdoutLine: {'line': b'7: +     last_pubda\n'}
[7.605036] (ldlidar_component) StdoutLine: {'line': b'7: +                               ta_times_ = std::chrono::steady_clock::now();\n'}
[7.605104] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:279:3]: Replace [] with [\\n      ]\n'}
[7.605172] (ldlidar_component) StdoutLine: {'line': b'7: -         std::chrono::steady_clock::now() -\n'}
[7.605605] (ldlidar_component) StdoutLine: {'line': b'7: +    \n'}
[7.605692] (ldlidar_component) StdoutLine: {'line': b'7: +            std::chrono::steady_clock::now() -\n'}
[7.605763] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:282:3]: Replace [   return] with [ ]\n'}
[7.605832] (ldlidar_component) StdoutLine: {'line': b'7: -       return LidarStatus::DATA_TIME_OUT;\n'}
[7.605899] (ldlidar_component) StdoutLine: {'line': b'7: +      LidarStatus::DATA_TIME_OUT;\n'}
[7.605965] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:282:32]: Replace [] with [\\n        ]\n'}
[7.606032] (ldlidar_component) StdoutLine: {'line': b'7: -       return LidarStatus::DATA_TIME_OUT;\n'}
[7.606097] (ldlidar_component) StdoutLine: {'line': b'7: +       return LidarStatus::DATA_T\n'}
[7.606162] (ldlidar_component) StdoutLine: {'line': b'7: +         IME_OUT;\n'}
[7.606245] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:283:10]: Replace [ {\\n  ] with [ ]\n'}
[7.606318] (ldlidar_component) StdoutLine: {'line': b'7: -     } else {\n'}
[7.606386] (ldlidar_component) StdoutLine: {'line': b'7: -       return LidarStatus::DATA_WAIT;\n'}
[7.606465] (ldlidar_component) StdoutLine: {'line': b'7: +     } else     return LidarStatus::DATA_WAIT;\n'}
[7.606533] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:309:3]: Replace [] with [\\n      ]\n'}
[7.606600] (ldlidar_component) StdoutLine: {'line': b'7: -         std::chrono::steady_clock::now() -\n'}
[7.606666] (ldlidar_component) StdoutLine: {'line': b'7: +    \n'}
[7.606732] (ldlidar_component) StdoutLine: {'line': b'7: +            std::chrono::steady_clock::now() -\n'}
[7.606799] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:312:3]: Replace [   return] with [ ]\n'}
[7.606867] (ldlidar_component) StdoutLine: {'line': b'7: -       return LidarStatus::DATA_TIME_OUT;\n'}
[7.606934] (ldlidar_component) StdoutLine: {'line': b'7: +      LidarStatus::DATA_TIME_OUT;\n'}
[7.607000] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:312:32]: Replace [] with [\\n        ]\n'}
[7.607067] (ldlidar_component) StdoutLine: {'line': b'7: -       return LidarStatus::DATA_TIME_OUT;\n'}
[7.607134] (ldlidar_component) StdoutLine: {'line': b'7: +       return LidarStatus::DATA_T\n'}
[7.607221] (ldlidar_component) StdoutLine: {'line': b'7: +         IME_OUT;\n'}
[7.607421] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:313:10]: Replace [ {\\n  ] with [ ]\n'}
[7.607495] (ldlidar_component) StdoutLine: {'line': b'7: -     } else {\n'}
[7.607563] (ldlidar_component) StdoutLine: {'line': b'7: -       return LidarStatus::DATA_WAIT;\n'}
[7.607630] (ldlidar_component) StdoutLine: {'line': b'7: +     } else     return LidarStatus::DATA_WAIT;\n'}
[7.607709] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:336:22]: Replace [mp_ha] with []\n'}
[7.607781] (ldlidar_component) StdoutLine: {'line': b'7: -   register_get_timestamp_handle_ = get_timestamp_handle;\n'}
[7.607848] (ldlidar_component) StdoutLine: {'line': b'7: +   register_get_timestandle_ = get_timestamp_handle;\n'}
[7.607915] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/core/ldlidar_driver.cpp:353:36]: Replace [ ] with [  ]\n'}
[7.607982] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF\n'}
[7.608049] (ldlidar_component) StdoutLine: {'line': b'7: + /********************* (C) COPYRIGHT  SHENZHEN LDROBOT CO., LTD *******END OF\n'}
[7.608116] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.608183] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/src/dataprocess/lipkg.cpp':\n"}
[7.608280] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.608351] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:28:73]: Replace [\\n  ] with [ ]\n'}
[7.608419] (ldlidar_component) StdoutLine: {'line': b'7: -   0x00, 0x4d, 0x9a, 0xd7, 0x79, 0x34, 0xe3, 0xae, 0xf2, 0xbf, 0x68, 0x25,\n'}
[7.608487] (ldlidar_component) StdoutLine: {'line': b'7: -   0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,\n'}
[7.608555] (ldlidar_component) StdoutLine: {'line': b'7: +   0x00, 0x4d, 0x9a, 0xd7, 0x79, 0x34, 0xe3, 0xae, 0xf2, 0xbf, 0x68, 0x25, 0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,\n'}
[7.608625] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:29:25]: Replace [ ] with [\\n  ]\n'}
[7.608693] (ldlidar_component) StdoutLine: {'line': b'7: -   0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,\n'}
[7.608761] (ldlidar_component) StdoutLine: {'line': b'7: +   0x8b, 0xc6, 0x11, 0x5c,\n'}
[7.608829] (ldlidar_component) StdoutLine: {'line': b'7: +   0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,\n'}
[7.608897] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:29:73]: Replace [\\n  ] with [ ]\n'}
[7.608964] (ldlidar_component) StdoutLine: {'line': b'7: -   0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,\n'}
[7.609042] (ldlidar_component) StdoutLine: {'line': b'7: -   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8,\n'}
[7.609111] (ldlidar_component) StdoutLine: {'line': b'7: +   0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07, 0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8,\n'}
[7.609180] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:30:49]: Replace [ ] with [\\n  ]\n'}
[7.609380] (ldlidar_component) StdoutLine: {'line': b'7: -   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8,\n'}
[7.609455] (ldlidar_component) StdoutLine: {'line': b'7: +   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5,\n'}
[7.609524] (ldlidar_component) StdoutLine: {'line': b'7: +   0x1f, 0x52, 0x85, 0xc8,\n'}
[7.609593] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:30:73]: Replace [\\n  ] with [ ]\n'}
[7.609662] (ldlidar_component) StdoutLine: {'line': b'7: -   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8,\n'}
[7.609730] (ldlidar_component) StdoutLine: {'line': b'7: -   0x66, 0x2b, 0xfc, 0xb1, 0xed, 0xa0, 0x77, 0x3a, 0x94, 0xd9, 0x0e, 0x43,\n'}
[7.609799] (ldlidar_component) StdoutLine: {'line': b'7: +   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8, 0x66, 0x2b, 0xfc, 0xb1, 0xed, 0xa0, 0x77, 0x3a, 0x94, 0xd9, 0x0e, 0x43,\n'}
[7.609885] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:32:73]: Replace [\\n  ] with [ ]\n'}
[7.609955] (ldlidar_component) StdoutLine: {'line': b'7: -   0xb6, 0xfb, 0x2c, 0x61, 0xcf, 0x82, 0x55, 0x18, 0x44, 0x09, 0xde, 0x93,\n'}
[7.610023] (ldlidar_component) StdoutLine: {'line': b'7: -   0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,\n'}
[7.610090] (ldlidar_component) StdoutLine: {'line': b'7: +   0xb6, 0xfb, 0x2c, 0x61, 0xcf, 0x82, 0x55, 0x18, 0x44, 0x09, 0xde, 0x93, 0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,\n'}
[7.610159] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:33:25]: Replace [ ] with [\\n  ]\n'}
[7.610261] (ldlidar_component) StdoutLine: {'line': b'7: -   0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,\n'}
[7.610338] (ldlidar_component) StdoutLine: {'line': b'7: +   0x3d, 0x70, 0xa7, 0xea,\n'}
[7.610406] (ldlidar_component) StdoutLine: {'line': b'7: +   0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,\n'}
[7.610474] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:33:73]: Replace [\\n  ] with [ ]\n'}
[7.610541] (ldlidar_component) StdoutLine: {'line': b'7: -   0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,\n'}
[7.610610] (ldlidar_component) StdoutLine: {'line': b'7: -   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40,\n'}
[7.610678] (ldlidar_component) StdoutLine: {'line': b'7: +   0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90, 0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40,\n'}
[7.610745] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:34:49]: Replace [ ] with [\\n  ]\n'}
[7.610813] (ldlidar_component) StdoutLine: {'line': b'7: -   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40,\n'}
[7.610881] (ldlidar_component) StdoutLine: {'line': b'7: +   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62,\n'}
[7.610948] (ldlidar_component) StdoutLine: {'line': b'7: +   0x97, 0xda, 0x0d, 0x40,\n'}
[7.611016] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:34:73]: Replace [\\n  ] with [ ]\n'}
[7.611084] (ldlidar_component) StdoutLine: {'line': b'7: -   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40,\n'}
[7.611152] (ldlidar_component) StdoutLine: {'line': b'7: -   0xee, 0xa3, 0x74, 0x39, 0x65, 0x28, 0xff, 0xb2, 0x1c, 0x51, 0x86, 0xcb,\n'}
[7.611259] (ldlidar_component) StdoutLine: {'line': b'7: +   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40, 0xee, 0xa3, 0x74, 0x39, 0x65, 0x28, 0xff, 0xb2, 0x1c, 0x51, 0x86, 0xcb,\n'}
[7.611342] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:36:73]: Replace [\\n  ] with [ ]\n'}
[7.611414] (ldlidar_component) StdoutLine: {'line': b'7: -   0x21, 0x6c, 0xbb, 0xf6, 0x58, 0x15, 0xc2, 0x8f, 0xd3, 0x9e, 0x49, 0x04,\n'}
[7.611483] (ldlidar_component) StdoutLine: {'line': b'7: -   0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,\n'}
[7.611551] (ldlidar_component) StdoutLine: {'line': b'7: +   0x21, 0x6c, 0xbb, 0xf6, 0x58, 0x15, 0xc2, 0x8f, 0xd3, 0x9e, 0x49, 0x04, 0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,\n'}
[7.611620] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:37:25]: Replace [ ] with [\\n  ]\n'}
[7.611688] (ldlidar_component) StdoutLine: {'line': b'7: -   0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,\n'}
[7.611757] (ldlidar_component) StdoutLine: {'line': b'7: +   0xaa, 0xe7, 0x30, 0x7d,\n'}
[7.611824] (ldlidar_component) StdoutLine: {'line': b'7: +   0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,\n'}
[7.611890] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:37:73]: Replace [\\n  ] with [ ]\n'}
[7.611957] (ldlidar_component) StdoutLine: {'line': b'7: -   0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,\n'}
[7.612024] (ldlidar_component) StdoutLine: {'line': b'7: -   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab,\n'}
[7.612091] (ldlidar_component) StdoutLine: {'line': b'7: +   0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26, 0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab,\n'}
[7.612158] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:38:49]: Replace [ ] with [\\n  ]\n'}
[7.612251] (ldlidar_component) StdoutLine: {'line': b'7: -   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab,\n'}
[7.612325] (ldlidar_component) StdoutLine: {'line': b'7: +   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4,\n'}
[7.612392] (ldlidar_component) StdoutLine: {'line': b'7: +   0x7c, 0x31, 0xe6, 0xab,\n'}
[7.612458] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:38:73]: Replace [\\n  ] with [ ]\n'}
[7.612525] (ldlidar_component) StdoutLine: {'line': b'7: -   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab,\n'}
[7.612593] (ldlidar_component) StdoutLine: {'line': b'7: -   0x05, 0x48, 0x9f, 0xd2, 0x8e, 0xc3, 0x14, 0x59, 0xf7, 0xba, 0x6d, 0x20,\n'}
[7.612659] (ldlidar_component) StdoutLine: {'line': b'7: +   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab, 0x05, 0x48, 0x9f, 0xd2, 0x8e, 0xc3, 0x14, 0x59, 0xf7, 0xba, 0x6d, 0x20,\n'}
[7.612728] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:40:73]: Replace [\\n  ] with [ ]\n'}
[7.612795] (ldlidar_component) StdoutLine: {'line': b'7: -   0xd5, 0x98, 0x4f, 0x02, 0xac, 0xe1, 0x36, 0x7b, 0x27, 0x6a, 0xbd, 0xf0,\n'}
[7.612863] (ldlidar_component) StdoutLine: {'line': b'7: -   0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,\n'}
[7.612930] (ldlidar_component) StdoutLine: {'line': b'7: +   0xd5, 0x98, 0x4f, 0x02, 0xac, 0xe1, 0x36, 0x7b, 0x27, 0x6a, 0xbd, 0xf0, 0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,\n'}
[7.612998] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:41:25]: Replace [ ] with [\\n  ]\n'}
[7.613065] (ldlidar_component) StdoutLine: {'line': b'7: -   0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,\n'}
[7.613132] (ldlidar_component) StdoutLine: {'line': b'7: +   0x5e, 0x13, 0xc4, 0x89,\n'}
[7.613293] (ldlidar_component) StdoutLine: {'line': b'7: +   0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,\n'}
[7.613388] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:41:73]: Replace [\\n  ] with [ ]\n'}
[7.613469] (ldlidar_component) StdoutLine: {'line': b'7: -   0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,\n'}
[7.613538] (ldlidar_component) StdoutLine: {'line': b'7: -   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d,\n'}
[7.613605] (ldlidar_component) StdoutLine: {'line': b'7: +   0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd, 0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d,\n'}
[7.613673] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:42:49]: Replace [ ] with [\\n  ]\n'}
[7.613739] (ldlidar_component) StdoutLine: {'line': b'7: -   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d,\n'}
[7.613806] (ldlidar_component) StdoutLine: {'line': b'7: +   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f,\n'}
[7.613872] (ldlidar_component) StdoutLine: {'line': b'7: +   0xca, 0x87, 0x50, 0x1d,\n'}
[7.613938] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:42:73]: Replace [\\n  ] with [ ]\n'}
[7.614004] (ldlidar_component) StdoutLine: {'line': b'7: -   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d,\n'}
[7.614070] (ldlidar_component) StdoutLine: {'line': b'7: -   0xb3, 0xfe, 0x29, 0x64, 0x38, 0x75, 0xa2, 0xef, 0x41, 0x0c, 0xdb, 0x96,\n'}
[7.614135] (ldlidar_component) StdoutLine: {'line': b'7: +   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d, 0xb3, 0xfe, 0x29, 0x64, 0x38, 0x75, 0xa2, 0xef, 0x41, 0x0c, 0xdb, 0x96,\n'}
[7.614281] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:44:73]: Replace [\\n  ] with [ ]\n'}
[7.614365] (ldlidar_component) StdoutLine: {'line': b'7: -   0x42, 0x0f, 0xd8, 0x95, 0x3b, 0x76, 0xa1, 0xec, 0xb0, 0xfd, 0x2a, 0x67,\n'}
[7.614434] (ldlidar_component) StdoutLine: {'line': b'7: -   0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,\n'}
[7.614500] (ldlidar_component) StdoutLine: {'line': b'7: +   0x42, 0x0f, 0xd8, 0x95, 0x3b, 0x76, 0xa1, 0xec, 0xb0, 0xfd, 0x2a, 0x67, 0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,\n'}
[7.614578] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:45:25]: Replace [ ] with [\\n  ]\n'}
[7.614649] (ldlidar_component) StdoutLine: {'line': b'7: -   0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,\n'}
[7.614741] (ldlidar_component) StdoutLine: {'line': b'7: +   0xc9, 0x84, 0x53, 0x1e,\n'}
[7.614837] (ldlidar_component) StdoutLine: {'line': b'7: +   0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,\n'}
[7.614985] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:45:73]: Replace [\\n  ] with [ ]\n'}
[7.615123] (ldlidar_component) StdoutLine: {'line': b'7: -   0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,\n'}
[7.615260] (ldlidar_component) StdoutLine: {'line': b'7: -   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a,\n'}
[7.615343] (ldlidar_component) StdoutLine: {'line': b'7: +   0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45, 0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a,\n'}
[7.615412] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:46:49]: Replace [ ] with [\\n  ]\n'}
[7.615480] (ldlidar_component) StdoutLine: {'line': b'7: -   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a,\n'}
[7.615547] (ldlidar_component) StdoutLine: {'line': b'7: +   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7,\n'}
[7.615615] (ldlidar_component) StdoutLine: {'line': b'7: +   0x5d, 0x10, 0xc7, 0x8a,\n'}
[7.615681] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:46:73]: Replace [\\n  ] with [ ]\n'}
[7.615748] (ldlidar_component) StdoutLine: {'line': b'7: -   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a,\n'}
[7.615825] (ldlidar_component) StdoutLine: {'line': b'7: -   0x24, 0x69, 0xbe, 0xf3, 0xaf, 0xe2, 0x35, 0x78, 0xd6, 0x9b, 0x4c, 0x01,\n'}
[7.615892] (ldlidar_component) StdoutLine: {'line': b'7: +   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a, 0x24, 0x69, 0xbe, 0xf3, 0xaf, 0xe2, 0x35, 0x78, 0xd6, 0x9b, 0x4c, 0x01,\n'}
[7.615959] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:48:73]: Replace [\\n  ] with [ ]\n'}
[7.616025] (ldlidar_component) StdoutLine: {'line': b'7: -   0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17, 0x5a, 0x06, 0x4b, 0x9c, 0xd1,\n'}
[7.616091] (ldlidar_component) StdoutLine: {'line': b'7: -   0x7f, 0x32, 0xe5, 0xa8};\n'}
[7.616157] (ldlidar_component) StdoutLine: {'line': b'7: +   0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17, 0x5a, 0x06, 0x4b, 0x9c, 0xd1, 0x7f, 0x32, 0xe5, 0xa8};\n'}
[7.616257] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:73:1]: Replace [\\n\\n] with [\\n]\n'}
[7.616331] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.616397] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.616463] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.616528] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.616593] (ldlidar_component) StdoutLine: {'line': b'7: + }\n'}
[7.616658] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:77:15]: Replace [\\n] with [ ]\n'}
[7.616725] (ldlidar_component) StdoutLine: {'line': b'7: - LiPkg::~LiPkg()\n'}
[7.616790] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.616856] (ldlidar_component) StdoutLine: {'line': b'7: + LiPkg::~LiPkg() {\n'}
[7.616922] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:78:1]: Replace [\\n\\n] with []\n'}
[7.616989] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.617055] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.617121] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.617196] (ldlidar_component) StdoutLine: {'line': b'7: + {}\n'}
[7.617275] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:105:13]: Replace [\\n  ] with [ ]\n'}
[7.617344] (ldlidar_component) StdoutLine: {'line': b'7: -   static enum\n'}
[7.617411] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.617477] (ldlidar_component) StdoutLine: {'line': b'7: +   static enum {\n'}
[7.617543] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:160:91]: Replace [\\n\\n        ] with [\\n        ]\n'}
[7.617610] (ldlidar_component) StdoutLine: {'line': b'7: -       if (diff <= ((double)pkg_.speed * POINT_PER_PACK / measure_point_frequence_ * 1.5)) {\n'}
[7.617677] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.617742] (ldlidar_component) StdoutLine: {'line': b'7: -         if (0 == last_pkg_timestamp_) {\n'}
[7.617808] (ldlidar_component) StdoutLine: {'line': b'7: +       if (diff <= ((double)pkg_.speed * POINT_PER_PACK / measure_point_frequence_ * 1.5)) {\n'}
[7.617874] (ldlidar_component) StdoutLine: {'line': b'7: +         if (0 == last_pkg_timestamp_) {\n'}
[7.617939] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:172:28]: Replace [ ] with [          ]\n'}
[7.618006] (ldlidar_component) StdoutLine: {'line': b'7: -         speed_ = pkg_.speed; // Degrees per second\n'}
[7.618071] (ldlidar_component) StdoutLine: {'line': b'7: +         speed_ = pkg_.speed;          // Degrees per second\n'}
[7.618137] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:173:36]: Replace [ ] with [  ]\n'}
[7.618225] (ldlidar_component) StdoutLine: {'line': b'7: -         timestamp_ = pkg_.timestamp; // In milliseconds\n'}
[7.618305] (ldlidar_component) StdoutLine: {'line': b'7: +         timestamp_ = pkg_.timestamp;  // In milliseconds\n'}
[7.618391] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:189:49]: Replace [ ] with [  ]\n'}
[7.618467] (ldlidar_component) StdoutLine: {'line': b'7: -         last_pkg_timestamp_ = current_pack_stamp; //// update last pkg timestamp\n'}
[7.618536] (ldlidar_component) StdoutLine: {'line': b'7: +         last_pkg_timestamp_ = current_pack_stamp;  //// update last pkg timestamp\n'}
[7.618605] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:225:70]: Replace [] with [ ]\n'}
[7.618673] (ldlidar_component) StdoutLine: {'line': b'7: -       std::sort(tmp.begin(), tmp.end(), [](PointData a, PointData b) {return a.stamp < b.stamp;});\n'}
[7.618742] (ldlidar_component) StdoutLine: {'line': b'7: +       std::sort(tmp.begin(), tmp.end(), [](PointData a, PointData b) { return a.stamp < b.stamp;});\n'}
[7.618810] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:225:95]: Replace [] with [ ]\n'}
[7.618877] (ldlidar_component) StdoutLine: {'line': b'7: -       std::sort(tmp.begin(), tmp.end(), [](PointData a, PointData b) {return a.stamp < b.stamp;});\n'}
[7.618951] (ldlidar_component) StdoutLine: {'line': b'7: +       std::sort(tmp.begin(), tmp.end(), [](PointData a, PointData b) {return a.stamp < b.stamp; });\n'}
[7.619021] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:265:36]: Replace [\\n] with [ ]\n'}
[7.619089] (ldlidar_component) StdoutLine: {'line': b'7: - uint16_t LiPkg::GetSpeedOrigin(void)\n'}
[7.619157] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.619243] (ldlidar_component) StdoutLine: {'line': b'7: + uint16_t LiPkg::GetSpeedOrigin(void) {\n'}
[7.619316] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:266:1]: Replace [\\n  ] with [ ]\n'}
[7.619384] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.619450] (ldlidar_component) StdoutLine: {'line': b'7: -   return speed_;\n'}
[7.619517] (ldlidar_component) StdoutLine: {'line': b'7: + { return speed_;\n'}
[7.619583] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:267:16]: Replace [\\n] with [ ]\n'}
[7.619650] (ldlidar_component) StdoutLine: {'line': b'7: -   return speed_;\n'}
[7.619716] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.619782] (ldlidar_component) StdoutLine: {'line': b'7: +   return speed_; }\n'}
[7.619848] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:270:34]: Replace [\\n] with [ ]\n'}
[7.619914] (ldlidar_component) StdoutLine: {'line': b'7: - uint16_t LiPkg::GetTimestamp(void)\n'}
[7.619979] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.620045] (ldlidar_component) StdoutLine: {'line': b'7: + uint16_t LiPkg::GetTimestamp(void) {\n'}
[7.620111] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:271:1]: Replace [\\n  ] with [ ]\n'}
[7.620177] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.620273] (ldlidar_component) StdoutLine: {'line': b'7: -   return timestamp_;\n'}
[7.620346] (ldlidar_component) StdoutLine: {'line': b'7: + { return timestamp_;\n'}
[7.620413] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:272:20]: Replace [\\n] with [ ]\n'}
[7.620482] (ldlidar_component) StdoutLine: {'line': b'7: -   return timestamp_;\n'}
[7.620549] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.620615] (ldlidar_component) StdoutLine: {'line': b'7: +   return timestamp_; }\n'}
[7.620682] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:275:46]: Replace [\\n] with [ ]\n'}
[7.620749] (ldlidar_component) StdoutLine: {'line': b'7: - int LiPkg::GetLidarMeasurePointFrequence(void)\n'}
[7.620816] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.620882] (ldlidar_component) StdoutLine: {'line': b'7: + int LiPkg::GetLidarMeasurePointFrequence(void) {\n'}
[7.620948] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:276:1]: Replace [\\n  ] with [ ]\n'}
[7.621014] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.621098] (ldlidar_component) StdoutLine: {'line': b'7: -   return measure_point_frequence_;\n'}
[7.621166] (ldlidar_component) StdoutLine: {'line': b'7: + { return measure_point_frequence_;\n'}
[7.621253] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:277:34]: Replace [\\n] with [ ]\n'}
[7.621325] (ldlidar_component) StdoutLine: {'line': b'7: -   return measure_point_frequence_;\n'}
[7.621393] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.621459] (ldlidar_component) StdoutLine: {'line': b'7: +   return measure_point_frequence_; }\n'}
[7.621525] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:333:40]: Replace [\\n] with [ ]\n'}
[7.621591] (ldlidar_component) StdoutLine: {'line': b'7: - void LiPkg::EnableFilter(bool is_enable)\n'}
[7.621657] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.621723] (ldlidar_component) StdoutLine: {'line': b'7: + void LiPkg::EnableFilter(bool is_enable) {\n'}
[7.621789] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:334:1]: Replace [\\n  ] with [ ]\n'}
[7.621856] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.621923] (ldlidar_component) StdoutLine: {'line': b'7: -   is_filter_ = is_enable;\n'}
[7.621989] (ldlidar_component) StdoutLine: {'line': b'7: + { is_filter_ = is_enable;\n'}
[7.622056] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:335:25]: Replace [\\n] with [ ]\n'}
[7.622123] (ldlidar_component) StdoutLine: {'line': b'7: -   is_filter_ = is_enable;\n'}
[7.622196] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.622274] (ldlidar_component) StdoutLine: {'line': b'7: +   is_filter_ = is_enable; }\n'}
[7.622343] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:338:39]: Replace [\\n] with [ ]\n'}
[7.622411] (ldlidar_component) StdoutLine: {'line': b'7: - LidarStatus LiPkg::GetLidarStatus(void)\n'}
[7.622478] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.622545] (ldlidar_component) StdoutLine: {'line': b'7: + LidarStatus LiPkg::GetLidarStatus(void) {\n'}
[7.622611] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:339:1]: Replace [\\n  ] with [ ]\n'}
[7.622677] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.622743] (ldlidar_component) StdoutLine: {'line': b'7: -   return lidarstatus_;\n'}
[7.622808] (ldlidar_component) StdoutLine: {'line': b'7: + { return lidarstatus_;\n'}
[7.622874] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:340:22]: Replace [\\n] with [ ]\n'}
[7.622941] (ldlidar_component) StdoutLine: {'line': b'7: -   return lidarstatus_;\n'}
[7.623006] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.623072] (ldlidar_component) StdoutLine: {'line': b'7: +   return lidarstatus_; }\n'}
[7.623138] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/dataprocess/lipkg.cpp:350:1]: Replace [ ] with [  ]\n'}
[7.623222] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.623300] (ldlidar_component) StdoutLine: {'line': b'7: + }  // namespace ldlidar\n'}
[7.623368] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.623435] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/src/filter/tofbf.cpp':\n"}
[7.623502] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.623568] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:34:24]: Replace [/] with [  ]\n'}
[7.623636] (ldlidar_component) StdoutLine: {'line': b'7: -   curr_speed_ = speed; // ldliar spin speed, unit is Degrees per second\n'}
[7.623703] (ldlidar_component) StdoutLine: {'line': b'7: +   curr_speed_ = speed; /   ldliar spin speed, unit is Degrees per second\n'}
[7.623771] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:64:1]: Replace [ co] with []\n'}
[7.623839] (ldlidar_component) StdoutLine: {'line': b'7: -   const std::vector<PointData> & tmp) const\n'}
[7.623915] (ldlidar_component) StdoutLine: {'line': b'7: +  nst std::vector<PointData> & tmp) const\n'}
[7.623983] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:86:1]: Replace [ co] with []\n'}
[7.624051] (ldlidar_component) StdoutLine: {'line': b'7: -   const std::vector<PointData> & tmp) const\n'}
[7.624117] (ldlidar_component) StdoutLine: {'line': b'7: +  nst std::vector<PointData> & tmp) const\n'}
[7.624190] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:100:22]: Replace [] with [\\n    ]\n'}
[7.624271] (ldlidar_component) StdoutLine: {'line': b'7: -   if (tmp.empty()) {return normal;}\n'}
[7.624341] (ldlidar_component) StdoutLine: {'line': b'7: +   if (tmp.empty()) {re\n'}
[7.624414] (ldlidar_component) StdoutLine: {'line': b'7: +     turn normal;}\n'}
[7.624493] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:101:0]: Replace [] with [\\n  ]\n'}
[7.624562] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.624628] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.624694] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.624759] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:107:1]: Replace [   []] with [ ]\n'}
[7.624826] (ldlidar_component) StdoutLine: {'line': b'7: -     [](PointData a, PointData b) {return a.angle < b.angle;});\n'}
[7.624892] (ldlidar_component) StdoutLine: {'line': b'7: +   (PointData a, PointData b) {return a.angle < b.angle;});\n'}
[7.624958] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:107:36]: Replace [] with [ ]\n'}
[7.625025] (ldlidar_component) StdoutLine: {'line': b'7: -     [](PointData a, PointData b) {return a.angle < b.angle;});\n'}
[7.625091] (ldlidar_component) StdoutLine: {'line': b'7: +     [](PointData a, PointData b) {re turn a.angle < b.angle;});\n'}
[7.625157] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:107:61]: Replace [] with [ ]\n'}
[7.625239] (ldlidar_component) StdoutLine: {'line': b'7: -     [](PointData a, PointData b) {return a.angle < b.angle;});\n'}
[7.625311] (ldlidar_component) StdoutLine: {'line': b'7: +     [](PointData a, PointData b) {return a.angle < b.angle;}) ;\n'}
[7.625376] (-) TimerEvent: {}
[7.625522] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:112:10]: Replace [] with [\\n      ]\n'}
[7.625607] (ldlidar_component) StdoutLine: {'line': b'7: -     if (fabs(n.angle - last.angle) > angle_delta_up_limit ||\n'}
[7.625678] (ldlidar_component) StdoutLine: {'line': b'7: +     if (fa\n'}
[7.625745] (ldlidar_component) StdoutLine: {'line': b'7: +       bs(n.angle - last.angle) > angle_delta_up_limit ||\n'}
[7.625812] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:114:1]: Replace [   {\\n] with [ ]\n'}
[7.625880] (ldlidar_component) StdoutLine: {'line': b'7: -     {\n'}
[7.625947] (ldlidar_component) StdoutLine: {'line': b'7: -       if (item.empty() == false) {\n'}
[7.626014] (ldlidar_component) StdoutLine: {'line': b'7: +         if (item.empty() == false) {\n'}
[7.626081] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:124:32]: Replace [] with [\\n    ]\n'}
[7.626148] (ldlidar_component) StdoutLine: {'line': b'7: -   if (item.empty() == false) {group.push_back(item);}\n'}
[7.626361] (ldlidar_component) StdoutLine: {'line': b'7: +   if (item.empty() == false) {gr\n'}
[7.626443] (ldlidar_component) StdoutLine: {'line': b'7: +     oup.push_back(item);}\n'}
[7.626512] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:125:0]: Replace [] with [\\n  ]\n'}
[7.626581] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.626648] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.626715] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.626782] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:126:24]: Replace [] with [\\n    ]\n'}
[7.626864] (ldlidar_component) StdoutLine: {'line': b'7: -   if (group.empty()) {return normal;}\n'}
[7.626932] (ldlidar_component) StdoutLine: {'line': b'7: +   if (group.empty()) {re\n'}
[7.627000] (ldlidar_component) StdoutLine: {'line': b'7: +     turn normal;}\n'}
[7.627067] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:127:0]: Replace [] with [\\n  ]\n'}
[7.627135] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.627215] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.627293] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.627360] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:131:8]: Replace [] with [\\n    ]\n'}
[7.627428] (ldlidar_component) StdoutLine: {'line': b'7: -   if (fabs(first_item.angle + 360.f - last_item.angle) < angle_delta_up_limit &&\n'}
[7.627496] (ldlidar_component) StdoutLine: {'line': b'7: +   if (fa\n'}
[7.627562] (ldlidar_component) StdoutLine: {'line': b'7: +     bs(first_item.angle + 360.f - last_item.angle) < angle_delta_up_limit &&\n'}
[7.627629] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:133:1]: Replace [ {\\n] with [ ]\n'}
[7.627695] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.627761] (ldlidar_component) StdoutLine: {'line': b'7: -     group.front().insert(group.front().begin(), group.back().begin(), group.back().end());\n'}
[7.627827] (ldlidar_component) StdoutLine: {'line': b'7: +       group.front().insert(group.front().begin(), group.back().begin(), group.back().end());\n'}
[7.627894] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:139:26]: Replace [] with [\\n      ]\n'}
[7.627961] (ldlidar_component) StdoutLine: {'line': b'7: -     if (n.size() == 0) {continue;}\n'}
[7.628027] (ldlidar_component) StdoutLine: {'line': b'7: +     if (n.size() == 0) {co\n'}
[7.628092] (ldlidar_component) StdoutLine: {'line': b'7: +       ntinue;}\n'}
[7.628158] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:140:0]: Replace [] with [\\n    ]\n'}
[7.628252] (ldlidar_component) StdoutLine: {'line': b'7: -     // No filtering if there are many points\n'}
[7.628326] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.628393] (ldlidar_component) StdoutLine: {'line': b'7: +         // No filtering if there are many points\n'}
[7.628460] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:154:27]: Replace [] with [ ]\n'}
[7.628528] (ldlidar_component) StdoutLine: {'line': b'7: -         for (auto & point: n) {\n'}
[7.628595] (ldlidar_component) StdoutLine: {'line': b'7: +         for (auto & point:  n) {\n'}
[7.628662] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:191:1]: Replace [ co] with []\n'}
[7.628729] (ldlidar_component) StdoutLine: {'line': b'7: -   const std::vector<PointData> & tmp) const\n'}
[7.628795] (ldlidar_component) StdoutLine: {'line': b'7: +  nst std::vector<PointData> & tmp) const\n'}
[7.628862] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:196:22]: Replace [] with [\\n    ]\n'}
[7.628930] (ldlidar_component) StdoutLine: {'line': b'7: -   if (tmp.empty()) {return normal;}\n'}
[7.628996] (ldlidar_component) StdoutLine: {'line': b'7: +   if (tmp.empty()) {re\n'}
[7.629062] (ldlidar_component) StdoutLine: {'line': b'7: +     turn normal;}\n'}
[7.629128] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:197:0]: Replace [] with [\\n  ]\n'}
[7.629203] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.629281] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.629349] (ldlidar_component) StdoutLine: {'line': b'7: +   \n'}
[7.629415] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:216:12]: Replace [] with [\\n        ]\n'}
[7.629482] (ldlidar_component) StdoutLine: {'line': b'7: -       if ((n.distance + 10 < last_data.distance && n.distance + 10 < next_data.distance) ||\n'}
[7.629561] (ldlidar_component) StdoutLine: {'line': b'7: +       if ((n\n'}
[7.629629] (ldlidar_component) StdoutLine: {'line': b'7: +         .distance + 10 < last_data.distance && n.distance + 10 < next_data.distance) ||\n'}
[7.629697] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:218:1]: Replace [     {\\n] with [ ]\n'}
[7.629770] (ldlidar_component) StdoutLine: {'line': b'7: -       {\n'}
[7.629838] (ldlidar_component) StdoutLine: {'line': b'7: -         if (n.intensity < 60) {\n'}
[7.629905] (ldlidar_component) StdoutLine: {'line': b'7: +           if (n.intensity < 60) {\n'}
[7.629970] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:225:19]: Replace [] with [\\n        ]\n'}
[7.630037] (ldlidar_component) StdoutLine: {'line': b'7: -       } else if ((n.distance + 7 < last_data.distance && n.distance + 7 < next_data.distance) ||\n'}
[7.630104] (ldlidar_component) StdoutLine: {'line': b'7: +       } else if ((n\n'}
[7.630170] (ldlidar_component) StdoutLine: {'line': b'7: +         .distance + 7 < last_data.distance && n.distance + 7 < next_data.distance) ||\n'}
[7.630256] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:227:1]: Replace [     {\\n] with [ ]\n'}
[7.630329] (ldlidar_component) StdoutLine: {'line': b'7: -       {\n'}
[7.630397] (ldlidar_component) StdoutLine: {'line': b'7: -         if (n.intensity < 45) {\n'}
[7.630464] (ldlidar_component) StdoutLine: {'line': b'7: +           if (n.intensity < 45) {\n'}
[7.630531] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:234:19]: Replace [] with [\\n        ]\n'}
[7.630614] (ldlidar_component) StdoutLine: {'line': b'7: -       } else if ((n.distance + 5 < last_data.distance && n.distance + 5 < next_data.distance) ||\n'}
[7.630683] (ldlidar_component) StdoutLine: {'line': b'7: +       } else if ((n\n'}
[7.630750] (ldlidar_component) StdoutLine: {'line': b'7: +         .distance + 5 < last_data.distance && n.distance + 5 < next_data.distance) ||\n'}
[7.630817] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:236:1]: Replace [     {\\n] with [ ]\n'}
[7.630884] (ldlidar_component) StdoutLine: {'line': b'7: -       {\n'}
[7.630949] (ldlidar_component) StdoutLine: {'line': b'7: -         if (n.intensity < 30) {\n'}
[7.631015] (ldlidar_component) StdoutLine: {'line': b'7: +           if (n.intensity < 30) {\n'}
[7.631082] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:264:12]: Replace [] with [\\n        ]\n'}
[7.631148] (ldlidar_component) StdoutLine: {'line': b'7: -       if ((n.distance + 30 < last_data.distance || n.distance > last_data.distance + 30) &&\n'}
[7.631243] (ldlidar_component) StdoutLine: {'line': b'7: +       if ((n\n'}
[7.631318] (ldlidar_component) StdoutLine: {'line': b'7: +         .distance + 30 < last_data.distance || n.distance > last_data.distance + 30) &&\n'}
[7.631387] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:266:1]: Replace [     {\\n] with [ ]\n'}
[7.631454] (ldlidar_component) StdoutLine: {'line': b'7: -       {\n'}
[7.631520] (ldlidar_component) StdoutLine: {'line': b'7: -         if ((n.distance < 2000 && n.intensity < 30) || n.intensity < 20) {\n'}
[7.631588] (ldlidar_component) StdoutLine: {'line': b'7: +           if ((n.distance < 2000 && n.intensity < 30) || n.intensity < 20) {\n'}
[7.631654] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/filter/tofbf.cpp:280:3]: Replace [/] with [  ]\n'}
[7.631721] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.631787] (ldlidar_component) StdoutLine: {'line': b'7: + } /   namespace ldlidar\n'}
[7.631853] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.631920] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/src/logger/log_module.cpp':\n"}
[7.631987] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.632053] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:18:0]: Replace [#include "log_module.h"\\n\\n#include <time.h>\\n#include <string.h>] with [#include "log_module.h"\\n\\n#include <string.h>\\n#include <time.h>]\n'}
[7.632135] (ldlidar_component) StdoutLine: {'line': b'7: - #include "log_module.h"\n'}
[7.632216] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.632292] (ldlidar_component) StdoutLine: {'line': b'7: - #include <time.h>\n'}
[7.632360] (ldlidar_component) StdoutLine: {'line': b'7: - #include <string.h>\n'}
[7.632427] (ldlidar_component) StdoutLine: {'line': b'7: + #include "log_module.h"\n'}
[7.632494] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.632560] (ldlidar_component) StdoutLine: {'line': b'7: + #include <string.h>\n'}
[7.632626] (ldlidar_component) StdoutLine: {'line': b'7: + #include <time.h>\n'}
[7.632692] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:27:0]: Replace [#include <stdlib.h>\\n#include <pthread.h>] with [#include <pthread.h>\\n#include <stdlib.h>]\n'}
[7.632760] (ldlidar_component) StdoutLine: {'line': b'7: - #include <stdlib.h>\n'}
[7.632825] (ldlidar_component) StdoutLine: {'line': b'7: - #include <pthread.h>\n'}
[7.632892] (ldlidar_component) StdoutLine: {'line': b'7: + #include <pthread.h>\n'}
[7.632957] (ldlidar_component) StdoutLine: {'line': b'7: + #include <stdlib.h>\n'}
[7.633023] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:34:18]: Replace [ul] with [ ]\n'}
[7.633090] (ldlidar_component) StdoutLine: {'line': b'7: - LogModule * LogModule::s_plog_module_ = NULL;\n'}
[7.633156] (ldlidar_component) StdoutLine: {'line': b'7: + LogModule * LogMod e::s_plog_module_ = NULL;\n'}
[7.633248] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:34:36]: Replace [_ ] with [ ]\n'}
[7.633322] (ldlidar_component) StdoutLine: {'line': b'7: - LogModule * LogModule::s_plog_module_ = NULL;\n'}
[7.633390] (ldlidar_component) StdoutLine: {'line': b'7: + LogModule * LogModule::s_plog_module = NULL;\n'}
[7.633457] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:38:11]: Replace [t c] with [\\n\\n]\n'}
[7.633525] (ldlidar_component) StdoutLine: {'line': b'7: -   __in const char * filename, __in const char * funcname,\n'}
[7.633593] (ldlidar_component) StdoutLine: {'line': b'7: +   __in cons\n'}
[7.633661] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.633728] (ldlidar_component) StdoutLine: {'line': b'7: + har * filename, __in const char * funcname,\n'}
[7.633794] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:39:49]: Replace [n *] with [ ]\n'}
[7.633862] (ldlidar_component) StdoutLine: {'line': b'7: -   __in int lineno, LogLevel level, ILogRealization * plog)\n'}
[7.633930] (ldlidar_component) StdoutLine: {'line': b'7: +   __in int lineno, LogLevel level, ILogRealizatio  plog)\n'}
[7.633998] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:41:23]: Replace [ ] with [\\n  ]\n'}
[7.634065] (ldlidar_component) StdoutLine: {'line': b'7: -   if (s_plog_module_ == NULL) {\n'}
[7.634133] (ldlidar_component) StdoutLine: {'line': b'7: +   if (s_plog_module_ ==\n'}
[7.634219] (ldlidar_component) StdoutLine: {'line': b'7: +   NULL) {\n'}
[7.634301] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:88:28]: Replace [c] with [ ]\n'}
[7.634371] (ldlidar_component) StdoutLine: {'line': b'7: - void LogModule::LogPrintInf(const char * format, ...)\n'}
[7.634448] (ldlidar_component) StdoutLine: {'line': b'7: + void LogModule::LogPrintInf( onst char * format, ...)\n'}
[7.634518] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:88:30]: Replace [nst] with [ ]\n'}
[7.634586] (ldlidar_component) StdoutLine: {'line': b'7: - void LogModule::LogPrintInf(const char * format, ...)\n'}
[7.634654] (ldlidar_component) StdoutLine: {'line': b'7: + void LogModule::LogPrintInf(co  char * format, ...)\n'}
[7.634728] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:88:46]: Replace [t] with [ ]\n'}
[7.634797] (ldlidar_component) StdoutLine: {'line': b'7: - void LogModule::LogPrintInf(const char * format, ...)\n'}
[7.634864] (ldlidar_component) StdoutLine: {'line': b'7: + void LogModule::LogPrintInf(const char * forma , ...)\n'}
[7.634932] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:100:17]: Replace [stamp[100] ] with [\\n        ]\n'}
[7.634999] (ldlidar_component) StdoutLine: {'line': b'7: -           char s_stamp[100] = {0};\n'}
[7.635066] (ldlidar_component) StdoutLine: {'line': b'7: +           char s_\n'}
[7.635132] (ldlidar_component) StdoutLine: {'line': b'7: +         = {0};\n'}
[7.635207] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:101:20]: Replace [imestamp = ] with [\\n        ]\n'}
[7.635288] (ldlidar_component) StdoutLine: {'line': b'7: -           uint64_t timestamp = GetCurrentLocalTimeStamp();\n'}
[7.635357] (ldlidar_component) StdoutLine: {'line': b'7: +           uint64_t t\n'}
[7.635426] (ldlidar_component) StdoutLine: {'line': b'7: +         GetCurrentLocalTimeStamp();\n'}
[7.635493] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:101:55]: Replace [();\\n#ifdef ] with [\\n        ]\n'}
[7.635562] (ldlidar_component) StdoutLine: {'line': b'7: -           uint64_t timestamp = GetCurrentLocalTimeStamp();\n'}
[7.635629] (ldlidar_component) StdoutLine: {'line': b'7: - #ifdef __LP64__\n'}
[7.635697] (ldlidar_component) StdoutLine: {'line': b'7: +           uint64_t timestamp = GetCurrentLocalTimeStamp\n'}
[7.635765] (ldlidar_component) StdoutLine: {'line': b'7: +         __LP64__\n'}
[7.635833] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:103:55]: Replace [p / 1000000] with [\\n        ]\n'}
[7.635900] (ldlidar_component) StdoutLine: {'line': b'7: -           snprintf(s_stamp, 100, "[%lu.%lu]", (timestamp / 1000000000), (timestamp % 1000000000));\n'}
[7.635981] (ldlidar_component) StdoutLine: {'line': b'7: +           snprintf(s_stamp, 100, "[%lu.%lu]", (timestam\n'}
[7.636050] (ldlidar_component) StdoutLine: {'line': b'7: +         000), (timestamp % 1000000000));\n'}
[7.636117] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:106:55]: Replace [p / 1000000] with [\\n        ]\n'}
[7.636191] (ldlidar_component) StdoutLine: {'line': b'7: -           snprintf(s_stamp, 100, "[%lu.%lu]", (timestamp / 1000000000), (timestamp % 1000000000));\n'}
[7.636282] (ldlidar_component) StdoutLine: {'line': b'7: +           snprintf(s_stamp, 100, "[%lu.%lu]", (timestam\n'}
[7.636351] (ldlidar_component) StdoutLine: {'line': b'7: +         000), (timestamp % 1000000000));\n'}
[7.636418] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:108:55]: Replace [amp / 10000] with [\\n        ]\n'}
[7.636487] (ldlidar_component) StdoutLine: {'line': b'7: -           snprintf(s_stamp, 100, "[%llu.%llu]", (timestamp / 1000000000), (timestamp % 1000000000));\n'}
[7.636555] (ldlidar_component) StdoutLine: {'line': b'7: +           snprintf(s_stamp, 100, "[%llu.%llu]", (timest\n'}
[7.636622] (ldlidar_component) StdoutLine: {'line': b'7: +         00000), (timestamp % 1000000000));\n'}
[7.636689] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:113:9]: Replace [reak;\\n     ] with [\\n        ]\n'}
[7.636757] (ldlidar_component) StdoutLine: {'line': b'7: -         break;\n'}
[7.636824] (ldlidar_component) StdoutLine: {'line': b'7: -       default: {\n'}
[7.636891] (ldlidar_component) StdoutLine: {'line': b'7: +         b\n'}
[7.636959] (ldlidar_component) StdoutLine: {'line': b'7: +          default: {\n'}
[7.637026] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:115:13]: Replace [\xe9\x97\xb4   [week] with [\\n      ]\n'}
[7.637096] (ldlidar_component) StdoutLine: {'line': b'7: -           //\xe6\x97\xb6\xe9\x97\xb4   [week month day hours:minutes:seconds year]\n'}
[7.637176] (ldlidar_component) StdoutLine: {'line': b'7: +           //\xe6\x97\xb6\n'}
[7.637261] (ldlidar_component) StdoutLine: {'line': b'7: +        month day hours:minutes:seconds year]\n'}
[7.637336] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:115:23]: Replace [month day] with [ ]\n'}
[7.637405] (ldlidar_component) StdoutLine: {'line': b'7: -           //\xe6\x97\xb6\xe9\x97\xb4   [week month day hours:minutes:seconds year]\n'}
[7.637474] (ldlidar_component) StdoutLine: {'line': b'7: +           //\xe6\x97\xb6\xe9\x97\xb4   [week   hours:minutes:seconds year]\n'}
[7.637542] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:115:55]: Replace [year]\\n     ] with [\\n        ]\n'}
[7.637610] (ldlidar_component) StdoutLine: {'line': b'7: -           //\xe6\x97\xb6\xe9\x97\xb4   [week month day hours:minutes:seconds year]\n'}
[7.637677] (ldlidar_component) StdoutLine: {'line': b'7: -           str_temp.append(GetFormatValue(GetCurrentTime()));\n'}
[7.637745] (ldlidar_component) StdoutLine: {'line': b'7: +           //\xe6\x97\xb6\xe9\x97\xb4   [week month day hours:minutes:seconds \n'}
[7.637815] (ldlidar_component) StdoutLine: {'line': b'7: +              str_temp.append(GetFormatValue(GetCurrentTime()));\n'}
[7.637884] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:116:59]: Replace [;\\n        }] with [\\n        ]\n'}
[7.637952] (ldlidar_component) StdoutLine: {'line': b'7: -           str_temp.append(GetFormatValue(GetCurrentTime()));\n'}
[7.638019] (ldlidar_component) StdoutLine: {'line': b'7: -         }\n'}
[7.638085] (ldlidar_component) StdoutLine: {'line': b'7: +           str_temp.append(GetFormatValue(GetCurrentTime()))\n'}
[7.638154] (ldlidar_component) StdoutLine: {'line': b'7: +         \n'}
[7.638239] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:122:16]: Replace [end(GetFo] with [\\n      ]\n'}
[7.638314] (ldlidar_component) StdoutLine: {'line': b'7: -     str_temp.append(GetFormatValue(logInfo_.str_filename));\n'}
[7.638383] (ldlidar_component) StdoutLine: {'line': b'7: +     str_temp.app\n'}
[7.638451] (ldlidar_component) StdoutLine: {'line': b'7: +       rmatValue(logInfo_.str_filename));\n'}
[7.638517] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/logger/log_module.cpp:122:26]: Replace [matValue(] with [ ]\n'}
[7.638592] (ldlidar_component) StdoutLine: {'line': b'7: -     str_temp.append(GetFormatValue(logInfo_.str_filename));\n'}
[7.638662] (ldlidar_component) StdoutLine: {'line': b'7: +     str_temp.append(GetFor logInfo_.str_filename));\n'}
[7.638731] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.638799] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp':\n"}
[7.638868] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.638935] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:20:0]: Replace [#include "network_socket_interface_linux.h"\\n#include "log_module.h"] with [#include "network_socket_interface_linux.h"\\n\\n#include "log_module.h"]\n'}
[7.639007] (ldlidar_component) StdoutLine: {'line': b'7: - #include "network_socket_interface_linux.h"\n'}
[7.639075] (ldlidar_component) StdoutLine: {'line': b'7: - #include "log_module.h"\n'}
[7.639142] (ldlidar_component) StdoutLine: {'line': b'7: + #include "network_socket_interface_linux.h"\n'}
[7.639233] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.639311] (ldlidar_component) StdoutLine: {'line': b'7: + #include "log_module.h"\n'}
[7.639378] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:37:1]: Replace [\\n\\n] with [\\n]\n'}
[7.639446] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.639513] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.639589] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.639656] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.639722] (ldlidar_component) StdoutLine: {'line': b'7: + }\n'}
[7.639788] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:41:51]: Replace [\\n] with [ ]\n'}
[7.639856] (ldlidar_component) StdoutLine: {'line': b'7: - UDPSocketInterfaceLinux::~UDPSocketInterfaceLinux()\n'}
[7.639923] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.639989] (ldlidar_component) StdoutLine: {'line': b'7: + UDPSocketInterfaceLinux::~UDPSocketInterfaceLinux() {\n'}
[7.640055] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:42:1]: Replace [\\n  ] with [ ]\n'}
[7.640124] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.640198] (ldlidar_component) StdoutLine: {'line': b'7: -   CloseSocket();\n'}
[7.640278] (ldlidar_component) StdoutLine: {'line': b'7: + { CloseSocket();\n'}
[7.640347] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:43:16]: Replace [\\n] with [ ]\n'}
[7.640415] (ldlidar_component) StdoutLine: {'line': b'7: -   CloseSocket();\n'}
[7.640483] (ldlidar_component) StdoutLine: {'line': b'7: - }\n'}
[7.640551] (ldlidar_component) StdoutLine: {'line': b'7: +   CloseSocket(); }\n'}
[7.640618] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:47:41]: Replace [\\n  ] with [ ]\n'}
[7.640686] (ldlidar_component) StdoutLine: {'line': b'7: -   NetCommDevTypeDef obj, const char * ip,\n'}
[7.640754] (ldlidar_component) StdoutLine: {'line': b'7: -   const char * port)\n'}
[7.640821] (ldlidar_component) StdoutLine: {'line': b'7: +   NetCommDevTypeDef obj, const char * ip, const char * port)\n'}
[7.640888] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:49:1]: Replace [\\n\\n  ] with [\\n  ]\n'}
[7.640956] (ldlidar_component) StdoutLine: {'line': b'7: - {\n'}
[7.641022] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.641089] (ldlidar_component) StdoutLine: {'line': b'7: -   if (is_cmd_created_ == true) {\n'}
[7.641156] (ldlidar_component) StdoutLine: {'line': b'7: + {\n'}
[7.641248] (ldlidar_component) StdoutLine: {'line': b'7: +   if (is_cmd_created_ == true) {\n'}
[7.641321] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:152:44]: Replace [\\n        ] with [ ]\n'}
[7.641402] (ldlidar_component) StdoutLine: {'line': b'7: -         com_sockfd_, rx_buf, rx_buff_len, 0,\n'}
[7.641472] (ldlidar_component) StdoutLine: {'line': b'7: -         (struct sockaddr *)&sender_addr_inf, (socklen_t *)&addrlen);\n'}
[7.641540] (ldlidar_component) StdoutLine: {'line': b'7: +         com_sockfd_, rx_buf, rx_buff_len, 0, (struct sockaddr *)&sender_addr_inf, (socklen_t *)&addrlen);\n'}
[7.641609] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:153:44]: Replace [ ] with [\\n        ]\n'}
[7.641676] (ldlidar_component) StdoutLine: {'line': b'7: -         (struct sockaddr *)&sender_addr_inf, (socklen_t *)&addrlen);\n'}
[7.641742] (ldlidar_component) StdoutLine: {'line': b'7: +         (struct sockaddr *)&sender_addr_inf,\n'}
[7.641808] (ldlidar_component) StdoutLine: {'line': b'7: +         (socklen_t *)&addrlen);\n'}
[7.641874] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:204:45]: Replace [ocklen_] with [ ]\n'}
[7.641942] (ldlidar_component) StdoutLine: {'line': b'7: -       (struct sockaddr *)&recver_net_addr, (socklen_t)addrlen);\n'}
[7.642010] (ldlidar_component) StdoutLine: {'line': b'7: +       (struct sockaddr *)&recver_net_addr, (s t)addrlen);\n'}
[7.642078] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:220:15]: Replace [_ =] with [ ]\n'}
[7.642155] (ldlidar_component) StdoutLine: {'line': b'7: -   recv_callback_ = callback;\n'}
[7.642251] (ldlidar_component) StdoutLine: {'line': b'7: +   recv_callback  callback;\n'}
[7.642325] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:243:43]: Replace [Lin] with [\\n\\n]\n'}
[7.642394] (ldlidar_component) StdoutLine: {'line': b'7: - TCPSocketInterfaceLinux::TCPSocketInterfaceLinux()\n'}
[7.642461] (ldlidar_component) StdoutLine: {'line': b'7: + TCPSocketInterfaceLinux::TCPSocketInterface\n'}
[7.642528] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.642595] (ldlidar_component) StdoutLine: {'line': b'7: + ux()\n'}
[7.642663] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:255:41]: Replace [ac] with [\\n]\n'}
[7.642733] (ldlidar_component) StdoutLine: {'line': b'7: - TCPSocketInterfaceLinux::~TCPSocketInterfaceLinux()\n'}
[7.642800] (ldlidar_component) StdoutLine: {'line': b'7: + TCPSocketInterfaceLinux::~TCPSocketInterf\n'}
[7.642866] (ldlidar_component) StdoutLine: {'line': b'7: + eLinux()\n'}
[7.642933] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:260:23]: Replace [L] with [ ]\n'}
[7.643001] (ldlidar_component) StdoutLine: {'line': b'7: - bool TCPSocketInterfaceLinux::CreateSocket(\n'}
[7.643067] (ldlidar_component) StdoutLine: {'line': b'7: + bool TCPSocketInterface inux::CreateSocket(\n'}
[7.643134] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:260:25]: Replace [nux] with [ ]\n'}
[7.643212] (ldlidar_component) StdoutLine: {'line': b'7: - bool TCPSocketInterfaceLinux::CreateSocket(\n'}
[7.643303] (ldlidar_component) StdoutLine: {'line': b'7: + bool TCPSocketInterfaceLi ::CreateSocket(\n'}
[7.643375] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:260:42]: Replace [(] with [ ]\n'}
[7.643443] (ldlidar_component) StdoutLine: {'line': b'7: - bool TCPSocketInterfaceLinux::CreateSocket(\n'}
[7.643510] (ldlidar_component) StdoutLine: {'line': b'7: + bool TCPSocketInterfaceLinux::CreateSocket \n'}
[7.643577] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:264:22]: Replace [== ] with [ ]\n'}
[7.643645] (ldlidar_component) StdoutLine: {'line': b'7: -   if (is_cmd_created_ == true) {\n'}
[7.643712] (ldlidar_component) StdoutLine: {'line': b'7: +   if (is_cmd_created_  true) {\n'}
[7.643778] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:323:8]: Replace [] with [\\n      ]\n'}
[7.643847] (ldlidar_component) StdoutLine: {'line': b'7: -       accept(com_sockfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))\n'}
[7.643917] (ldlidar_component) StdoutLine: {'line': b'7: +       ac\n'}
[7.643984] (ldlidar_component) StdoutLine: {'line': b'7: +       cept(com_sockfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))\n'}
[7.644052] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:323:13]: Replace [com_soc] with [ ]\n'}
[7.644119] (ldlidar_component) StdoutLine: {'line': b'7: -       accept(com_sockfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))\n'}
[7.644206] (ldlidar_component) StdoutLine: {'line': b'7: +       accept( kfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))\n'}
[7.644291] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:323:45]: Replace [&client] with [\\n               ]\n'}
[7.644362] (ldlidar_component) StdoutLine: {'line': b'7: -       accept(com_sockfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))\n'}
[7.644431] (ldlidar_component) StdoutLine: {'line': b'7: +       accept(com_sockfd_, (struct sockaddr *)\n'}
[7.644499] (ldlidar_component) StdoutLine: {'line': b'7: +                _addr, (socklen_t *)&addrlens)))\n'}
[7.644578] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:325:39]: Replace [ %s",] with [ ]\n'}
[7.644647] (ldlidar_component) StdoutLine: {'line': b'7: -       LD_LOG_ERROR("TCP,fail to accept. %s", strerror(errno));\n'}
[7.644715] (ldlidar_component) StdoutLine: {'line': b'7: +       LD_LOG_ERROR("TCP,fail to accept.  strerror(errno));\n'}
[7.644783] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:466:15]: Replace [_ =] with [ ]\n'}
[7.644850] (ldlidar_component) StdoutLine: {'line': b'7: -   recv_callback_ = callback;\n'}
[7.644916] (ldlidar_component) StdoutLine: {'line': b'7: +   recv_callback  callback;\n'}
[7.644983] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:489:24]: Replace [C] with [  ]\n'}
[7.645050] (ldlidar_component) StdoutLine: {'line': b'7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF\n'}
[7.645118] (ldlidar_component) StdoutLine: {'line': b'7: + /********************* (  ) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF\n'}
[7.645191] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.645270] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'ldlidar_driver/src/serialcom/serial_interface_linux.cpp':\n"}
[7.645340] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.645406] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:20:0]: Replace [#include "serial_interface_linux.h"\\n#include "log_module.h"\\n\\n\\n] with [#include "serial_interface_linux.h"\\n\\n#include "log_module.h"\\n\\n]\n'}
[7.645476] (ldlidar_component) StdoutLine: {'line': b'7: - #include "serial_interface_linux.h"\n'}
[7.645543] (ldlidar_component) StdoutLine: {'line': b'7: - #include "log_module.h"\n'}
[7.645625] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.645694] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.645761] (ldlidar_component) StdoutLine: {'line': b'7: - #define MAX_ACK_BUF_LEN 4096\n'}
[7.645828] (ldlidar_component) StdoutLine: {'line': b'7: + #include "serial_interface_linux.h"\n'}
[7.645896] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.645962] (ldlidar_component) StdoutLine: {'line': b'7: + #include "log_module.h"\n'}
[7.646029] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.646095] (ldlidar_component) StdoutLine: {'line': b'7: + #define MAX_ACK_BUF_LEN 4096\n'}
[7.646162] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:36:47]: Replace [] with [ ]\n'}
[7.646248] (ldlidar_component) StdoutLine: {'line': b'7: - SerialInterfaceLinux::~SerialInterfaceLinux() {Close();}\n'}
[7.646322] (ldlidar_component) StdoutLine: {'line': b'7: + SerialInterfaceLinux::~SerialInterfaceLinux() { Close();}\n'}
[7.646390] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:36:55]: Replace [] with [ ]\n'}
[7.646457] (ldlidar_component) StdoutLine: {'line': b'7: - SerialInterfaceLinux::~SerialInterfaceLinux() {Close();}\n'}
[7.646525] (ldlidar_component) StdoutLine: {'line': b'7: + SerialInterfaceLinux::~SerialInterfaceLinux() {Close(); }\n'}
[7.646593] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:51:12]: Replace [\\n      ] with [\\n        ]\n'}
[7.646660] (ldlidar_component) StdoutLine: {'line': b'7: -   if (ioctl(\n'}
[7.646727] (ldlidar_component) StdoutLine: {'line': b"7: -       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),\n"}
[7.646793] (ldlidar_component) StdoutLine: {'line': b'7: +   if (ioctl(\n'}
[7.646859] (ldlidar_component) StdoutLine: {'line': b"7: +         com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),\n"}
[7.646926] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:52:83]: Replace [\\n      ] with [ ]\n'}
[7.647001] (ldlidar_component) StdoutLine: {'line': b"7: -       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),\n"}
[7.647070] (ldlidar_component) StdoutLine: {'line': b'7: -       &options))\n'}
[7.647138] (ldlidar_component) StdoutLine: {'line': b"7: +       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)), &options))\n"}
[7.647223] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:53:16]: Replace [\\n  ] with [ ]\n'}
[7.647302] (ldlidar_component) StdoutLine: {'line': b'7: -       &options))\n'}
[7.647370] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.647436] (ldlidar_component) StdoutLine: {'line': b'7: +       &options)) {\n'}
[7.647503] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:65:20]: Replace [ ] with [\\n    ]\n'}
[7.647572] (ldlidar_component) StdoutLine: {'line': b'7: -   options.c_lflag &= (tcflag_t) ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL |\n'}
[7.647640] (ldlidar_component) StdoutLine: {'line': b'7: +   options.c_lflag &=\n'}
[7.647706] (ldlidar_component) StdoutLine: {'line': b'7: +     (tcflag_t) ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL |\n'}
[7.647774] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:65:74]: Replace [\\n    ] with [ ]\n'}
[7.647841] (ldlidar_component) StdoutLine: {'line': b'7: -   options.c_lflag &= (tcflag_t) ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL |\n'}
[7.647908] (ldlidar_component) StdoutLine: {'line': b'7: -     ISIG | IEXTEN);                                //|ECHOPRT\n'}
[7.647975] (ldlidar_component) StdoutLine: {'line': b'7: +   options.c_lflag &= (tcflag_t) ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL | ISIG | IEXTEN);                                //|ECHOPRT\n'}
[7.648042] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:66:19]: Replace [                                ] with [  ]\n'}
[7.648109] (ldlidar_component) StdoutLine: {'line': b'7: -     ISIG | IEXTEN);                                //|ECHOPRT\n'}
[7.648175] (ldlidar_component) StdoutLine: {'line': b'7: +     ISIG | IEXTEN);  //|ECHOPRT\n'}
[7.648257] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:78:12]: Replace [\\n      ] with [\\n        ]\n'}
[7.648329] (ldlidar_component) StdoutLine: {'line': b'7: -   if (ioctl(\n'}
[7.648396] (ldlidar_component) StdoutLine: {'line': b"7: -       com_handle_, _IOC(_IOC_WRITE, 'T', 0x2B, sizeof(struct asmtermios::termios2)),\n"}
[7.648463] (ldlidar_component) StdoutLine: {'line': b'7: +   if (ioctl(\n'}
[7.648529] (ldlidar_component) StdoutLine: {'line': b"7: +         com_handle_, _IOC(_IOC_WRITE, 'T', 0x2B, sizeof(struct asmtermios::termios2)),\n"}
[7.648595] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:79:84]: Replace [\\n      ] with [ ]\n'}
[7.648662] (ldlidar_component) StdoutLine: {'line': b"7: -       com_handle_, _IOC(_IOC_WRITE, 'T', 0x2B, sizeof(struct asmtermios::termios2)),\n"}
[7.648730] (ldlidar_component) StdoutLine: {'line': b'7: -       &options))\n'}
[7.648796] (ldlidar_component) StdoutLine: {'line': b"7: +       com_handle_, _IOC(_IOC_WRITE, 'T', 0x2B, sizeof(struct asmtermios::termios2)), &options))\n"}
[7.648864] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:80:16]: Replace [\\n  ] with [ ]\n'}
[7.648931] (ldlidar_component) StdoutLine: {'line': b'7: -       &options))\n'}
[7.648998] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.649064] (ldlidar_component) StdoutLine: {'line': b'7: +       &options)) {\n'}
[7.649130] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:90:12]: Replace [\\n      ] with [\\n        ]\n'}
[7.649204] (ldlidar_component) StdoutLine: {'line': b'7: -   if (ioctl(\n'}
[7.649294] (ldlidar_component) StdoutLine: {'line': b"7: -       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),\n"}
[7.649365] (ldlidar_component) StdoutLine: {'line': b'7: +   if (ioctl(\n'}
[7.649432] (ldlidar_component) StdoutLine: {'line': b"7: +         com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),\n"}
[7.649501] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:91:83]: Replace [\\n      ] with [ ]\n'}
[7.649569] (ldlidar_component) StdoutLine: {'line': b"7: -       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),\n"}
[7.649637] (ldlidar_component) StdoutLine: {'line': b'7: -       &options))\n'}
[7.649703] (ldlidar_component) StdoutLine: {'line': b"7: +       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)), &options))\n"}
[7.649771] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:92:16]: Replace [\\n  ] with [ ]\n'}
[7.649837] (ldlidar_component) StdoutLine: {'line': b'7: -       &options))\n'}
[7.649903] (ldlidar_component) StdoutLine: {'line': b'7: -   {\n'}
[7.649969] (ldlidar_component) StdoutLine: {'line': b'7: +       &options)) {\n'}
[7.650035] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:137:38]: Replace [\\n  ] with []\n'}
[7.650101] (ldlidar_component) StdoutLine: {'line': b'7: - bool SerialInterfaceLinux::ReadFromIO(\n'}
[7.650168] (ldlidar_component) StdoutLine: {'line': b'7: -   uint8_t * rx_buf, uint32_t rx_buf_len,\n'}
[7.650251] (ldlidar_component) StdoutLine: {'line': b'7: + bool SerialInterfaceLinux::ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len,\n'}
[7.650324] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:138:40]: Replace [\\n  ] with [ ]\n'}
[7.650409] (ldlidar_component) StdoutLine: {'line': b'7: -   uint8_t * rx_buf, uint32_t rx_buf_len,\n'}
[7.650478] (ldlidar_component) StdoutLine: {'line': b'7: -   uint32_t * rx_len)\n'}
[7.650545] (ldlidar_component) StdoutLine: {'line': b'7: +   uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len)\n'}
[7.650613] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:168:37]: Replace [\\n  ] with []\n'}
[7.650680] (ldlidar_component) StdoutLine: {'line': b'7: - bool SerialInterfaceLinux::WriteToIo(\n'}
[7.650748] (ldlidar_component) StdoutLine: {'line': b'7: -   const uint8_t * tx_buf, uint32_t tx_buf_len,\n'}
[7.650814] (ldlidar_component) StdoutLine: {'line': b'7: + bool SerialInterfaceLinux::WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len,\n'}
[7.650881] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:169:46]: Replace [\\n  ] with [ ]\n'}
[7.650948] (ldlidar_component) StdoutLine: {'line': b'7: -   const uint8_t * tx_buf, uint32_t tx_buf_len,\n'}
[7.651015] (ldlidar_component) StdoutLine: {'line': b'7: -   uint32_t * tx_len)\n'}
[7.651082] (ldlidar_component) StdoutLine: {'line': b'7: +   const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len)\n'}
[7.651156] (ldlidar_component) StdoutLine: {'line': b'7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:201:1]: Replace [ ] with [  ]\n'}
[7.651257] (ldlidar_component) StdoutLine: {'line': b'7: - } // namespace ldlidar\n'}
[7.651331] (ldlidar_component) StdoutLine: {'line': b'7: + }  // namespace ldlidar\n'}
[7.651398] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.651464] (ldlidar_component) StdoutLine: {'line': b"7: Code style divergence in file 'tools/include/ldlidar_tools.hpp':\n"}
[7.651532] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.651598] (ldlidar_component) StdoutLine: {'line': b'7: [tools/include/ldlidar_tools.hpp:49:21]: Replace [\\n\\n\\n] with [\\n\\n]\n'}
[7.651665] (ldlidar_component) StdoutLine: {'line': b'7: - }  // namespace tools\n'}
[7.651732] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.651807] (ldlidar_component) StdoutLine: {'line': b'7: - \n'}
[7.651874] (ldlidar_component) StdoutLine: {'line': b'7: - #endif  // LDLIDAR_TOOLS_HPP_\n'}
[7.651940] (ldlidar_component) StdoutLine: {'line': b'7: + }  // namespace tools\n'}
[7.652006] (ldlidar_component) StdoutLine: {'line': b'7: + \n'}
[7.652072] (ldlidar_component) StdoutLine: {'line': b'7: + #endif  // LDLIDAR_TOOLS_HPP_\n'}
[7.652139] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.652218] (ldlidar_component) StdoutLine: {'line': b'7: 18 files with 844 code style divergences\n'}
[7.652295] (ldlidar_component) StdoutLine: {'line': b"7: No code style divergence in file 'tools/src/ldlidar_tools.cpp'\n"}
[7.652364] (ldlidar_component) StdoutLine: {'line': b'7: \n'}
[7.652431] (ldlidar_component) StdoutLine: {'line': b'7: -- run_test.py: return code 1\n'}
[7.652499] (ldlidar_component) StdoutLine: {'line': b"7: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/clang_format.xunit.xml'\n"}
[7.652571] (ldlidar_component) StdoutLine: {'line': b'7/7 Test #7: clang_format .....................***Failed    2.55 sec\n'}
[7.652639] (ldlidar_component) StdoutLine: {'line': b'\n'}
[7.652707] (ldlidar_component) StdoutLine: {'line': b'43% tests passed\x1b[0;0m, \x1b[0;31m4 tests failed\x1b[0;0m out of 7\n'}
[7.652776] (ldlidar_component) StdoutLine: {'line': b'\n'}
[7.652842] (ldlidar_component) StdoutLine: {'line': b'Label Time Summary:\n'}
[7.652910] (ldlidar_component) StdoutLine: {'line': b'clang_format    =   2.55 sec*proc (1 test)\n'}
[7.652978] (ldlidar_component) StdoutLine: {'line': b'copyright       =   0.87 sec*proc (1 test)\n'}
[7.653045] (ldlidar_component) StdoutLine: {'line': b'cppcheck        =   0.46 sec*proc (1 test)\n'}
[7.653111] (ldlidar_component) StdoutLine: {'line': b'cpplint         =   1.41 sec*proc (1 test)\n'}
[7.653177] (ldlidar_component) StdoutLine: {'line': b'lint_cmake      =   0.27 sec*proc (1 test)\n'}
[7.653259] (ldlidar_component) StdoutLine: {'line': b'linter          =   7.13 sec*proc (7 tests)\n'}
[7.653330] (ldlidar_component) StdoutLine: {'line': b'uncrustify      =   0.45 sec*proc (1 test)\n'}
[7.653397] (ldlidar_component) StdoutLine: {'line': b'xmllint         =   1.13 sec*proc (1 test)\n'}
[7.653463] (ldlidar_component) StdoutLine: {'line': b'\n'}
[7.653530] (ldlidar_component) StdoutLine: {'line': b'Total Test time (real) =   7.14 sec\n'}
[7.653597] (ldlidar_component) StdoutLine: {'line': b'\n'}
[7.653663] (ldlidar_component) StdoutLine: {'line': b'The following tests FAILED:\n'}
[7.653729] (ldlidar_component) StdoutLine: {'line': b'\t\x1b[0;31m  1 - copyright (Failed)\x1b[0;0m\n'}
[7.653796] (ldlidar_component) StdoutLine: {'line': b'\t\x1b[0;31m  3 - cpplint (Failed)\x1b[0;0m\n'}
[7.653862] (ldlidar_component) StdoutLine: {'line': b'\t\x1b[0;31m  4 - lint_cmake (Failed)\x1b[0;0m\n'}
[7.653928] (ldlidar_component) StdoutLine: {'line': b'\t\x1b[0;31m  7 - clang_format (Failed)\x1b[0;0m\n'}
[7.653997] (ldlidar_component) StderrLine: {'line': b'Errors while running CTest\n'}
[7.654094] (ldlidar_component) StderrLine: {'line': b'Output from these tests are in: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/Testing/Temporary/LastTest.log\n'}
[7.654168] (ldlidar_component) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[7.654267] (ldlidar_component) CommandEnded: {'returncode': 8}
[7.654689] (ldlidar_component) TestFailure: {'identifier': 'ldlidar_component'}
[7.654725] (ldlidar_component) JobEnded: {'identifier': 'ldlidar_component', 'rc': 0}
[7.655574] (ldlidar_node) JobStarted: {'identifier': 'ldlidar_node'}
[7.655720] (ldlidar_node) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_node', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'udito'), ('SSH_CLIENT', '192.168.1.14 53544 22'), ('LC_TIME', 'es_ES.UTF-8'), ('XDG_SESSION_TYPE', 'tty'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_component/lib:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_wait_set/lib:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_subscriber/lib:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_composition/lib:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_component/lib:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_wait_set/lib:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_subscriber/lib:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_composition/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('MOTD_SHOWN', 'pam'), ('HOME', '/home/udito'), ('OLDPWD', '/home/udito/OneDrive/UDITO/udito/ros2_ws/src'), ('SSH_TTY', '/dev/pts/0'), ('ROS_PYTHON_VERSION', '3'), ('GTK_MODULES', 'appmenu-gtk-module'), ('PS1', '(python-3.9.21) \\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$'), ('LC_MONETARY', 'es_ES.UTF-8'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('_colcon_cd_root', '/opt/ros/humble/'), ('UBUNTU_MENUPROXY', '1'), ('COLCON_PREFIX_PATH', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'udito'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('TERM', 'xterm'), ('XDG_SESSION_ID', '5'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/home/udito/.local/bin:/opt/ros/humble/bin:/home/vboxuser/OneDrive/UDITO/udito/python-3.9.21/bin:/home/udito/.local/bin:/home/udito/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'), ('LC_ADDRESS', 'es_ES.UTF-8'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', 'localhost:10.0'), ('LANG', 'en_US.UTF-8'), ('LC_TELEPHONE', 'es_ES.UTF-8'), ('VIRTUAL_ENV_PROMPT', '(python-3.9.21)'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('AMENT_PREFIX_PATH', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/py_test_package:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_node:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_component:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/launch_testing_examples:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_pointcloud_publisher:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_service:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_guard_conditions:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_executors:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_wait_set:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_multithreaded_executor:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_timer:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_service:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_composition:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_cbg_executor:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_async_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/py_test_package:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_node:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_component:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/launch_testing_examples:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_pointcloud_publisher:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_service:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_guard_conditions:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_executors:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_wait_set:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_multithreaded_executor:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_timer:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_service:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_composition:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_cbg_executor:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_async_client:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('LC_NAME', 'es_ES.UTF-8'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'es_ES.UTF-8'), ('LC_IDENTIFICATION', 'es_ES.UTF-8'), ('VIRTUAL_ENV', '/home/vboxuser/OneDrive/UDITO/udito/python-3.9.21'), ('PWD', '/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_node'), ('LC_ALL', 'en_US.UTF-8'), ('SSH_CONNECTION', '192.168.1.14 53544 192.168.1.28 22'), ('XDG_DATA_DIRS', '/home/udito/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/udito/OneDrive/UDITO/udito/ros2_ws/install/py_test_package/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/launch_testing_examples/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_pointcloud_publisher/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_subscriber/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_service/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_publisher/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_client/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_action_server/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_minimal_action_client/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_guard_conditions/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclpy_executors/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/py_test_package/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/launch_testing_examples/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_pointcloud_publisher/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_subscriber/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_service/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_publisher/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_client/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_action_server/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_minimal_action_client/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_guard_conditions/lib/python3.10/site-packages:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclpy_executors/lib/python3.10/site-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('LC_NUMERIC', 'es_ES.UTF-8'), ('LC_PAPER', 'es_ES.UTF-8'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_node:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_component:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/ldlidar_node:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_wait_set:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_multithreaded_executor:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_timer:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_service:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_composition:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_cbg_executor:/home/udito/OneDrive/UDITO/udito/ros2_ws/install/examples_rclcpp_async_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/ldlidar_component:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_wait_set:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_multithreaded_executor:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_timer:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_subscriber:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_service:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_publisher:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_composition:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_action_server:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_minimal_action_client:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_cbg_executor:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/install/examples_rclcpp_async_client')]), 'shell': False}
[7.656539] (ldlidar_node) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_node/CTestConfiguration.ini\n'}
[7.656661] (ldlidar_node) StdoutLine: {'line': b'Parse Config file:/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_node/CTestConfiguration.ini\n'}
[7.656741] (ldlidar_node) StdoutLine: {'line': b'   Site: udito\n'}
[7.656812] (ldlidar_node) StdoutLine: {'line': b'   Build name: (empty)\n'}
[7.656881] (ldlidar_node) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[7.656951] (ldlidar_node) StdoutLine: {'line': b'Create new tag: 20250306-1310 - Experimental\n'}
[7.657020] (ldlidar_node) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/CTestConfiguration.ini\n'}
[7.657090] (ldlidar_node) StdoutLine: {'line': b'Parse Config file:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/CTestConfiguration.ini\n'}
[7.657158] (ldlidar_node) StdoutLine: {'line': b'Test project /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node\n'}
[7.657249] (ldlidar_node) StdoutLine: {'line': b'Constructing a list of tests\n'}
[7.657323] (ldlidar_node) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[7.657391] (ldlidar_node) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[7.657457] (ldlidar_node) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[7.657525] (ldlidar_node) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[7.657592] (ldlidar_node) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[7.657659] (ldlidar_node) StdoutLine: {'line': b'test 1\n'}
[7.657725] (ldlidar_node) StdoutLine: {'line': b'    Start 1: copyright\n'}
[7.657792] (ldlidar_node) StdoutLine: {'line': b'\n'}
[7.657860] (ldlidar_node) StdoutLine: {'line': b'1: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/copyright.xunit.xml" "--package-name" "ldlidar_node" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/ament_copyright/copyright.txt" "--command" "/opt/ros/humble/bin/ament_copyright" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/copyright.xunit.xml"\n'}
[7.657946] (ldlidar_node) StdoutLine: {'line': b'1: Test timeout computed to be: 200\n'}
[7.723591] (ldlidar_node) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node':\n"}
[7.723890] (ldlidar_node) StdoutLine: {'line': b'1:  - /opt/ros/humble/bin/ament_copyright --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/copyright.xunit.xml\n'}
[7.726238] (-) TimerEvent: {}
[7.826539] (-) TimerEvent: {}
[7.926835] (-) TimerEvent: {}
[8.027124] (-) TimerEvent: {}
[8.127414] (-) TimerEvent: {}
[8.227694] (-) TimerEvent: {}
[8.241265] (ldlidar_node) StdoutLine: {'line': b'1: No problems found, checked 6 files\n'}
[8.257772] (ldlidar_node) StdoutLine: {'line': b'1: -- run_test.py: return code 0\n'}
[8.258137] (ldlidar_node) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/copyright.xunit.xml'\n"}
[8.274325] (ldlidar_node) StdoutLine: {'line': b'1/8 Test #1: copyright ........................   Passed    0.66 sec\n'}
[8.274654] (ldlidar_node) StdoutLine: {'line': b'test 2\n'}
[8.274783] (ldlidar_node) StdoutLine: {'line': b'    Start 2: cppcheck\n'}
[8.274937] (ldlidar_node) StdoutLine: {'line': b'\n'}
[8.275038] (ldlidar_node) StdoutLine: {'line': b'2: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/cppcheck.xunit.xml" "--package-name" "ldlidar_node" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/humble/bin/ament_cppcheck" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/cppcheck.xunit.xml"\n'}
[8.275131] (ldlidar_node) StdoutLine: {'line': b'2: Test timeout computed to be: 300\n'}
[8.327817] (-) TimerEvent: {}
[8.388915] (ldlidar_node) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node':\n"}
[8.389277] (ldlidar_node) StdoutLine: {'line': b'2:  - /opt/ros/humble/bin/ament_cppcheck --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/cppcheck.xunit.xml\n'}
[8.427923] (-) TimerEvent: {}
[8.511440] (ldlidar_node) StdoutLine: {'line': b'2: cppcheck 2.7 has known performance issues and therefore will not be used, set the AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS environment variable to override this.\n'}
[8.528055] (-) TimerEvent: {}
[8.528668] (ldlidar_node) StdoutLine: {'line': b'2: -- run_test.py: return code 0\n'}
[8.528969] (ldlidar_node) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/cppcheck.xunit.xml'\n"}
[8.543556] (ldlidar_node) StdoutLine: {'line': b'2/8 Test #2: cppcheck .........................   Passed    0.27 sec\n'}
[8.543833] (ldlidar_node) StdoutLine: {'line': b'test 3\n'}
[8.543925] (ldlidar_node) StdoutLine: {'line': b'    Start 3: cpplint\n'}
[8.544000] (ldlidar_node) StdoutLine: {'line': b'\n'}
[8.544073] (ldlidar_node) StdoutLine: {'line': b'3: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/cpplint.xunit.xml" "--package-name" "ldlidar_node" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/ament_cpplint/cpplint.txt" "--command" "/opt/ros/humble/bin/ament_cpplint" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/cpplint.xunit.xml"\n'}
[8.544151] (ldlidar_node) StdoutLine: {'line': b'3: Test timeout computed to be: 120\n'}
[8.628170] (-) TimerEvent: {}
[8.653744] (ldlidar_node) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node':\n"}
[8.653940] (ldlidar_node) StdoutLine: {'line': b'3:  - /opt/ros/humble/bin/ament_cpplint --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/cpplint.xunit.xml\n'}
[8.728254] (-) TimerEvent: {}
[8.804712] (ldlidar_node) StdoutLine: {'line': b"3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node/src' argument\n"}
[8.804922] (ldlidar_node) StdoutLine: {'line': b'3: \n'}
[8.805004] (ldlidar_node) StdoutLine: {'line': b'3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node/src/ldlidar_container_node.cpp\n'}
[8.805137] (ldlidar_node) StdoutLine: {'line': b'3: \n'}
[8.805241] (ldlidar_node) StdoutLine: {'line': b'3: No problems found\n'}
[8.821493] (ldlidar_node) StdoutLine: {'line': b'3: -- run_test.py: return code 0\n'}
[8.821774] (ldlidar_node) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/cpplint.xunit.xml'\n"}
[8.828363] (-) TimerEvent: {}
[8.837163] (ldlidar_node) StdoutLine: {'line': b'3/8 Test #3: cpplint ..........................   Passed    0.29 sec\n'}
[8.837395] (ldlidar_node) StdoutLine: {'line': b'test 4\n'}
[8.837484] (ldlidar_node) StdoutLine: {'line': b'    Start 4: flake8\n'}
[8.837630] (ldlidar_node) StdoutLine: {'line': b'\n'}
[8.837720] (ldlidar_node) StdoutLine: {'line': b'4: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/flake8.xunit.xml" "--package-name" "ldlidar_node" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/ament_flake8/flake8.txt" "--command" "/opt/ros/humble/bin/ament_flake8" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/flake8.xunit.xml"\n'}
[8.837820] (ldlidar_node) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[8.928475] (-) TimerEvent: {}
[8.964050] (ldlidar_node) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node':\n"}
[8.964254] (ldlidar_node) StdoutLine: {'line': b'4:  - /opt/ros/humble/bin/ament_flake8 --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/flake8.xunit.xml\n'}
[9.028589] (-) TimerEvent: {}
[9.128916] (-) TimerEvent: {}
[9.229266] (-) TimerEvent: {}
[9.329677] (-) TimerEvent: {}
[9.430051] (-) TimerEvent: {}
[9.530604] (-) TimerEvent: {}
[9.631163] (-) TimerEvent: {}
[9.731746] (-) TimerEvent: {}
[9.832373] (-) TimerEvent: {}
[9.932672] (-) TimerEvent: {}
[10.033096] (-) TimerEvent: {}
[10.133395] (-) TimerEvent: {}
[10.166971] (ldlidar_node) StdoutLine: {'line': b'4: from launch_ros.actions import Node, LifecycleNode\n'}
[10.167179] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.167423] (ldlidar_node) StdoutLine: {'line': b'4:     \n'}
[10.167522] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.167606] (ldlidar_node) StdoutLine: {'line': b'4:     \n'}
[10.167686] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.167762] (ldlidar_node) StdoutLine: {'line': b'4:         arguments=[["-d"], [rviz2_config]]\n'}
[10.167837] (ldlidar_node) StdoutLine: {'line': b'4:                     ^\n'}
[10.167913] (ldlidar_node) StdoutLine: {'line': b'4: from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription\n'}
[10.167989] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.168062] (ldlidar_node) StdoutLine: {'line': b'4: from launch_ros.actions import Node, LifecycleNode\n'}
[10.168134] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.168217] (ldlidar_node) StdoutLine: {'line': b'4:     \n'}
[10.168297] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.168368] (ldlidar_node) StdoutLine: {'line': b"4:     node_name = LaunchConfiguration('node_name')\n"}
[10.168437] (ldlidar_node) StdoutLine: {'line': b'4:     ^\n'}
[10.168506] (ldlidar_node) StdoutLine: {'line': b'4:     slam_toolbox_node = LifecycleNode(          \n'}
[10.168574] (ldlidar_node) StdoutLine: {'line': b'4:                                       ^\n'}
[10.168643] (ldlidar_node) StdoutLine: {'line': b'4:             slam_config_path # Parameters\n'}
[10.168727] (ldlidar_node) StdoutLine: {'line': b'4:                             ^\n'}
[10.168796] (ldlidar_node) StdoutLine: {'line': b'4:           ]          \n'}
[10.168865] (ldlidar_node) StdoutLine: {'line': b'4:            ^\n'}
[10.168935] (ldlidar_node) StdoutLine: {'line': b'4:         arguments=[["-d"], [rviz2_config]]\n'}
[10.169003] (ldlidar_node) StdoutLine: {'line': b'4:                     ^\n'}
[10.169072] (ldlidar_node) StdoutLine: {'line': b'4:     ld.add_action(slam_toolbox_node)    \n'}
[10.169140] (ldlidar_node) StdoutLine: {'line': b'4:                                     ^\n'}
[10.169223] (ldlidar_node) StdoutLine: {'line': b'4: from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription\n'}
[10.169305] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.169376] (ldlidar_node) StdoutLine: {'line': b'4:     \n'}
[10.169445] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.169513] (ldlidar_node) StdoutLine: {'line': b"4:     node_name = LaunchConfiguration('node_name')\n"}
[10.169582] (ldlidar_node) StdoutLine: {'line': b'4:     ^\n'}
[10.169650] (ldlidar_node) StdoutLine: {'line': b'4: from launch_ros.actions import ComposableNodeContainer\n'}
[10.169718] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.169785] (ldlidar_node) StdoutLine: {'line': b'4: from ros2_benchmark import MonitorPerformanceCalculatorsInfo\n'}
[10.169853] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.169920] (ldlidar_node) StdoutLine: {'line': b'4: def launch_setup(container_prefix, container_sigterm_timeout):\n'}
[10.169989] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.170056] (ldlidar_node) StdoutLine: {'line': b'4:     """Generate launch description for live benchmarking LD Lidar"""\n'}
[10.170123] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.170197] (ldlidar_node) StdoutLine: {'line': b'4:     return [lc_mgr_node,composable_node_container]\n'}
[10.170277] (ldlidar_node) StdoutLine: {'line': b'4:                        ^\n'}
[10.170348] (ldlidar_node) StdoutLine: {'line': b'4: def generate_test_description():\n'}
[10.170416] (ldlidar_node) StdoutLine: {'line': b'4: ^\n'}
[10.170483] (ldlidar_node) StdoutLine: {'line': b'4:         self.run_benchmark()                            ^\n'}
[10.170551] (ldlidar_node) StdoutLine: {'line': b'4: 1     D400 First line should end with a period\n'}
[10.170619] (ldlidar_node) StdoutLine: {'line': b"4: 1     E231 missing whitespace after ','\n"}
[10.170687] (ldlidar_node) StdoutLine: {'line': b'4: 1     E261 at least two spaces before inline comment\n'}
[10.170754] (ldlidar_node) StdoutLine: {'line': b'4: 2     E302 expected 2 blank lines, found 1\n'}
[10.170822] (ldlidar_node) StdoutLine: {'line': b"4: 2     F401 'launch.actions.DeclareLaunchArgument' imported but unused\n"}
[10.170890] (ldlidar_node) StdoutLine: {'line': b"4: 2     F841 local variable 'node_name' is assigned to but never used\n"}
[10.170959] (ldlidar_node) StdoutLine: {'line': b"4: 2     I100 Import statements are in the wrong order. 'from launch_ros.actions import ComposableNodeContainer' should be before 'from launch_ros.actions import Node'\n"}
[10.171030] (ldlidar_node) StdoutLine: {'line': b'4: 2     I101 Imported names are in the wrong order. Should be LifecycleNode, Node\n'}
[10.171099] (ldlidar_node) StdoutLine: {'line': b'4: 2     Q000 Double quotes found but single quotes preferred\n'}
[10.171169] (ldlidar_node) StdoutLine: {'line': b'4: 3     W291 trailing whitespace\n'}
[10.171255] (ldlidar_node) StdoutLine: {'line': b'4: 1     W292 no newline at end of file\n'}
[10.171332] (ldlidar_node) StdoutLine: {'line': b'4: 4     W293 blank line contains whitespace\n'}
[10.171403] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.171474] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar.launch.py:22:1: I101 Imported names are in the wrong order. Should be LifecycleNode, Node\n'}
[10.171545] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.171615] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar.launch.py:26:1: W293 blank line contains whitespace\n'}
[10.171683] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.171769] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_rviz2.launch.py:27:1: W293 blank line contains whitespace\n'}
[10.171839] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.171907] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_rviz2.launch.py:50:21: Q000 Double quotes found but single quotes preferred\n'}
[10.171977] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.172047] (ldlidar_node) StdoutLine: {'line': b"4: ./launch/ldlidar_slam.launch.py:20:1: F401 'launch.actions.DeclareLaunchArgument' imported but unused\n"}
[10.172137] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.172219] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_slam.launch.py:23:1: I101 Imported names are in the wrong order. Should be LifecycleNode, Node\n'}
[10.172299] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.172369] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_slam.launch.py:27:1: W293 blank line contains whitespace\n'}
[10.172459] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.172533] (ldlidar_node) StdoutLine: {'line': b"4: ./launch/ldlidar_slam.launch.py:28:5: F841 local variable 'node_name' is assigned to but never used\n"}
[10.172604] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.172671] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_slam.launch.py:57:39: W291 trailing whitespace\n'}
[10.172740] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.172807] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_slam.launch.py:65:29: E261 at least two spaces before inline comment\n'}
[10.172877] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.172945] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_slam.launch.py:69:12: W291 trailing whitespace\n'}
[10.173013] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.173081] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_slam.launch.py:105:21: Q000 Double quotes found but single quotes preferred\n'}
[10.173150] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.173392] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_slam.launch.py:115:37: W291 trailing whitespace\n'}
[10.173475] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.173546] (ldlidar_node) StdoutLine: {'line': b"4: ./launch/ldlidar_with_mgr.launch.py:20:1: F401 'launch.actions.DeclareLaunchArgument' imported but unused\n"}
[10.173617] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.173684] (ldlidar_node) StdoutLine: {'line': b'4: ./launch/ldlidar_with_mgr.launch.py:27:1: W293 blank line contains whitespace\n'}
[10.173753] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.173821] (ldlidar_node) StdoutLine: {'line': b"4: ./launch/ldlidar_with_mgr.launch.py:28:5: F841 local variable 'node_name' is assigned to but never used\n"}
[10.173890] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.173957] (ldlidar_node) StdoutLine: {'line': b"4: ./test/ldlidar_benchmark.py:35:1: I100 Import statements are in the wrong order. 'from launch_ros.actions import ComposableNodeContainer' should be before 'from launch_ros.actions import Node'\n"}
[10.174028] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.174094] (ldlidar_node) StdoutLine: {'line': b"4: ./test/ldlidar_benchmark.py:40:1: I100 Import statements are in the wrong order. 'from ros2_benchmark import MonitorPerformanceCalculatorsInfo' should be before 'from ros2_benchmark import ROS2BenchmarkConfig, ROS2BenchmarkTest'\n"}
[10.174166] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.174250] (ldlidar_node) StdoutLine: {'line': b'4: ./test/ldlidar_benchmark.py:42:1: E302 expected 2 blank lines, found 1\n'}
[10.174325] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.174393] (ldlidar_node) StdoutLine: {'line': b'4: ./test/ldlidar_benchmark.py:43:1: D400 First line should end with a period\n'}
[10.174461] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.174529] (ldlidar_node) StdoutLine: {'line': b"4: ./test/ldlidar_benchmark.py:103:24: E231 missing whitespace after ','\n"}
[10.174597] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.174665] (ldlidar_node) StdoutLine: {'line': b'4: ./test/ldlidar_benchmark.py:105:1: E302 expected 2 blank lines, found 1\n'}
[10.174749] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.174817] (ldlidar_node) StdoutLine: {'line': b'4: ./test/ldlidar_benchmark.py:130:29: W292 no newline at end of file\n'}
[10.174885] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.174953] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.175021] (ldlidar_node) StdoutLine: {'line': b'4: 5 files checked\n'}
[10.175089] (ldlidar_node) StdoutLine: {'line': b'4: 23 errors\n'}
[10.175158] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.175243] (ldlidar_node) StdoutLine: {'line': b"4: 'D'-type errors: 1\n"}
[10.175318] (ldlidar_node) StdoutLine: {'line': b"4: 'E'-type errors: 4\n"}
[10.175387] (ldlidar_node) StdoutLine: {'line': b"4: 'F'-type errors: 4\n"}
[10.175455] (ldlidar_node) StdoutLine: {'line': b"4: 'I'-type errors: 4\n"}
[10.175523] (ldlidar_node) StdoutLine: {'line': b"4: 'Q'-type errors: 2\n"}
[10.175593] (ldlidar_node) StdoutLine: {'line': b"4: 'W'-type errors: 8\n"}
[10.175661] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.175729] (ldlidar_node) StdoutLine: {'line': b'4: Checked files:\n'}
[10.175794] (ldlidar_node) StdoutLine: {'line': b'4: \n'}
[10.175860] (ldlidar_node) StdoutLine: {'line': b'4: * ./launch/ldlidar.launch.py\n'}
[10.175927] (ldlidar_node) StdoutLine: {'line': b'4: * ./launch/ldlidar_rviz2.launch.py\n'}
[10.175993] (ldlidar_node) StdoutLine: {'line': b'4: * ./launch/ldlidar_slam.launch.py\n'}
[10.176060] (ldlidar_node) StdoutLine: {'line': b'4: * ./launch/ldlidar_with_mgr.launch.py\n'}
[10.176126] (ldlidar_node) StdoutLine: {'line': b'4: * ./test/ldlidar_benchmark.py\n'}
[10.233530] (-) TimerEvent: {}
[10.238574] (ldlidar_node) StdoutLine: {'line': b'4: -- run_test.py: return code 1\n'}
[10.238876] (ldlidar_node) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/flake8.xunit.xml'\n"}
[10.253776] (ldlidar_node) StdoutLine: {'line': b'4/8 Test #4: flake8 ...........................***Failed    1.42 sec\n'}
[10.254395] (ldlidar_node) StdoutLine: {'line': b'test 5\n'}
[10.254533] (ldlidar_node) StdoutLine: {'line': b'    Start 5: lint_cmake\n'}
[10.254614] (ldlidar_node) StdoutLine: {'line': b'\n'}
[10.254687] (ldlidar_node) StdoutLine: {'line': b'5: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/lint_cmake.xunit.xml" "--package-name" "ldlidar_node" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/lint_cmake.xunit.xml"\n'}
[10.254765] (ldlidar_node) StdoutLine: {'line': b'5: Test timeout computed to be: 60\n'}
[10.333644] (-) TimerEvent: {}
[10.359682] (ldlidar_node) StdoutLine: {'line': b"5: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node':\n"}
[10.359876] (ldlidar_node) StdoutLine: {'line': b'5:  - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/lint_cmake.xunit.xml\n'}
[10.433751] (-) TimerEvent: {}
[10.470759] (ldlidar_node) StdoutLine: {'line': b'5: \n'}
[10.470990] (ldlidar_node) StdoutLine: {'line': b'5: No problems found\n'}
[10.486415] (ldlidar_node) StdoutLine: {'line': b'5: -- run_test.py: return code 0\n'}
[10.486617] (ldlidar_node) StdoutLine: {'line': b"5: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/lint_cmake.xunit.xml'\n"}
[10.502310] (ldlidar_node) StdoutLine: {'line': b'5/8 Test #5: lint_cmake .......................   Passed    0.25 sec\n'}
[10.502582] (ldlidar_node) StdoutLine: {'line': b'test 6\n'}
[10.502683] (ldlidar_node) StdoutLine: {'line': b'    Start 6: pep257\n'}
[10.502760] (ldlidar_node) StdoutLine: {'line': b'\n'}
[10.502833] (ldlidar_node) StdoutLine: {'line': b'6: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/pep257.xunit.xml" "--package-name" "ldlidar_node" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/ament_pep257/pep257.txt" "--command" "/opt/ros/humble/bin/ament_pep257" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/pep257.xunit.xml"\n'}
[10.502925] (ldlidar_node) StdoutLine: {'line': b'6: Test timeout computed to be: 60\n'}
[10.533879] (-) TimerEvent: {}
[10.612542] (ldlidar_node) StdoutLine: {'line': b"6: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node':\n"}
[10.612827] (ldlidar_node) StdoutLine: {'line': b'6:  - /opt/ros/humble/bin/ament_pep257 --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/pep257.xunit.xml\n'}
[10.634264] (-) TimerEvent: {}
[10.734589] (-) TimerEvent: {}
[10.818491] (ldlidar_node) StdoutLine: {'line': b'6: checking ./launch/ldlidar.launch.py\n'}
[10.818981] (ldlidar_node) StdoutLine: {'line': b'6: checking ./launch/ldlidar_rviz2.launch.py\n'}
[10.819148] (ldlidar_node) StdoutLine: {'line': b'6: checking ./launch/ldlidar_slam.launch.py\n'}
[10.819292] (ldlidar_node) StdoutLine: {'line': b'6: checking ./launch/ldlidar_with_mgr.launch.py\n'}
[10.819411] (ldlidar_node) StdoutLine: {'line': b'6: checking ./test/ldlidar_benchmark.py\n'}
[10.819511] (ldlidar_node) StdoutLine: {'line': b"6: ./test/ldlidar_benchmark.py:43 in public function `launch_setup`: D400: First line should end with a period (not 'r')\n"}
[10.819606] (ldlidar_node) StdoutLine: {'line': b"6: ./test/ldlidar_benchmark.py:43 in public function `launch_setup`: D415: First line should end with a period, question mark, or exclamation point (not 'r')\n"}
[10.819695] (ldlidar_node) StdoutLine: {'line': b'6: 2 errors\n'}
[10.834725] (-) TimerEvent: {}
[10.846531] (ldlidar_node) StdoutLine: {'line': b'6: -- run_test.py: return code 1\n'}
[10.846832] (ldlidar_node) StdoutLine: {'line': b"6: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/pep257.xunit.xml'\n"}
[10.862017] (ldlidar_node) StdoutLine: {'line': b'6/8 Test #6: pep257 ...........................***Failed    0.36 sec\n'}
[10.862255] (ldlidar_node) StdoutLine: {'line': b'test 7\n'}
[10.862358] (ldlidar_node) StdoutLine: {'line': b'    Start 7: uncrustify\n'}
[10.862509] (ldlidar_node) StdoutLine: {'line': b'\n'}
[10.862605] (ldlidar_node) StdoutLine: {'line': b'7: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/uncrustify.xunit.xml" "--package-name" "ldlidar_node" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/humble/bin/ament_uncrustify" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/uncrustify.xunit.xml"\n'}
[10.862697] (ldlidar_node) StdoutLine: {'line': b'7: Test timeout computed to be: 60\n'}
[10.934841] (-) TimerEvent: {}
[10.968833] (ldlidar_node) StdoutLine: {'line': b"7: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node':\n"}
[10.969063] (ldlidar_node) StdoutLine: {'line': b'7:  - /opt/ros/humble/bin/ament_uncrustify --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/uncrustify.xunit.xml\n'}
[11.034965] (-) TimerEvent: {}
[11.090887] (ldlidar_node) StdoutLine: {'line': b"7: No code style divergence in file 'src/ldlidar_container_node.cpp'\n"}
[11.091088] (ldlidar_node) StdoutLine: {'line': b'7: \n'}
[11.091172] (ldlidar_node) StdoutLine: {'line': b'7: No problems found\n'}
[11.107285] (ldlidar_node) StdoutLine: {'line': b'7: -- run_test.py: return code 0\n'}
[11.108287] (ldlidar_node) StdoutLine: {'line': b"7: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/uncrustify.xunit.xml'\n"}
[11.122968] (ldlidar_node) StdoutLine: {'line': b'7/8 Test #7: uncrustify .......................   Passed    0.26 sec\n'}
[11.123258] (ldlidar_node) StdoutLine: {'line': b'test 8\n'}
[11.123368] (ldlidar_node) StdoutLine: {'line': b'    Start 8: xmllint\n'}
[11.123451] (ldlidar_node) StdoutLine: {'line': b'\n'}
[11.123530] (ldlidar_node) StdoutLine: {'line': b'8: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/xmllint.xunit.xml" "--package-name" "ldlidar_node" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/xmllint.xunit.xml"\n'}
[11.123616] (ldlidar_node) StdoutLine: {'line': b'8: Test timeout computed to be: 60\n'}
[11.135097] (-) TimerEvent: {}
[11.233663] (ldlidar_node) StdoutLine: {'line': b"8: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_node':\n"}
[11.233894] (ldlidar_node) StdoutLine: {'line': b'8:  - /opt/ros/humble/bin/ament_xmllint --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/xmllint.xunit.xml\n'}
[11.235200] (-) TimerEvent: {}
[11.335481] (-) TimerEvent: {}
[11.435884] (-) TimerEvent: {}
[11.536491] (-) TimerEvent: {}
[11.636994] (-) TimerEvent: {}
[11.697506] (ldlidar_node) StdoutLine: {'line': b"8: File 'package.xml' is valid\n"}
[11.697702] (ldlidar_node) StdoutLine: {'line': b'8: \n'}
[11.697786] (ldlidar_node) StdoutLine: {'line': b"8: File 'urdf/ldlidar_descr.urdf.xml' is valid\n"}
[11.697864] (ldlidar_node) StdoutLine: {'line': b'8: \n'}
[11.697938] (ldlidar_node) StdoutLine: {'line': b'8: No problems found\n'}
[11.714156] (ldlidar_node) StdoutLine: {'line': b'8: -- run_test.py: return code 0\n'}
[11.714447] (ldlidar_node) StdoutLine: {'line': b"8: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/test_results/ldlidar_node/xmllint.xunit.xml'\n"}
[11.729861] (ldlidar_node) StdoutLine: {'line': b'8/8 Test #8: xmllint ..........................   Passed    0.61 sec\n'}
[11.730433] (ldlidar_node) StdoutLine: {'line': b'\n'}
[11.730584] (ldlidar_node) StdoutLine: {'line': b'75% tests passed\x1b[0;0m, \x1b[0;31m2 tests failed\x1b[0;0m out of 8\n'}
[11.730677] (ldlidar_node) StdoutLine: {'line': b'\n'}
[11.730757] (ldlidar_node) StdoutLine: {'line': b'Label Time Summary:\n'}
[11.730836] (ldlidar_node) StdoutLine: {'line': b'copyright     =   0.66 sec*proc (1 test)\n'}
[11.730917] (ldlidar_node) StdoutLine: {'line': b'cppcheck      =   0.27 sec*proc (1 test)\n'}
[11.730994] (ldlidar_node) StdoutLine: {'line': b'cpplint       =   0.29 sec*proc (1 test)\n'}
[11.731070] (ldlidar_node) StdoutLine: {'line': b'flake8        =   1.42 sec*proc (1 test)\n'}
[11.731145] (ldlidar_node) StdoutLine: {'line': b'lint_cmake    =   0.25 sec*proc (1 test)\n'}
[11.731243] (ldlidar_node) StdoutLine: {'line': b'linter        =   4.11 sec*proc (8 tests)\n'}
[11.731328] (ldlidar_node) StdoutLine: {'line': b'pep257        =   0.36 sec*proc (1 test)\n'}
[11.731423] (ldlidar_node) StdoutLine: {'line': b'uncrustify    =   0.26 sec*proc (1 test)\n'}
[11.731501] (ldlidar_node) StdoutLine: {'line': b'xmllint       =   0.61 sec*proc (1 test)\n'}
[11.731577] (ldlidar_node) StdoutLine: {'line': b'\n'}
[11.731653] (ldlidar_node) StdoutLine: {'line': b'Total Test time (real) =   4.12 sec\n'}
[11.731972] (ldlidar_node) StderrLine: {'line': b'Errors while running CTest\n'}
[11.732098] (ldlidar_node) StderrLine: {'line': b'Output from these tests are in: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_node/Testing/Temporary/LastTest.log\n'}
[11.732194] (ldlidar_node) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[11.732288] (ldlidar_node) StdoutLine: {'line': b'\n'}
[11.732372] (ldlidar_node) StdoutLine: {'line': b'The following tests FAILED:\n'}
[11.732450] (ldlidar_node) StdoutLine: {'line': b'\t\x1b[0;31m  4 - flake8 (Failed)\x1b[0;0m\n'}
[11.732528] (ldlidar_node) StdoutLine: {'line': b'\t\x1b[0;31m  6 - pep257 (Failed)\x1b[0;0m\n'}
[11.734330] (ldlidar_node) CommandEnded: {'returncode': 8}
[11.734982] (ldlidar_node) TestFailure: {'identifier': 'ldlidar_node'}
[11.735054] (ldlidar_node) JobEnded: {'identifier': 'ldlidar_node', 'rc': 0}
[11.736610] (ldlidar) JobStarted: {'identifier': 'ldlidar'}
[11.737048] (-) TimerEvent: {}
[11.766620] (ldlidar) JobEnded: {'identifier': 'ldlidar', 'rc': 0}
[11.777057] (-) EventReactorShutdown: {}
