UpdateCTestConfiguration  from :/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_component/CTestConfiguration.ini
Parse Config file:/home/udito/OneDrive/UDITO/udito/ros2_ws/build/ldlidar_component/CTestConfiguration.ini
   Site: udito
   Build name: (empty)
 Add coverage exclude regular expressions.
Create new tag: 20250306-1310 - Experimental
UpdateCTestConfiguration  from :/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/CTestConfiguration.ini
Parse Config file:/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/CTestConfiguration.ini
Test project /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component
Constructing a list of tests
Done constructing a list of tests
Updating test list for fixtures
Added 0 tests to meet fixture requirements
Checking test dependency graph...
Checking test dependency graph end
test 1
    Start 1: copyright

1: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/copyright.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_copyright/copyright.txt" "--command" "/opt/ros/humble/bin/ament_copyright" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/copyright.xunit.xml"
1: Test timeout computed to be: 200
1: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':
1:  - /opt/ros/humble/bin/ament_copyright --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/copyright.xunit.xml
1: component/include/defines.hpp: could not find copyright notice
1: ldlidar_driver/include/core/ldlidar_datatype.h: could not find copyright notice
1: ldlidar_driver/include/core/ldlidar_driver.h: could not find copyright notice
1: ldlidar_driver/include/dataprocess/lipkg.h: could not find copyright notice
1: ldlidar_driver/include/filter/tofbf.h: could not find copyright notice
1: ldlidar_driver/include/logger/log_module.h: could not find copyright notice
1: ldlidar_driver/include/networkcom/network_socket_interface_linux.h: could not find copyright notice
1: ldlidar_driver/include/serialcom/serial_interface_linux.h: could not find copyright notice
1: ldlidar_driver/src/core/ldlidar_driver.cpp: could not find copyright notice
1: ldlidar_driver/src/dataprocess/lipkg.cpp: could not find copyright notice
1: ldlidar_driver/src/filter/tofbf.cpp: could not find copyright notice
1: ldlidar_driver/src/logger/log_module.cpp: could not find copyright notice
1: ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp: could not find copyright notice
1: ldlidar_driver/src/serialcom/serial_interface_linux.cpp: could not find copyright notice
1: 14 errors, checked 20 files
1: -- run_test.py: return code 1
1: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/copyright.xunit.xml'
1/7 Test #1: copyright ........................***Failed    0.87 sec
test 2
    Start 2: cppcheck

2: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cppcheck.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/humble/bin/ament_cppcheck" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cppcheck.xunit.xml" "--include_dirs" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/include" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom"
2: Test timeout computed to be: 300
2: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':
2:  - /opt/ros/humble/bin/ament_cppcheck --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cppcheck.xunit.xml --include_dirs /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/include /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom
2: cppcheck 2.7 has known performance issues and therefore will not be used, set the AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS environment variable to override this.
2: -- run_test.py: return code 0
2: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cppcheck.xunit.xml'
2/7 Test #2: cppcheck .........................   Passed    0.46 sec
test 3
    Start 3: cpplint

3: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cpplint.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_cpplint/cpplint.txt" "--command" "/opt/ros/humble/bin/ament_cpplint" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cpplint.xunit.xml"
3: Test timeout computed to be: 120
3: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':
3:  - /opt/ros/humble/bin/ament_cpplint --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cpplint.xunit.xml
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp:0:  No copyright message found.  You should have a line: "Copyright [year] <Copyright Owner>"  [legal/copyright] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp:1:  #ifndef header guard has wrong style, please use: DEFINES_HPP_  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp:9:  #endif line should be "#endif  // DEFINES_HPP_"  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp:9:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/ldlidar_component.hpp:37:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/ldlidar_component.hpp:142:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:412:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:427:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:438:  Lines should be <= 100 characters long  [whitespace/line_length] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:438:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:443:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:450:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp:455:  Lines should be <= 100 characters long  [whitespace/line_length] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:21:  #ifndef header guard has wrong style, please use: CORE__LDLIDAR_DATATYPE_H_  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:96:  #endif line should be "#endif  // CORE__LDLIDAR_DATATYPE_H_"  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:47:  Lines should be <= 100 characters long  [whitespace/line_length] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:48:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:49:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:53:  Do not indent within a namespace  [runtime/indentation_namespace] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:57:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:58:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:80:  Do not indent within a namespace  [runtime/indentation_namespace] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h:94:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:21:  #ifndef header guard has wrong style, please use: CORE__LDLIDAR_DRIVER_H_  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:166:  #endif line should be "#endif  // CORE__LDLIDAR_DRIVER_H_"  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:27:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:28:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:29:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:30:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:44:  Do not indent within a namespace  [runtime/indentation_namespace] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:164:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:166:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h:153:  Add #include <string> for string  [build/include_what_you_use] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:22:  #ifndef header guard has wrong style, please use: DATAPROCESS__LIPKG_H_  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:135:  #endif line should be "#endif  // DATAPROCESS__LIPKG_H_"  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:30:  Found C system header after C++ system header. Should be: lipkg.h, c system, c++ system, other.  [build/include_order] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:32:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:33:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:62:  Do not indent within a namespace  [runtime/indentation_namespace] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:121:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:133:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h:135:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:22:  #ifndef header guard has wrong style, please use: FILTER__TOFBF_H_  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:68:  #endif line should be "#endif  // FILTER__TOFBF_H_"  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:28:  Found C system header after C++ system header. Should be: tofbf.h, c system, c++ system, other.  [build/include_order] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:33:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:44:  Do not indent within a namespace  [runtime/indentation_namespace] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:66:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h:68:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:18:  #ifndef header guard has wrong style, please use: LOGGER__LOG_MODULE_H_  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:214:  #endif line should be "#endif  // LOGGER__LOG_MODULE_H_"  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:28:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:35:  Found C system header after C++ system header. Should be: log_module.h, c system, c++ system, other.  [build/include_order] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:40:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:44:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:57:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:57:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:64:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:181:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:214:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h:214:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:20:  #ifndef header guard has wrong style, please use: NETWORKCOM__NETWORK_SOCKET_INTERFACE_LINUX_H_  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:122:  #endif line should be "#endif  // NETWORKCOM__NETWORK_SOCKET_INTERFACE_LINUX_H_"  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:57:  Do not indent within a namespace  [runtime/indentation_namespace] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:75:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:91:  Do not indent within a namespace  [runtime/indentation_namespace] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:107:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:109:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:121:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h:122:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:20:  #ifndef header guard has wrong style, please use: SERIALCOM__SERIAL_INTERFACE_LINUX_H_  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:79:  #endif line should be "#endif  // SERIALCOM__SERIAL_INTERFACE_LINUX_H_"  [build/header_guard] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:47:  Do not indent within a namespace  [runtime/indentation_namespace] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:69:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:77:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h:79:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp:21:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp:120:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp:189:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp:352:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:22:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:74:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:74:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:79:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:79:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:135:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:136:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:153:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:160:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:161:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:172:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:173:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:176:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:189:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:208:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:235:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:246:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:345:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp:350:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:1:  Complex multi-line /*...*/-style comment found. Lint may give bogus warnings.  Consider replacing these with //-style comments, with #if 0...#endif, or with more clearly structured multi-line comments.  [readability/multiline_comment] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:13:  Use operator ! instead of not  [readability/alt_tokens] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:15:  Use operator || instead of or  [readability/alt_tokens] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:17:  Use operator || instead of or  [readability/alt_tokens] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:18:  Use operator && instead of and  [readability/alt_tokens] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:22:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:34:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:154:  Missing space around colon in range-based for loop  [whitespace/forcolon] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:207:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:225:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:234:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp:280:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:18:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:31:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:95:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:99:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:103:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:106:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:108:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:115:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:121:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:124:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:147:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:150:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:154:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:157:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:159:  If you can, use sizeof(s_stamp) instead of 100 as the 2nd arg to snprintf.  [runtime/printf] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:216:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:219:  Consider using ctime_r(...) instead of ctime(...) for improved thread safety.  [runtime/threadsafe_fn] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp:239:  Never use sprintf. Use snprintf instead.  [runtime/printf] [5]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:20:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:21:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:38:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:38:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:50:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:76:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:128:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:153:  Using C-style cast.  Use reinterpret_cast<socklen_t *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:160:  If you can, use sizeof(sender_port_str) instead of 10 as the 2nd arg to snprintf.  [runtime/printf] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:192:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:198:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:225:  Using C-style cast.  Use reinterpret_cast<UDPSocketInterfaceLinux *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:230:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:252:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:252:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:289:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:323:  Using C-style cast.  Use reinterpret_cast<socklen_t *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:388:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:471:  Using C-style cast.  Use reinterpret_cast<TCPSocketInterfaceLinux *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:476:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:488:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:20:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:21:  Include the directory when naming .h files  [build/include_subdir] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:66:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:102:  Should have a space between // and comment  [whitespace/comments] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:141:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:185:  Using C-style cast.  Use reinterpret_cast<SerialInterfaceLinux *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:189:  Using C-style cast.  Use reinterpret_cast<uint8_t *>(...) instead  [readability/casting] [4]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp:201:  At least two spaces is best between code and comments  [whitespace/comments] [2]
3: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include/ldlidar_tools.hpp:36:  Add #include <string> for string  [build/include_what_you_use] [4]
3: Category 'build/header_guard' errors found: 16
3: Category 'build/include_order' errors found: 3
3: Category 'build/include_subdir' errors found: 16
3: Category 'build/include_what_you_use' errors found: 2
3: Category 'legal/copyright' errors found: 1
3: Category 'readability/alt_tokens' errors found: 4
3: Category 'readability/braces' errors found: 2
3: Category 'readability/casting' errors found: 20
3: Category 'readability/multiline_comment' errors found: 1
3: Category 'runtime/indentation_namespace' errors found: 8
3: Category 'runtime/int' errors found: 12
3: Category 'runtime/printf' errors found: 8
3: Category 'runtime/threadsafe_fn' errors found: 1
3: Category 'whitespace/blank_line' errors found: 14
3: Category 'whitespace/comments' errors found: 47
3: Category 'whitespace/forcolon' errors found: 1
3: Category 'whitespace/line_length' errors found: 3
3: Total errors found: 159
3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include' argument
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/defines.hpp
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/include/ldlidar_component.hpp
3: 
3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src' argument
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/component/src/ldlidar_component.cpp
3: 
3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/include' argument
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/include/visibility_control.hpp
3: 
3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include' argument
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_datatype.h
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/core/ldlidar_driver.h
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/dataprocess/lipkg.h
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/filter/tofbf.h
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/logger/log_module.h
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/networkcom/network_socket_interface_linux.h
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/include/serialcom/serial_interface_linux.h
3: 
3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src' argument
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/core/ldlidar_driver.cpp
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/dataprocess/lipkg.cpp
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/filter/tofbf.cpp
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/logger/log_module.cpp
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/ldlidar_driver/src/serialcom/serial_interface_linux.cpp
3: 
3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include' argument
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/include/ldlidar_tools.hpp
3: 
3: Using '--root=/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/src' argument
3: 
3: Done processing /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component/tools/src/ldlidar_tools.cpp
3: 
3: -- run_test.py: return code 1
3: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/cpplint.xunit.xml'
3/7 Test #3: cpplint ..........................***Failed    1.41 sec
test 4
    Start 4: lint_cmake

4: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/lint_cmake.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/lint_cmake.xunit.xml"
4: Test timeout computed to be: 60
4: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':
4:  - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/lint_cmake.xunit.xml
4: ldlidar_driver/CMakeLists.txt:15: Line ends in whitespace [whitespace/eol]
4: ldlidar_driver/CMakeLists.txt:16: Line ends in whitespace [whitespace/eol]
4: 
4: 
4: 2 errors
4: -- run_test.py: return code 1
4: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/lint_cmake.xunit.xml'
4/7 Test #4: lint_cmake .......................***Failed    0.27 sec
test 5
    Start 5: uncrustify

5: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/uncrustify.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/humble/bin/ament_uncrustify" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/uncrustify.xunit.xml"
5: Test timeout computed to be: 60
5: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':
5:  - /opt/ros/humble/bin/ament_uncrustify --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/uncrustify.xunit.xml
5: No code style divergence in file 'component/include/defines.hpp'
5: 
5: No code style divergence in file 'component/include/ldlidar_component.hpp'
5: 
5: No code style divergence in file 'component/src/ldlidar_component.cpp'
5: 
5: No code style divergence in file 'include/visibility_control.hpp'
5: 
5: No code style divergence in file 'ldlidar_driver/include/core/ldlidar_datatype.h'
5: 
5: No code style divergence in file 'ldlidar_driver/include/core/ldlidar_driver.h'
5: 
5: No code style divergence in file 'ldlidar_driver/include/dataprocess/lipkg.h'
5: 
5: No code style divergence in file 'ldlidar_driver/include/filter/tofbf.h'
5: 
5: No code style divergence in file 'ldlidar_driver/include/logger/log_module.h'
5: 
5: No code style divergence in file 'ldlidar_driver/include/networkcom/network_socket_interface_linux.h'
5: 
5: No code style divergence in file 'ldlidar_driver/include/serialcom/serial_interface_linux.h'
5: 
5: No code style divergence in file 'ldlidar_driver/src/core/ldlidar_driver.cpp'
5: 
5: No code style divergence in file 'ldlidar_driver/src/dataprocess/lipkg.cpp'
5: 
5: No code style divergence in file 'ldlidar_driver/src/filter/tofbf.cpp'
5: 
5: No code style divergence in file 'ldlidar_driver/src/logger/log_module.cpp'
5: 
5: No code style divergence in file 'ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp'
5: 
5: No code style divergence in file 'ldlidar_driver/src/serialcom/serial_interface_linux.cpp'
5: 
5: No code style divergence in file 'tools/include/ldlidar_tools.hpp'
5: 
5: No code style divergence in file 'tools/src/ldlidar_tools.cpp'
5: 
5: No problems found
5: -- run_test.py: return code 0
5: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/uncrustify.xunit.xml'
5/7 Test #5: uncrustify .......................   Passed    0.45 sec
test 6
    Start 6: xmllint

6: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/xmllint.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/xmllint.xunit.xml"
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':
6:  - /opt/ros/humble/bin/ament_xmllint --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/xmllint.xunit.xml
6: File 'package.xml' is valid
6: 
6: No problems found
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/xmllint.xunit.xml'
6/7 Test #6: xmllint ..........................   Passed    1.13 sec
test 7
    Start 7: clang_format

7: Test command: /usr/local/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/clang_format.xunit.xml" "--package-name" "ldlidar_component" "--output-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/ament_clang_format/clang_format.txt" "--command" "/opt/ros/humble/bin/ament_clang_format" "--xunit-file" "/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/clang_format.xunit.xml"
7: Test timeout computed to be: 60
7: -- run_test.py: invoking following command in '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/src/ldrobot-lidar-ros2/ldlidar_component':
7:  - /opt/ros/humble/bin/ament_clang_format --xunit-file /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/clang_format.xunit.xml
7: Code style divergence in file 'component/include/defines.hpp':
7: 
7: [component/include/defines.hpp:9:6]: Replace [ ] with [  ]
7: - #endif // DEFINES_HPP
7: + #endif  // DEFINES_HPP
7: 
7: Code style divergence in file 'component/include/ldlidar_component.hpp':
7: 
7: [component/include/ldlidar_component.hpp:19:0]: Replace [#include <rcutils/logging_macros.h>\n\n#include <string>\n#include <memory>\n\n#include <lifecycle_msgs/msg/transition.hpp>\n#include <rclcpp/publisher.hpp>\n#include <rclcpp/rclcpp.hpp>\n#include <rclcpp_lifecycle/lifecycle_node.hpp>\n#include <rclcpp_lifecycle/lifecycle_publisher.hpp>\n#include <sensor_msgs/msg/laser_scan.hpp>\n#include <diagnostic_updater/diagnostic_updater.hpp>\n#include <diagnostic_msgs/msg/diagnostic_status.hpp>\n\n#include <nav2_util/lifecycle_node.hpp>\n\n#include "visibility_control.hpp"\n#include "defines.hpp"\n#include "ldlidar_driver.h"] with [#include <rcutils/logging_macros.h>\n\n#include <diagnostic_msgs/msg/diagnostic_status.hpp>\n#include <diagnostic_updater/diagnostic_updater.hpp>\n#include <lifecycle_msgs/msg/transition.hpp>\n#include <memory>\n#include <nav2_util/lifecycle_node.hpp>\n#include <rclcpp/publisher.hpp>\n#include <rclcpp/rclcpp.hpp>\n#include <rclcpp_lifecycle/lifecycle_node.hpp>\n#include <rclcpp_lifecycle/lifecycle_publisher.hpp>\n#include <sensor_msgs/msg/laser_scan.hpp>\n#include <string>\n\n#include "defines.hpp"\n#include "ldlidar_driver.h"\n#include "visibility_control.hpp"]
7: - #include <rcutils/logging_macros.h>
7: - 
7: - #include <string>
7: - #include <memory>
7: - 
7: - #include <lifecycle_msgs/msg/transition.hpp>
7: - #include <rclcpp/publisher.hpp>
7: - #include <rclcpp/rclcpp.hpp>
7: - #include <rclcpp_lifecycle/lifecycle_node.hpp>
7: - #include <rclcpp_lifecycle/lifecycle_publisher.hpp>
7: - #include <sensor_msgs/msg/laser_scan.hpp>
7: - #include <diagnostic_updater/diagnostic_updater.hpp>
7: - #include <diagnostic_msgs/msg/diagnostic_status.hpp>
7: - 
7: - #include <nav2_util/lifecycle_node.hpp>
7: - 
7: - #include "visibility_control.hpp"
7: - #include "defines.hpp"
7: - #include "ldlidar_driver.h"
7: + #include <rcutils/logging_macros.h>
7: + 
7: + #include <diagnostic_msgs/msg/diagnostic_status.hpp>
7: + #include <diagnostic_updater/diagnostic_updater.hpp>
7: + #include <lifecycle_msgs/msg/transition.hpp>
7: + #include <memory>
7: + #include <nav2_util/lifecycle_node.hpp>
7: + #include <rclcpp/publisher.hpp>
7: + #include <rclcpp/rclcpp.hpp>
7: + #include <rclcpp_lifecycle/lifecycle_node.hpp>
7: + #include <rclcpp_lifecycle/lifecycle_publisher.hpp>
7: + #include <sensor_msgs/msg/laser_scan.hpp>
7: + #include <string>
7: + 
7: + #include "defines.hpp"
7: + #include "ldlidar_driver.h"
7: + #include "visibility_control.hpp"
7: [component/include/ldlidar_component.hpp:82:10]: Replace [] with [ ]
7: -   template<typename T>
7: +   template <typename T>
7: [component/include/ldlidar_component.hpp:84:50]: Replace [\n    ] with [ ]
7: -     std::string paramName, T defValue, T & outVal,
7: -     const std::string & description = "",
7: +     std::string paramName, T defValue, T & outVal, const std::string & description = "",
7: [component/include/ldlidar_component.hpp:86:26]: Replace [\n    ] with [ ]
7: -     bool read_only = true,
7: -     std::string log_info = std::string());
7: +     bool read_only = true, std::string log_info = std::string());
7: [component/include/ldlidar_component.hpp:91:58]: Replace [\n    ] with [ ]
7: -     const nav2_util::LifecycleNode::integer_range & range,
7: -     const std::string & description = "",
7: +     const nav2_util::LifecycleNode::integer_range & range, const std::string & description = "",
7: [component/include/ldlidar_component.hpp:93:26]: Replace [\n    ] with [ ]
7: -     bool read_only = true,
7: -     std::string log_info = std::string());
7: +     bool read_only = true, std::string log_info = std::string());
7: [component/include/ldlidar_component.hpp:99:41]: Replace [\n    ] with [ ]
7: -     const std::string & description = "",
7: -     bool read_only = true,
7: +     const std::string & description = "", bool read_only = true,
7: [component/include/ldlidar_component.hpp:142:27]: Replace [ ] with [  ]
7: -   float _distScale = 0.001; // Scale factor to match the units setting
7: +   float _distScale = 0.001;  // Scale factor to match the units setting
7: 
7: Code style divergence in file 'component/src/ldlidar_component.cpp':
7: 
7: [component/src/ldlidar_component.cpp:16:0]: Replace [#include "ldlidar_component.hpp"\n#include "ldlidar_tools.hpp"\n#include "rcl_interfaces/msg/parameter_descriptor.hpp"\n#include "diagnostic_msgs/msg/diagnostic_status.hpp"\n#include "rmw/types.h"\n#include "rclcpp/parameter.hpp"\n#include "rclcpp/exceptions.hpp"] with [#include "ldlidar_component.hpp"\n\n#include "diagnostic_msgs/msg/diagnostic_status.hpp"\n#include "ldlidar_tools.hpp"\n#include "rcl_interfaces/msg/parameter_descriptor.hpp"\n#include "rclcpp/exceptions.hpp"\n#include "rclcpp/parameter.hpp"\n#include "rmw/types.h"]
7: - #include "ldlidar_component.hpp"
7: - #include "ldlidar_tools.hpp"
7: - #include "rcl_interfaces/msg/parameter_descriptor.hpp"
7: - #include "diagnostic_msgs/msg/diagnostic_status.hpp"
7: - #include "rmw/types.h"
7: - #include "rclcpp/parameter.hpp"
7: - #include "rclcpp/exceptions.hpp"
7: + #include "ldlidar_component.hpp"
7: + 
7: + #include "diagnostic_msgs/msg/diagnostic_status.hpp"
7: + #include "ldlidar_tools.hpp"
7: + #include "rcl_interfaces/msg/parameter_descriptor.hpp"
7: + #include "rclcpp/exceptions.hpp"
7: + #include "rclcpp/parameter.hpp"
7: + #include "rmw/types.h"
7: [component/src/ldlidar_component.cpp:51:37]: Replace [\n] with [ ]
7: - LdLidarComponent::~LdLidarComponent()
7: - {
7: + LdLidarComponent::~LdLidarComponent() {
7: [component/src/ldlidar_component.cpp:52:1]: Replace [\n] with []
7: - {
7: - }
7: + {}
7: [component/src/ldlidar_component.cpp:74:23]: Replace [ ] with [\n      ]
7: -     rcutils_ret_t res = rcutils_logging_set_logger_level(
7: +     rcutils_ret_t res =
7: +       rcutils_logging_set_logger_level(
7: [component/src/ldlidar_component.cpp:74:57]: Replace [\n      ] with []
7: -     rcutils_ret_t res = rcutils_logging_set_logger_level(
7: -       get_logger().get_name(), RCUTILS_LOG_SEVERITY_DEBUG);
7: +     rcutils_ret_t res = rcutils_logging_set_logger_level(get_logger().get_name(), RCUTILS_LOG_SEVERITY_DEBUG);
7: [component/src/ldlidar_component.cpp:83:23]: Replace [ ] with [\n      ]
7: -     rcutils_ret_t res = rcutils_logging_set_logger_level(
7: +     rcutils_ret_t res =
7: +       rcutils_logging_set_logger_level(
7: [component/src/ldlidar_component.cpp:83:57]: Replace [\n      ] with []
7: -     rcutils_ret_t res = rcutils_logging_set_logger_level(
7: -       get_logger().get_name(), RCUTILS_LOG_SEVERITY_INFO);
7: +     rcutils_ret_t res = rcutils_logging_set_logger_level(get_logger().get_name(), RCUTILS_LOG_SEVERITY_INFO);
7: [component/src/ldlidar_component.cpp:126:95]: Replace [ ] with []
7: -       get_logger(), " !!! The parameter 'lidar.model' is not valid! -> " << _lidarModel.c_str() );
7: +       get_logger(), " !!! The parameter 'lidar.model' is not valid! -> " << _lidarModel.c_str());
7: [component/src/ldlidar_component.cpp:131:74]: Replace [\n    ] with [ ]
7: -     "lidar.frame_id", _frameId, _frameId, "Name of the lidar frame", true,
7: -     " * Lidar frame: ");
7: +     "lidar.frame_id", _frameId, _frameId, "Name of the lidar frame", true, " * Lidar frame: ");
7: [component/src/ldlidar_component.cpp:150:44]: Replace [ ] with [\n    ]
7: -     "lidar.rot_verse", rot_verse, rot_verse, " * Rotation verse: ",
7: +     "lidar.rot_verse", rot_verse, rot_verse,
7: +     " * Rotation verse: ",
7: [component/src/ldlidar_component.cpp:150:67]: Replace [\n    ] with [ ]
7: -     "lidar.rot_verse", rot_verse, rot_verse, " * Rotation verse: ",
7: -     "Rotation verse, use 'CW' if upsidedown");
7: +     "lidar.rot_verse", rot_verse, rot_verse, " * Rotation verse: ", "Rotation verse, use 'CW' if upsidedown");
7: [component/src/ldlidar_component.cpp:163:82]: Replace [\n    ] with [ ]
7: -     "lidar.bins", _bins, _bins, "Fixed number of data beams. 0 for dynamic", true,
7: -     " * Bins: ");
7: +     "lidar.bins", _bins, _bins, "Fixed number of data beams. 0 for dynamic", true, " * Bins: ");
7: [component/src/ldlidar_component.cpp:175:89]: Replace [\n    ] with [ ]
7: -     "lidar.angle_crop_min", _angleCropMin, _angleCropMin, "Angle cropping minimum angle",
7: -     false, " * Angle cropping min angle: ");
7: +     "lidar.angle_crop_min", _angleCropMin, _angleCropMin, "Angle cropping minimum angle", false, " * Angle cropping min angle: ");
7: [component/src/ldlidar_component.cpp:176:10]: Replace [ ] with [\n    ]
7: -     false, " * Angle cropping min angle: ");
7: +     false,
7: +     " * Angle cropping min angle: ");
7: [component/src/ldlidar_component.cpp:178:89]: Replace [\n    ] with [ ]
7: -     "lidar.angle_crop_max", _angleCropMax, _angleCropMax, "Angle cropping maximum angle",
7: -     false, " * Angle cropping max angle: ");
7: +     "lidar.angle_crop_max", _angleCropMax, _angleCropMax, "Angle cropping maximum angle", false, " * Angle cropping max angle: ");
7: [component/src/ldlidar_component.cpp:179:10]: Replace [ ] with [\n    ]
7: -     false, " * Angle cropping max angle: ");
7: +     false,
7: +     " * Angle cropping max angle: ");
7: [component/src/ldlidar_component.cpp:183:8]: Replace [] with [ ]
7: - template<typename T>
7: + template <typename T>
7: [component/src/ldlidar_component.cpp:185:48]: Replace [\n  ] with [ ]
7: -   std::string paramName, T defValue, T & outVal,
7: -   const std::string & description, bool read_only, std::string log_info)
7: +   std::string paramName, T defValue, T & outVal, const std::string & description, bool read_only, std::string log_info)
7: [component/src/ldlidar_component.cpp:186:50]: Replace [ ] with [\n  ]
7: -   const std::string & description, bool read_only, std::string log_info)
7: +   const std::string & description, bool read_only,
7: +   std::string log_info)
7: [component/src/ldlidar_component.cpp:196:37]: Replace [\n        ] with [\n                      ]
7: -       get_logger(), "The parameter '"
7: -         << paramName << "' is not available or is not valid, using the default value: "
7: +       get_logger(), "The parameter '"
7: +                       << paramName << "' is not available or is not valid, using the default value: "
7: [component/src/ldlidar_component.cpp:197:20]: Replace [ ] with [\n                      ]
7: -         << paramName << "' is not available or is not valid, using the default value: "
7: +         << paramName
7: +                       << "' is not available or is not valid, using the default value: "
7: [component/src/ldlidar_component.cpp:197:87]: Replace [\n        ] with [\n                      ]
7: -         << paramName << "' is not available or is not valid, using the default value: "
7: -         << defValue);
7: +         << paramName << "' is not available or is not valid, using the default value: "
7: +                       << defValue);
7: [component/src/ldlidar_component.cpp:208:56]: Replace [\n  ] with [ ]
7: -   const nav2_util::LifecycleNode::integer_range & range,
7: -   const std::string & description,
7: +   const nav2_util::LifecycleNode::integer_range & range, const std::string & description,
7: [component/src/ldlidar_component.cpp:210:17]: Replace [\n  ] with [ ]
7: -   bool read_only,
7: -   std::string log_info)
7: +   bool read_only, std::string log_info)
7: [component/src/ldlidar_component.cpp:214:18]: Replace [\n      ] with []
7: -     add_parameter(
7: -       paramName, rclcpp::ParameterValue(defValue), range,
7: +     add_parameter(paramName, rclcpp::ParameterValue(defValue), range,
7: [component/src/ldlidar_component.cpp:215:57]: Replace [\n      ] with [ ]
7: -       paramName, rclcpp::ParameterValue(defValue), range,
7: -       description, "", read_only);
7: +       paramName, rclcpp::ParameterValue(defValue), range, description, "", read_only);
7: [component/src/ldlidar_component.cpp:223:37]: Replace [\n        ] with [\n                      ]
7: -       get_logger(), "The parameter '"
7: -         << paramName << "' is not available or is not valid, using the default value: "
7: +       get_logger(), "The parameter '"
7: +                       << paramName << "' is not available or is not valid, using the default value: "
7: [component/src/ldlidar_component.cpp:224:20]: Replace [ ] with [\n                      ]
7: -         << paramName << "' is not available or is not valid, using the default value: "
7: +         << paramName
7: +                       << "' is not available or is not valid, using the default value: "
7: [component/src/ldlidar_component.cpp:224:87]: Replace [\n        ] with [\n                      ]
7: -         << paramName << "' is not available or is not valid, using the default value: "
7: -         << defValue);
7: +         << paramName << "' is not available or is not valid, using the default value: "
7: +                       << defValue);
7: [component/src/ldlidar_component.cpp:235:63]: Replace [\n  ] with [ ]
7: -   const nav2_util::LifecycleNode::floating_point_range & range,
7: -   const std::string & description,
7: +   const nav2_util::LifecycleNode::floating_point_range & range, const std::string & description,
7: [component/src/ldlidar_component.cpp:237:17]: Replace [\n  ] with [ ]
7: -   bool read_only,
7: -   std::string log_info)
7: +   bool read_only, std::string log_info)
7: [component/src/ldlidar_component.cpp:241:18]: Replace [\n      ] with []
7: -     add_parameter(
7: -       paramName, rclcpp::ParameterValue(defValue), range,
7: +     add_parameter(paramName, rclcpp::ParameterValue(defValue), range,
7: [component/src/ldlidar_component.cpp:242:57]: Replace [\n      ] with [ ]
7: -       paramName, rclcpp::ParameterValue(defValue), range,
7: -       description, "", read_only);
7: +       paramName, rclcpp::ParameterValue(defValue), range, description, "", read_only);
7: [component/src/ldlidar_component.cpp:250:37]: Replace [\n        ] with [\n                      ]
7: -       get_logger(), "The parameter '"
7: -         << paramName << "' is not available or is not valid, using the default value: "
7: +       get_logger(), "The parameter '"
7: +                       << paramName << "' is not available or is not valid, using the default value: "
7: [component/src/ldlidar_component.cpp:251:20]: Replace [ ] with [\n                      ]
7: -         << paramName << "' is not available or is not valid, using the default value: "
7: +         << paramName
7: +                       << "' is not available or is not valid, using the default value: "
7: [component/src/ldlidar_component.cpp:251:87]: Replace [\n        ] with [\n                      ]
7: -         << paramName << "' is not available or is not valid, using the default value: "
7: -         << defValue);
7: +         << paramName << "' is not available or is not valid, using the default value: "
7: +                       << defValue);
7: [component/src/ldlidar_component.cpp:263:17]: Replace [\n    ] with [ ]
7: -     get_logger(),
7: -     "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())
7: +     get_logger(), "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())
7: [component/src/ldlidar_component.cpp:264:50]: Replace [ ] with [\n                                   ]
7: -     "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())
7: +     "on_configure: " << prev_state.label() << " ["
7: +                                    << static_cast<int>(prev_state.id())
7: [component/src/ldlidar_component.cpp:264:87]: Replace [\n                     ] with [ ]
7: -     "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())
7: -                      << "] -> Inactive");
7: +     "on_configure: " << prev_state.label() << " [" << static_cast<int>(prev_state.id()) << "] -> Inactive");
7: [component/src/ldlidar_component.cpp:326:17]: Replace [\n    ] with [ ]
7: -     get_logger(),
7: -     "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())
7: +     get_logger(), "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())
7: [component/src/ldlidar_component.cpp:327:51]: Replace [ ] with [\n                                    ]
7: -     "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())
7: +     "on_deactivate: " << prev_state.label() << " ["
7: +                                     << static_cast<int>(prev_state.id())
7: [component/src/ldlidar_component.cpp:327:88]: Replace [\n                      ] with [ ]
7: -     "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id())
7: -                       << "] -> Inactive");
7: +     "on_deactivate: " << prev_state.label() << " [" << static_cast<int>(prev_state.id()) << "] -> Inactive");
7: [component/src/ldlidar_component.cpp:435:40]: Replace [      ] with [          ]
7: -       float intensity = point.intensity;      // laser receive intensity
7: +       float intensity = point.intensity;          // laser receive intensity
7: [component/src/ldlidar_component.cpp:438:10]: Replace [] with [\n        ]
7: -       if ((point.distance == 0) && (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.
7: +       if (
7: +         (point.distance == 0) && (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.
7: [component/src/ldlidar_component.cpp:438:34]: Replace [ ] with [\n        ]
7: -       if ((point.distance == 0) && (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.
7: +       if ((point.distance == 0) &&
7: +         (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.
7: [component/src/ldlidar_component.cpp:438:60]: Replace [ ] with [  ]
7: -       if ((point.distance == 0) && (point.intensity == 0)) { // filter is handled to  0, Nan will be assigned variable.
7: +       if ((point.distance == 0) && (point.intensity == 0)) {  // filter is handled to  0, Nan will be assigned variable.
7: [component/src/ldlidar_component.cpp:443:29]: Replace [ ] with [  ]
7: -       if (_enableAngleCrop) { // Angle crop setting, Mask data within the set angle range
7: +       if (_enableAngleCrop) {  // Angle crop setting, Mask data within the set angle range
7: [component/src/ldlidar_component.cpp:450:47]: Replace [ ] with [  ]
7: -       float angle = ANGLE_TO_RADIAN(dir_angle); // Lidar angle unit form degree transform to radian
7: +       float angle = ANGLE_TO_RADIAN(dir_angle);  // Lidar angle unit form degree transform to radian
7: [component/src/ldlidar_component.cpp:455:25]: Replace [ ] with [\n            ]
7: -             get_logger(), "error index: %d, beam_size: %d, angle: %f, msg->angle_min: %f, msg->angle_increment: %f",
7: +             get_logger(),
7: +             "error index: %d, beam_size: %d, angle: %f, msg->angle_min: %f, msg->angle_increment: %f",
7: [component/src/ldlidar_component.cpp:455:112]: Replace [] with ["\n            "]
7: -             get_logger(), "error index: %d, beam_size: %d, angle: %f, msg->angle_min: %f, msg->angle_increment: %f",
7: +             get_logger(), "error index: %d, beam_size: %d, angle: %f, msg->angle_min: %f, msg->angle_increment: "
7: +             "%f",
7: [component/src/ldlidar_component.cpp:464:18]: Replace [ ] with [  ]
7: -           } else { // Otherwise, only when the distance is less than the current
7: +           } else {  // Otherwise, only when the distance is less than the current
7: [component/src/ldlidar_component.cpp:464:80]: Replace [\n                   ] with [\n                    ]
7: -           } else { // Otherwise, only when the distance is less than the current
7: -                    //   value, it can be re assigned
7: +           } else { // Otherwise, only when the distance is less than the current
7: +                     //   value, it can be re assigned
7: [component/src/ldlidar_component.cpp:475:18]: Replace [ ] with [  ]
7: -           } else { // Otherwise, only when the distance is less than the current
7: +           } else {  // Otherwise, only when the distance is less than the current
7: [component/src/ldlidar_component.cpp:475:80]: Replace [\n                   ] with [\n                    ]
7: -           } else { // Otherwise, only when the distance is less than the current
7: -                    //   value, it can be re assigned
7: +           } else { // Otherwise, only when the distance is less than the current
7: +                     //   value, it can be re assigned
7: [component/src/ldlidar_component.cpp:605:62]: Replace [\n        ] with []
7: -       diagnostic_msgs::msg::DiagnosticStatus::OK, std::string(
7: -         "Node state: ") + state.label());
7: +       diagnostic_msgs::msg::DiagnosticStatus::OK, std::string("Node state: ") + state.label());
7: [component/src/ldlidar_component.cpp:619:65]: Replace [\n        ] with []
7: -       diagnostic_msgs::msg::DiagnosticStatus::STALE, std::string(
7: -         "Node state: ") + state.label());
7: +       diagnostic_msgs::msg::DiagnosticStatus::STALE, std::string("Node state: ") + state.label());
7: [component/src/ldlidar_component.cpp:623:65]: Replace [\n        ] with []
7: -       diagnostic_msgs::msg::DiagnosticStatus::ERROR, std::string(
7: -         "Node state: ") + state.label());
7: +       diagnostic_msgs::msg::DiagnosticStatus::ERROR, std::string("Node state: ") + state.label());
7: 
7: Code style divergence in file 'include/visibility_control.hpp':
7: 
7: [include/visibility_control.hpp:20:10]: Replace [\n] with [ ]
7: - extern "C"
7: - {
7: + extern "C" {
7: [include/visibility_control.hpp:27:40]: Replace [\n  ] with [\n]
7: - #if defined _WIN32 || defined __CYGWIN__
7: -   #ifdef __GNUC__
7: + #if defined _WIN32 || defined __CYGWIN__
7: + #ifdef __GNUC__
7: [include/visibility_control.hpp:28:17]: Replace [\n    ] with [\n]
7: -   #ifdef __GNUC__
7: -     #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))
7: +   #ifdef __GNUC__
7: + #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))
7: [include/visibility_control.hpp:29:51]: Replace [ ] with []
7: -     #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))
7: +     #define LDLIDAR_COMPONENTS_EXPORT __attribute__((dllexport))
7: [include/visibility_control.hpp:29:65]: Replace [\n    ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))
7: -     #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))
7: +     #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((dllexport))
7: + #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))
7: [include/visibility_control.hpp:30:51]: Replace [ ] with []
7: -     #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))
7: +     #define LDLIDAR_COMPONENTS_IMPORT __attribute__((dllimport))
7: [include/visibility_control.hpp:30:65]: Replace [\n  ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))
7: -   #else
7: +     #define LDLIDAR_COMPONENTS_IMPORT __attribute__ ((dllimport))
7: + #else
7: [include/visibility_control.hpp:31:7]: Replace [\n    ] with [\n]
7: -   #else
7: -     #define LDLIDAR_COMPONENTS_EXPORT __declspec(dllexport)
7: +   #else
7: + #define LDLIDAR_COMPONENTS_EXPORT __declspec(dllexport)
7: [include/visibility_control.hpp:32:59]: Replace [\n    ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_EXPORT __declspec(dllexport)
7: -     #define LDLIDAR_COMPONENTS_IMPORT __declspec(dllimport)
7: +     #define LDLIDAR_COMPONENTS_EXPORT __declspec(dllexport)
7: + #define LDLIDAR_COMPONENTS_IMPORT __declspec(dllimport)
7: [include/visibility_control.hpp:33:59]: Replace [\n  ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_IMPORT __declspec(dllimport)
7: -   #endif
7: +     #define LDLIDAR_COMPONENTS_IMPORT __declspec(dllimport)
7: + #endif
7: [include/visibility_control.hpp:34:8]: Replace [\n  ] with [\n]
7: -   #endif
7: -   #ifdef LDLIDAR_COMPONENTS_BUILDING_DLL
7: +   #endif
7: + #ifdef LDLIDAR_COMPONENTS_BUILDING_DLL
7: [include/visibility_control.hpp:35:40]: Replace [\n    ] with [\n]
7: -   #ifdef LDLIDAR_COMPONENTS_BUILDING_DLL
7: -     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_EXPORT
7: +   #ifdef LDLIDAR_COMPONENTS_BUILDING_DLL
7: + #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_EXPORT
7: [include/visibility_control.hpp:36:63]: Replace [\n  ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_EXPORT
7: -   #else
7: +     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_EXPORT
7: + #else
7: [include/visibility_control.hpp:37:7]: Replace [\n    ] with [\n]
7: -   #else
7: -     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_IMPORT
7: +   #else
7: + #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_IMPORT
7: [include/visibility_control.hpp:38:63]: Replace [\n  ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_IMPORT
7: -   #endif
7: +     #define LDLIDAR_COMPONENTS_PUBLIC LDLIDAR_COMPONENTS_IMPORT
7: + #endif
7: [include/visibility_control.hpp:39:8]: Replace [\n  ] with [\n]
7: -   #endif
7: -   #define LDLIDAR_COMPONENTS_PUBLIC_TYPE LDLIDAR_COMPONENTS_PUBLIC
7: +   #endif
7: + #define LDLIDAR_COMPONENTS_PUBLIC_TYPE LDLIDAR_COMPONENTS_PUBLIC
7: [include/visibility_control.hpp:40:66]: Replace [\n  ] with [\n]
7: -   #define LDLIDAR_COMPONENTS_PUBLIC_TYPE LDLIDAR_COMPONENTS_PUBLIC
7: -   #define LDLIDAR_COMPONENTS_LOCAL
7: +   #define LDLIDAR_COMPONENTS_PUBLIC_TYPE LDLIDAR_COMPONENTS_PUBLIC
7: + #define LDLIDAR_COMPONENTS_LOCAL
7: [include/visibility_control.hpp:42:5]: Replace [\n  ] with [\n]
7: - #else
7: -   #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))
7: + #else
7: + #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))
7: [include/visibility_control.hpp:43:49]: Replace [ ] with []
7: -   #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))
7: +   #define LDLIDAR_COMPONENTS_EXPORT __attribute__((visibility("default")))
7: [include/visibility_control.hpp:43:75]: Replace [\n  ] with [\n]
7: -   #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))
7: -   #define LDLIDAR_COMPONENTS_IMPORT
7: +   #define LDLIDAR_COMPONENTS_EXPORT __attribute__ ((visibility("default")))
7: + #define LDLIDAR_COMPONENTS_IMPORT
7: [include/visibility_control.hpp:44:35]: Replace [\n  ] with [\n]
7: -   #define LDLIDAR_COMPONENTS_IMPORT
7: -   #if __GNUC__ >= 4
7: +   #define LDLIDAR_COMPONENTS_IMPORT
7: + #if __GNUC__ >= 4
7: [include/visibility_control.hpp:45:19]: Replace [\n    ] with [\n]
7: -   #if __GNUC__ >= 4
7: -     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))
7: +   #if __GNUC__ >= 4
7: + #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))
7: [include/visibility_control.hpp:46:51]: Replace [ ] with []
7: -     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))
7: +     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__((visibility("default")))
7: [include/visibility_control.hpp:46:77]: Replace [\n    ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))
7: -     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))
7: +     #define LDLIDAR_COMPONENTS_PUBLIC __attribute__ ((visibility("default")))
7: + #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))
7: [include/visibility_control.hpp:47:36]: Replace [  ] with [ ]
7: -     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))
7: +     #define LDLIDAR_COMPONENTS_LOCAL __attribute__ ((visibility("hidden")))
7: [include/visibility_control.hpp:47:51]: Replace [ ] with []
7: -     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))
7: +     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__((visibility("hidden")))
7: [include/visibility_control.hpp:47:76]: Replace [\n  ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))
7: -   #else
7: +     #define LDLIDAR_COMPONENTS_LOCAL  __attribute__ ((visibility("hidden")))
7: + #else
7: [include/visibility_control.hpp:48:7]: Replace [\n    ] with [\n]
7: -   #else
7: -     #define LDLIDAR_COMPONENTS_PUBLIC
7: +   #else
7: + #define LDLIDAR_COMPONENTS_PUBLIC
7: [include/visibility_control.hpp:49:37]: Replace [\n    ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_PUBLIC
7: -     #define LDLIDAR_COMPONENTS_LOCAL
7: +     #define LDLIDAR_COMPONENTS_PUBLIC
7: + #define LDLIDAR_COMPONENTS_LOCAL
7: [include/visibility_control.hpp:50:36]: Replace [\n  ] with [\n]
7: -     #define LDLIDAR_COMPONENTS_LOCAL
7: -   #endif
7: +     #define LDLIDAR_COMPONENTS_LOCAL
7: + #endif
7: [include/visibility_control.hpp:51:8]: Replace [\n  ] with [\n]
7: -   #endif
7: -   #define LDLIDAR_COMPONENTS_PUBLIC_TYPE
7: +   #endif
7: + #define LDLIDAR_COMPONENTS_PUBLIC_TYPE
7: 
7: Code style divergence in file 'ldlidar_driver/include/core/ldlidar_datatype.h':
7: 
7: [ldlidar_driver/include/core/ldlidar_datatype.h:29:39]: Replace [ ] with []
7: - #define ANGLE_TO_RADIAN(angle) ((angle) * 3141.59 / 180000)
7: + #define ANGLE_TO_RADIAN(angle) ((angle)* 3141.59 / 180000)
7: [ldlidar_driver/include/core/ldlidar_datatype.h:29:41]: Replace [ ] with []
7: - #define ANGLE_TO_RADIAN(angle) ((angle) * 3141.59 / 180000)
7: + #define ANGLE_TO_RADIAN(angle) ((angle) *3141.59 / 180000)
7: [ldlidar_driver/include/core/ldlidar_datatype.h:30:40]: Replace [ ] with []
7: - #define RADIAN_TO_ANGLED(angle) ((angle) * 180000 / 3141.59)
7: + #define RADIAN_TO_ANGLED(angle) ((angle)* 180000 / 3141.59)
7: [ldlidar_driver/include/core/ldlidar_datatype.h:30:42]: Replace [ ] with []
7: - #define RADIAN_TO_ANGLED(angle) ((angle) * 180000 / 3141.59)
7: + #define RADIAN_TO_ANGLED(angle) ((angle) *180000 / 3141.59)
7: [ldlidar_driver/include/core/ldlidar_datatype.h:32:17]: Replace [ ] with [\n]
7: - namespace ldlidar {
7: + namespace ldlidar
7: + {
7: [ldlidar_driver/include/core/ldlidar_datatype.h:32:19]: Replace [\n\n  ] with [\n\n]
7: - namespace ldlidar {
7: - 
7: -   enum class LDType
7: + namespace ldlidar {
7: + 
7: + enum class LDType
7: [ldlidar_driver/include/core/ldlidar_datatype.h:34:19]: Replace [\n  ] with [ ]
7: -   enum class LDType
7: -   {
7: +   enum class LDType {
7: [ldlidar_driver/include/core/ldlidar_datatype.h:35:3]: Replace [\n    ] with [\n  ]
7: -   {
7: -     NO_VERSION,
7: +   {
7: +   NO_VERSION,
7: [ldlidar_driver/include/core/ldlidar_datatype.h:36:15]: Replace [\n    ] with [\n  ]
7: -     NO_VERSION,
7: -     LD_06,
7: +     NO_VERSION,
7: +   LD_06,
7: [ldlidar_driver/include/core/ldlidar_datatype.h:37:10]: Replace [\n    ] with [\n  ]
7: -     LD_06,
7: -     LD_19,
7: +     LD_06,
7: +   LD_19,
7: [ldlidar_driver/include/core/ldlidar_datatype.h:38:10]: Replace [\n    ] with [\n  ]
7: -     LD_19,
7: -     STL_06P,
7: +     LD_19,
7: +   STL_06P,
7: [ldlidar_driver/include/core/ldlidar_datatype.h:39:12]: Replace [\n    ] with [\n  ]
7: -     STL_06P,
7: -     STL_26,
7: +     STL_06P,
7: +   STL_26,
7: [ldlidar_driver/include/core/ldlidar_datatype.h:40:11]: Replace [\n    ] with [\n  ]
7: -     STL_26,
7: -     STL_27L,
7: +     STL_26,
7: +   STL_27L,
7: [ldlidar_driver/include/core/ldlidar_datatype.h:41:12]: Replace [\n  ] with [\n]
7: -     STL_27L,
7: -   };
7: +     STL_27L,
7: + };
7: [ldlidar_driver/include/core/ldlidar_datatype.h:42:4]: Replace [\n\n  ] with [\n\n]
7: -   };
7: - 
7: -   enum class LidarStatus
7: +   };
7: + 
7: + enum class LidarStatus
7: [ldlidar_driver/include/core/ldlidar_datatype.h:44:24]: Replace [\n  ] with [ ]
7: -   enum class LidarStatus
7: -   {
7: +   enum class LidarStatus {
7: [ldlidar_driver/include/core/ldlidar_datatype.h:45:3]: Replace [\n    ] with [\n  ]
7: -   {
7: -     NORMAL,   //  雷达正常,可获取点云数据
7: +   {
7: +   NORMAL,   //  雷达正常,可获取点云数据
7: [ldlidar_driver/include/core/ldlidar_datatype.h:46:11]: Replace [   ] with [  ]
7: -     NORMAL,   //  雷达正常,可获取点云数据
7: +     NORMAL,  //  雷达正常,可获取点云数据
7: [ldlidar_driver/include/core/ldlidar_datatype.h:47:21]: Replace [达出现异常] with [\n  ]
7: -     ERROR,    //  表明雷达出现异常错误，可获取雷达反馈的错误码了解具体错误，具体错误由错误码对应二进制值的对应位决定
7: +     ERROR,    //  表明雷
7: +   错误，可获取雷达反馈的错误码了解具体错误，具体错误由错误码对应二进制值的对应位决定
7: [ldlidar_driver/include/core/ldlidar_datatype.h:47:32]: Replace [雷达反馈] with [  ]
7: -     ERROR,    //  表明雷达出现异常错误，可获取雷达反馈的错误码了解具体错误，具体错误由错误码对应二进制值的对应位决定
7: +     ERROR,    //  表明雷达出现异常错误，可获取  的错误码了解具体错误，具体错误由错误码对应二进制值的对应位决定
7: [ldlidar_driver/include/core/ldlidar_datatype.h:54:0]: Replace [  {\n ] with [\n  ]
7: -   {
7: -     // Polar coordinate representation
7: + 
7: +      // Polar coordinate representation
7: [ldlidar_driver/include/core/ldlidar_datatype.h:55:15]: Replace [o] with [  ]
7: -     // Polar coordinate representation
7: +     // Polar co  rdinate representation
7: [ldlidar_driver/include/core/ldlidar_datatype.h:56:14]: Replace [e;   ] with [\n  ]
7: -     float angle;       // Angle ranges from 0 to 359 degrees
7: +     float angl
7: +       // Angle ranges from 0 to 359 degrees
7: [ldlidar_driver/include/core/ldlidar_datatype.h:56:29]: Replace [l] with [      ]
7: -     float angle;       // Angle ranges from 0 to 359 degrees
7: +     float angle;       // Ang      e ranges from 0 to 359 degrees
7: [ldlidar_driver/include/core/ldlidar_datatype.h:57:6]: Replace [nt16_] with [\n  ]
7: -     uint16_t distance; // Distance is measured in millimeters
7: +     ui
7: +   t distance; // Distance is measured in millimeters
7: [ldlidar_driver/include/core/ldlidar_datatype.h:57:16]: Replace [tance] with [           ]
7: -     uint16_t distance; // Distance is measured in millimeters
7: +     uint16_t dis           ; // Distance is measured in millimeters
7: [ldlidar_driver/include/core/ldlidar_datatype.h:57:40]: Replace [asu] with [\n]
7: -     uint16_t distance; // Distance is measured in millimeters
7: +     uint16_t distance; // Distance is me
7: + red in millimeters
7: [ldlidar_driver/include/core/ldlidar_datatype.h:57:45]: Replace [d in] with [\n\n]
7: -     uint16_t distance; // Distance is measured in millimeters
7: +     uint16_t distance; // Distance is measure
7: + 
7: +  millimeters
7: [ldlidar_driver/include/core/ldlidar_datatype.h:58:3]: Replace [ ui] with [\n]
7: -     uint8_t intensity; // Intensity is 0 to 255
7: +    
7: + nt8_t intensity; // Intensity is 0 to 255
7: [ldlidar_driver/include/core/ldlidar_datatype.h:58:7]: Replace [t8_t ] with [\n  ]
7: -     uint8_t intensity; // Intensity is 0 to 255
7: +     uin
7: +   intensity; // Intensity is 0 to 255
7: [ldlidar_driver/include/core/ldlidar_datatype.h:58:46]: Replace [5\n   ] with [\n  ]
7: -     uint8_t intensity; // Intensity is 0 to 255
7: -     //! System time when first range was measured in nanoseconds
7: +     uint8_t intensity; // Intensity is 0 to 25
7: +    //! System time when first range was measured in nanoseconds
7: [ldlidar_driver/include/core/ldlidar_datatype.h:59:15]: Replace [time wh] with [        ]
7: -     //! System time when first range was measured in nanoseconds
7: +     //! System         en first range was measured in nanoseconds
7: [ldlidar_driver/include/core/ldlidar_datatype.h:59:59]: Replace [conds] with [\n  ]
7: -     //! System time when first range was measured in nanoseconds
7: +     //! System time when first range was measured in nanose
7: +   
7: [ldlidar_driver/include/core/ldlidar_datatype.h:60:17]: Replace [p] with [  ]
7: -     uint64_t stamp;
7: +     uint64_t stam  ;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:61:36]: Replace [tatio] with [\n  ]
7: -     // Cartesian coordinate representation
7: +     // Cartesian coordinate represen
7: +   n
7: [ldlidar_driver/include/core/ldlidar_datatype.h:63:2]: Replace [ ] with [  ]
7: -     double y;
7: +      double y;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:64:13]: Replace [(\n   ] with [\n  ]
7: -     PointData(
7: -       float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double x = 0,
7: +     PointData
7: +      float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double x = 0,
7: [ldlidar_driver/include/core/ldlidar_datatype.h:65:63]: Replace [_t st] with [\n  ]
7: -       float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double x = 0,
7: +       float angle, uint16_t distance, uint8_t intensity, uint64
7: +   amp = 0, double x = 0,
7: [ldlidar_driver/include/core/ldlidar_datatype.h:65:83]: Replace [ x = ] with [\n  ]
7: -       float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double x = 0,
7: +       float angle, uint16_t distance, uint8_t intensity, uint64_t stamp = 0, double
7: +   0,
7: [ldlidar_driver/include/core/ldlidar_datatype.h:67:13]: Replace [ngle ] with [\n  ]
7: -       this->angle = angle;
7: +       this->a
7: +   = angle;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:68:0]: Replace [     ] with [\n  ]
7: -       this->distance = distance;
7: + 
7: +    this->distance = distance;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:68:14]: Replace [stanc] with [\n  ]
7: -       this->distance = distance;
7: +       this->di
7: +   e = distance;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:68:29]: Replace [ce;\n   ] with [\n    ]
7: -       this->distance = distance;
7: -       this->intensity = intensity;
7: +       this->distance = distan
7: +        this->intensity = intensity;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:72:6]: Replace [this->y] with [\n    ]
7: -       this->y = y;
7: +       
7: +      = y;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:74:1]: Replace [ ] with [\n  ]
7: -     PointData() {
7: +  
7: +     PointData() {
7: [ldlidar_driver/include/core/ldlidar_datatype.h:74:3]: Replace [ PointD] with [\n    ]
7: -     PointData() {
7: +    
7: +     ata() {
7: [ldlidar_driver/include/core/ldlidar_datatype.h:78:0]: Replace [  typed] with [\n    ]
7: -   typedef std::vector < PointData > Points2D;
7: + 
7: +     ef std::vector < PointData > Points2D;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:78:33]: Replace [ > Poin] with [\n    ]
7: -   typedef std::vector < PointData > Points2D;
7: +   typedef std::vector < PointData
7: +     ts2D;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:81:2]: Replace [{\n    /] with [\n    ]
7: -   {
7: -     //! System time when first range was measured in nanoseconds
7: +   
7: +     /! System time when first range was measured in nanoseconds
7: [ldlidar_driver/include/core/ldlidar_datatype.h:82:25]: Replace [first r] with [\n    ]
7: -     //! System time when first range was measured in nanoseconds
7: +     //! System time when 
7: +     ange was measured in nanoseconds
7: [ldlidar_driver/include/core/ldlidar_datatype.h:82:44]: Replace [sured i] with [\n    ]
7: -     //! System time when first range was measured in nanoseconds
7: +     //! System time when first range was mea
7: +     n nanoseconds
7: [ldlidar_driver/include/core/ldlidar_datatype.h:82:63]: Replace [s\n   ] with [\n  ]
7: -     //! System time when first range was measured in nanoseconds
7: -     uint64_t stamp;
7: +     //! System time when first range was measured in nanosecond
7: +    uint64_t stamp;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:83:4]: Replace [uint6] with [\n  ]
7: -     uint64_t stamp;
7: +     
7: +   4_t stamp;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:84:2]: Replace [  //!] with []
7: -     //! Array of laser point
7: +    Array of laser point
7: [ldlidar_driver/include/core/ldlidar_datatype.h:84:8]: Replace [Arr] with [\n]
7: -     //! Array of laser point
7: +     //! 
7: + ay of laser point
7: [ldlidar_driver/include/core/ldlidar_datatype.h:84:13]: Replace [ of ] with [\n\n]
7: -     //! Array of laser point
7: +     //! Array
7: + 
7: + laser point
7: [ldlidar_driver/include/core/ldlidar_datatype.h:85:7]: Replace [n] with []
7: -     Points2D points;
7: +     Poits2D points;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:85:9]: Replace [s] with []
7: -     Points2D points;
7: +     Point2D points;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:85:19]: Replace [;] with []
7: -     Points2D points;
7: +     Points2D points
7: [ldlidar_driver/include/core/ldlidar_datatype.h:87:9]: Replace [Scan] with [\n\n]
7: -     LaserScan & operator = (const LaserScan & data) {
7: +     Laser
7: + 
7: +  & operator = (const LaserScan & data) {
7: [ldlidar_driver/include/core/ldlidar_datatype.h:87:29]: Replace [ons] with [\n]
7: -     LaserScan & operator = (const LaserScan & data) {
7: +     LaserScan & operator = (c
7: + t LaserScan & data) {
7: [ldlidar_driver/include/core/ldlidar_datatype.h:87:33]: Replace [ Lase] with [\n  ]
7: -     LaserScan & operator = (const LaserScan & data) {
7: +     LaserScan & operator = (const
7: +   rScan & data) {
7: [ldlidar_driver/include/core/ldlidar_datatype.h:89:12]: Replace [point] with [\n  ]
7: -       this->points = data.points;
7: +       this->
7: +   s = data.points;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:89:32]: Replace [;\n   ] with [\n  ]
7: -       this->points = data.points;
7: -       return *this;
7: +       this->points = data.points
7: +      return *this;
7: [ldlidar_driver/include/core/ldlidar_datatype.h:92:1]: Replace [ };\n\n] with [\n  ]
7: -   };
7: - 
7: - } // namespace ldlidar
7: +  
7: +   } // namespace ldlidar
7: [ldlidar_driver/include/core/ldlidar_datatype.h:94:16]: Replace [dlidar] with [\n\n  ]
7: - } // namespace ldlidar
7: + } // namespace l
7: + 
7: +   
7: [ldlidar_driver/include/core/ldlidar_datatype.h:96:18]: Replace [D] with []
7: - #endif  // _POINT_DATA_H_
7: + #endif  // _POINT_ATA_H_
7: [ldlidar_driver/include/core/ldlidar_datatype.h:96:20]: Replace [T] with []
7: - #endif  // _POINT_DATA_H_
7: + #endif  // _POINT_DAA_H_
7: [ldlidar_driver/include/core/ldlidar_datatype.h:98:18]: Replace [*] with [\n  ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF
7: + /*****************
7: +   *** (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF
7: [ldlidar_driver/include/core/ldlidar_datatype.h:98:20]: Replace [** (C) ] with [\n    ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF
7: + /*******************
7: +     COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF
7: [ldlidar_driver/include/core/ldlidar_datatype.h:98:52]: Replace [T CO., ] with [\n    ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF
7: + /********************* (C) COPYRIGHT SHENZHEN LDROBO
7: +     LTD *******END OF
7: [ldlidar_driver/include/core/ldlidar_datatype.h:99:9]: Replace [*******] with [\n    ]
7: -  * FILE ********/
7: +  * FILE *
7: +     /
7: [ldlidar_driver/include/core/ldlidar_datatype.h:100:11]: Replace [] with [\n  ]
7: - 
7: + 
7: +   
7: [ldlidar_driver/include/core/ldlidar_datatype.h:100:17]: Replace [] with [\n]
7: - 
7: + 
7: + 
7: [ldlidar_driver/include/core/ldlidar_datatype.h:100:25]: Replace [] with [  ]
7: - 
7: +   
7: 
7: Code style divergence in file 'ldlidar_driver/include/core/ldlidar_driver.h':
7: 
7: [ldlidar_driver/include/core/ldlidar_driver.h:24:0]: Replace [#include <chrono>\n#include <functional>\n\n#include "serial_interface_linux.h"\n#include "network_socket_interface_linux.h"\n#include "lipkg.h"\n#include "log_module.h"] with [#include <chrono>\n#include <functional>\n\n#include "lipkg.h"\n#include "log_module.h"\n#include "network_socket_interface_linux.h"\n#include "serial_interface_linux.h"]
7: - #include <chrono>
7: - #include <functional>
7: - 
7: - #include "serial_interface_linux.h"
7: - #include "network_socket_interface_linux.h"
7: - #include "lipkg.h"
7: - #include "log_module.h"
7: + #include <chrono>
7: + #include <functional>
7: + 
7: + #include "lipkg.h"
7: + #include "log_module.h"
7: + #include "network_socket_interface_linux.h"
7: + #include "serial_interface_linux.h"
7: [ldlidar_driver/include/core/ldlidar_driver.h:32:17]: Replace [ ] with [\n]
7: - namespace ldlidar {
7: + namespace ldlidar
7: + {
7: [ldlidar_driver/include/core/ldlidar_driver.h:32:19]: Replace [\n\n  ] with [\n\n]
7: - namespace ldlidar {
7: - 
7: -   typedef enum CommunicationMode
7: + namespace ldlidar {
7: + 
7: + typedef enum CommunicationMode
7: [ldlidar_driver/include/core/ldlidar_driver.h:34:32]: Replace [\n  ] with [ ]
7: -   typedef enum CommunicationMode
7: -   {
7: +   typedef enum CommunicationMode {
7: [ldlidar_driver/include/core/ldlidar_driver.h:35:3]: Replace [\n    ] with [\n  ]
7: -   {
7: -     COMM_NO_NULL,
7: +   {
7: +   COMM_NO_NULL,
7: [ldlidar_driver/include/core/ldlidar_driver.h:36:17]: Replace [\n    ] with [\n  ]
7: -     COMM_NO_NULL,
7: -     COMM_SERIAL_MODE, /* serial communication */
7: +     COMM_NO_NULL,
7: +   COMM_SERIAL_MODE, /* serial communication */
7: [ldlidar_driver/include/core/ldlidar_driver.h:37:21]: Replace [ ] with [     ]
7: -     COMM_SERIAL_MODE, /* serial communication */
7: +     COMM_SERIAL_MODE,     /* serial communication */
7: [ldlidar_driver/include/core/ldlidar_driver.h:37:48]: Replace [\n    ] with [\n  ]
7: -     COMM_SERIAL_MODE, /* serial communication */
7: -     COMM_UDP_CLIENT_MODE, /* network communication for UDP client */
7: +     COMM_SERIAL_MODE, /* serial communication */
7: +   COMM_UDP_CLIENT_MODE, /* network communication for UDP client */
7: [ldlidar_driver/include/core/ldlidar_driver.h:38:68]: Replace [\n    ] with [\n  ]
7: -     COMM_UDP_CLIENT_MODE, /* network communication for UDP client */
7: -     COMM_UDP_SERVER_MODE, /* network communication for UDP server */
7: +     COMM_UDP_CLIENT_MODE, /* network communication for UDP client */
7: +   COMM_UDP_SERVER_MODE, /* network communication for UDP server */
7: [ldlidar_driver/include/core/ldlidar_driver.h:39:68]: Replace [\n    ] with [\n  ]
7: -     COMM_UDP_SERVER_MODE, /* network communication for UDP server */
7: -     COMM_TCP_CLIENT_MODE, /* network communication for TCP client */
7: +     COMM_UDP_SERVER_MODE, /* network communication for UDP server */
7: +   COMM_TCP_CLIENT_MODE, /* network communication for TCP client */
7: [ldlidar_driver/include/core/ldlidar_driver.h:40:68]: Replace [\n    ] with [\n  ]
7: -     COMM_TCP_CLIENT_MODE, /* network communication for TCP client */
7: -     COMM_TCP_SERVER_MODE /* network communication for TCP server */
7: +     COMM_TCP_CLIENT_MODE, /* network communication for TCP client */
7: +   COMM_TCP_SERVER_MODE /* network communication for TCP server */
7: [ldlidar_driver/include/core/ldlidar_driver.h:41:24]: Replace [ ] with [  ]
7: -     COMM_TCP_SERVER_MODE /* network communication for TCP server */
7: +     COMM_TCP_SERVER_MODE  /* network communication for TCP server */
7: [ldlidar_driver/include/core/ldlidar_driver.h:41:67]: Replace [\n  ] with [\n]
7: -     COMM_TCP_SERVER_MODE /* network communication for TCP server */
7: -   } CommunicationModeTypeDef;
7: +     COMM_TCP_SERVER_MODE /* network communication for TCP server */
7: + } CommunicationModeTypeDef;
7: [ldlidar_driver/include/core/ldlidar_driver.h:42:29]: Replace [\n\n  ] with [\n\n]
7: -   } CommunicationModeTypeDef;
7: - 
7: -   class LDLidarDriver {
7: +   } CommunicationModeTypeDef;
7: + 
7: + class LDLidarDriver {
7: [ldlidar_driver/include/core/ldlidar_driver.h:44:21]: Replace [ ] with [\n]
7: -   class LDLidarDriver {
7: +   class LDLidarDriver
7: + {
7: [ldlidar_driver/include/core/ldlidar_driver.h:45:7]: Replace [\n    ] with [\n  ]
7: - public:
7: -     LDLidarDriver();
7: + public:
7: +   LDLidarDriver();
7: [ldlidar_driver/include/core/ldlidar_driver.h:46:20]: Replace [\n    ] with [\n  ]
7: -     LDLidarDriver();
7: -     ~LDLidarDriver();
7: +     LDLidarDriver();
7: +   ~LDLidarDriver();
7: [ldlidar_driver/include/core/ldlidar_driver.h:47:21]: Replace [\n\n    ] with [\n\n  ]
7: -     ~LDLidarDriver();
7: - 
7: -     /**
7: +     ~LDLidarDriver();
7: + 
7: +   /**
7: [ldlidar_driver/include/core/ldlidar_driver.h:53:6]: Replace [\n    ] with [\n  ]
7: -     */
7: -     std::string GetLidarSdkVersionNumber(void);
7: +     */
7: +   std::string GetLidarSdkVersionNumber(void);
7: [ldlidar_driver/include/core/ldlidar_driver.h:54:47]: Replace [\n\n    ] with [\n\n  ]
7: -     std::string GetLidarSdkVersionNumber(void);
7: - 
7: -     /**
7: +     std::string GetLidarSdkVersionNumber(void);
7: + 
7: +   /**
7: [ldlidar_driver/include/core/ldlidar_driver.h:70:6]: Replace [\n    ] with [\n  ]
7: -     */
7: -     bool Start(
7: +     */
7: +   bool Start(
7: [ldlidar_driver/include/core/ldlidar_driver.h:71:15]: Replace [\n      ] with [\n    ]
7: -     bool Start(
7: -       LDType product_name,
7: +     bool Start(
7: +     LDType product_name,
7: [ldlidar_driver/include/core/ldlidar_driver.h:72:26]: Replace [\n      ] with [ ]
7: -       LDType product_name,
7: -       std::string serial_port_name,
7: +       LDType product_name, std::string serial_port_name,
7: [ldlidar_driver/include/core/ldlidar_driver.h:73:35]: Replace [\n      ] with [ ]
7: -       std::string serial_port_name,
7: -       uint32_t serial_baudrate = 115200,
7: +       std::string serial_port_name, uint32_t serial_baudrate = 115200,
7: [ldlidar_driver/include/core/ldlidar_driver.h:74:40]: Replace [\n      ] with [\n    ]
7: -       uint32_t serial_baudrate = 115200,
7: -       CommunicationModeTypeDef comm_mode = COMM_SERIAL_MODE);
7: +       uint32_t serial_baudrate = 115200,
7: +     CommunicationModeTypeDef comm_mode = COMM_SERIAL_MODE);
7: [ldlidar_driver/include/core/ldlidar_driver.h:75:61]: Replace [\n\n    ] with [\n\n  ]
7: -       CommunicationModeTypeDef comm_mode = COMM_SERIAL_MODE);
7: - 
7: -     bool Start(
7: +       CommunicationModeTypeDef comm_mode = COMM_SERIAL_MODE);
7: + 
7: +   bool Start(
7: [ldlidar_driver/include/core/ldlidar_driver.h:77:15]: Replace [\n      ] with [\n    ]
7: -     bool Start(
7: -       LDType product_name,
7: +     bool Start(
7: +     LDType product_name,
7: [ldlidar_driver/include/core/ldlidar_driver.h:78:26]: Replace [\n      ] with [ ]
7: -       LDType product_name,
7: -       const char * server_ip,
7: +       LDType product_name, const char * server_ip,
7: [ldlidar_driver/include/core/ldlidar_driver.h:79:29]: Replace [\n      ] with [ ]
7: -       const char * server_ip,
7: -       const char * server_port,
7: +       const char * server_ip, const char * server_port,
7: [ldlidar_driver/include/core/ldlidar_driver.h:80:31]: Replace [\n      ] with [\n    ]
7: -       const char * server_port,
7: -       CommunicationModeTypeDef comm_mode = COMM_TCP_CLIENT_MODE);
7: +       const char * server_port,
7: +     CommunicationModeTypeDef comm_mode = COMM_TCP_CLIENT_MODE);
7: [ldlidar_driver/include/core/ldlidar_driver.h:81:65]: Replace [\n\n    ] with [\n\n  ]
7: -       CommunicationModeTypeDef comm_mode = COMM_TCP_CLIENT_MODE);
7: - 
7: -     /**
7: +       CommunicationModeTypeDef comm_mode = COMM_TCP_CLIENT_MODE);
7: + 
7: +   /**
7: [ldlidar_driver/include/core/ldlidar_driver.h:88:6]: Replace [\n    ] with [\n  ]
7: -     */
7: -     bool Stop(void);
7: +     */
7: +   bool Stop(void);
7: [ldlidar_driver/include/core/ldlidar_driver.h:89:20]: Replace [\n\n    ] with [\n\n  ]
7: -     bool Stop(void);
7: - 
7: -     /**
7: +     bool Stop(void);
7: + 
7: +   /**
7: [ldlidar_driver/include/core/ldlidar_driver.h:97:6]: Replace [\n    ] with [\n  ]
7: -     */
7: -     bool WaitLidarCommConnect(int64_t timeout);
7: +     */
7: +   bool WaitLidarCommConnect(int64_t timeout);
7: [ldlidar_driver/include/core/ldlidar_driver.h:98:47]: Replace [\n\n    ] with [\n\n  ]
7: -     bool WaitLidarCommConnect(int64_t timeout);
7: - 
7: -     /**
7: +     bool WaitLidarCommConnect(int64_t timeout);
7: + 
7: +   /**
7: [ldlidar_driver/include/core/ldlidar_driver.h:111:19]: Replace [Laser] with [\n  ]
7: -     LidarStatus GetLaserScanData(Points2D & dst, int64_t timeout = 1000);
7: +     LidarStatus Get
7: +   ScanData(Points2D & dst, int64_t timeout = 1000);
7: [ldlidar_driver/include/core/ldlidar_driver.h:113:18]: Replace [tLaser] with [\n\n  ]
7: -     LidarStatus GetLaserScanData(LaserScan & dst, int64_t timeout = 1000);
7: +     LidarStatus Ge
7: + 
7: +   ScanData(LaserScan & dst, int64_t timeout = 1000);
7: [ldlidar_driver/include/core/ldlidar_driver.h:116:10]: Replace [ief ge] with [\n\n  ]
7: -      * @brief get lidar laser scan frequence
7: +      * @br
7: + 
7: +   t lidar laser scan frequence
7: [ldlidar_driver/include/core/ldlidar_driver.h:122:19]: Replace [anFre] with [\n  ]
7: -     bool GetLidarScanFreq(double & spin_hz);
7: +     bool GetLidarSc
7: +   q(double & spin_hz);
7: [ldlidar_driver/include/core/ldlidar_driver.h:125:10]: Replace [ief re] with [\n\n  ]
7: -      * @brief register get timestamp handle functional.
7: +      * @br
7: + 
7: +   gister get timestamp handle functional.
7: [ldlidar_driver/include/core/ldlidar_driver.h:130:19]: Replace [tTime] with [\n  ]
7: -     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_handle);
7: +     void RegisterGe
7: +   stampFunctional(std::function < uint64_t(void) > get_timestamp_handle);
7: [ldlidar_driver/include/core/ldlidar_driver.h:130:73]: Replace [g] with []
7: -     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_handle);
7: +     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > et_timestamp_handle);
7: [ldlidar_driver/include/core/ldlidar_driver.h:130:75]: Replace [t] with []
7: -     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_handle);
7: +     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > ge_timestamp_handle);
7: [ldlidar_driver/include/core/ldlidar_driver.h:130:90]: Replace [d] with []
7: -     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_handle);
7: +     void RegisterGetTimestampFunctional(std::function < uint64_t(void) > get_timestamp_hanle);
7: [ldlidar_driver/include/core/ldlidar_driver.h:133:10]: Replace [ief op] with [\n\n  ]
7: -      * @brief open or close filter algorithnm process
7: +      * @br
7: + 
7: +   en or close filter algorithnm process
7: [ldlidar_driver/include/core/ldlidar_driver.h:139:19]: Replace [erAlg] with [\n  ]
7: -     void EnableFilterAlgorithnmProcess(bool is_enable);
7: +     void EnableFilt
7: +   orithnmProcess(bool is_enable);
7: [ldlidar_driver/include/core/ldlidar_driver.h:142:10]: Replace [ief Wh] with [\n\n  ]
7: -      * @brief When the lidar is in an error state, get the error code fed back by the lidar
7: +      * @br
7: + 
7: +   en the lidar is in an error state, get the error code fed back by the lidar
7: [ldlidar_driver/include/core/ldlidar_driver.h:146:19]: Replace [idarE] with [\n  ]
7: -     // uint8_t GetLidarErrorCode(void);
7: +     // uint8_t GetL
7: +   rrorCode(void);
7: [ldlidar_driver/include/core/ldlidar_driver.h:148:18]: Replace [Ok() {] with [\n\n  ]
7: -     static bool IsOk() {return is_ok_;}
7: +     static bool Is
7: + 
7: +   return is_ok_;}
7: [ldlidar_driver/include/core/ldlidar_driver.h:150:3]: Replace [] with [ ]
7: -     static void SetIsOkStatus(bool status) {is_ok_ = status;}
7: +      static void SetIsOkStatus(bool status) {is_ok_ = status;}
7: [ldlidar_driver/include/core/ldlidar_driver.h:150:17]: Replace [] with [ ]
7: -     static void SetIsOkStatus(bool status) {is_ok_ = status;}
7: +     static void S etIsOkStatus(bool status) {is_ok_ = status;}
7: [ldlidar_driver/include/core/ldlidar_driver.h:150:18]: Replace [tIsOkS] with [\n\n  ]
7: -     static void SetIsOkStatus(bool status) {is_ok_ = status;}
7: +     static void Se
7: + 
7: +   tatus(bool status) {is_ok_ = status;}
7: [ldlidar_driver/include/core/ldlidar_driver.h:152:1]: Replace [] with [ ]
7: - private:
7: + p rivate:
7: [ldlidar_driver/include/core/ldlidar_driver.h:153:8]: Replace [] with [ ]
7: -     std::string sdk_version_number_;
7: +     std: :string sdk_version_number_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:153:19]: Replace [_vers] with [\n  ]
7: -     std::string sdk_version_number_;
7: +     std::string sdk
7: +   ion_number_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:154:19]: Replace [ok_;\n] with [\n  ]
7: -     static bool is_ok_;
7: -     bool is_start_flag_;
7: +     static bool is_
7: +       bool is_start_flag_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:155:19]: Replace [lag_;] with [\n  ]
7: -     bool is_start_flag_;
7: +     bool is_start_f
7: +   
7: [ldlidar_driver/include/core/ldlidar_driver.h:156:19]: Replace [ uint] with [\n  ]
7: -     std::function < uint64_t(void) > register_get_timestamp_handle_;
7: +     std::function <
7: +   64_t(void) > register_get_timestamp_handle_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:156:37]: Replace [r] with []
7: -     std::function < uint64_t(void) > register_get_timestamp_handle_;
7: +     std::function < uint64_t(void) > egister_get_timestamp_handle_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:156:39]: Replace [g] with []
7: -     std::function < uint64_t(void) > register_get_timestamp_handle_;
7: +     std::function < uint64_t(void) > reister_get_timestamp_handle_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:156:54]: Replace [s] with []
7: -     std::function < uint64_t(void) > register_get_timestamp_handle_;
7: +     std::function < uint64_t(void) > register_get_timetamp_handle_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:157:19]: Replace [g_;\n ] with [\n  ]
7: -     LiPkg * comm_pkg_;
7: -     SerialInterfaceLinux * comm_serial_;
7: +     LiPkg * comm_pk
7: +      SerialInterfaceLinux * comm_serial_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:158:19]: Replace [Linux] with [\n  ]
7: -     SerialInterfaceLinux * comm_serial_;
7: +     SerialInterface
7: +    * comm_serial_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:159:19]: Replace [aceLi] with [\n  ]
7: -     TCPSocketInterfaceLinux * comm_tcp_network_;
7: +     TCPSocketInterf
7: +   nux * comm_tcp_network_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:160:19]: Replace [aceLi] with [\n  ]
7: -     UDPSocketInterfaceLinux * comm_udp_network_;
7: +     UDPSocketInterf
7: +   nux * comm_udp_network_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:161:19]: Replace [2::st] with [\n  ]
7: -     std::chrono::_V2::steady_clock::time_point last_pubdata_times_;
7: +     std::chrono::_V
7: +   eady_clock::time_point last_pubdata_times_;
7: [ldlidar_driver/include/core/ldlidar_driver.h:164:13]: Replace [e l] with [\n]
7: - } // namespace ldlidar
7: + } // namespac
7: + dlidar
7: [ldlidar_driver/include/core/ldlidar_driver.h:164:21]: Replace [r] with [  ]
7: - } // namespace ldlidar
7: + } // namespace ldlida  
7: [ldlidar_driver/include/core/ldlidar_driver.h:166:26]: Replace [_] with [  ]
7: - #endif // __LDLIDAR_DRIVER_H__
7: + #endif // __LDLIDAR_DRIVER  H__
7: 
7: Code style divergence in file 'ldlidar_driver/include/dataprocess/lipkg.h':
7: 
7: [ldlidar_driver/include/dataprocess/lipkg.h:23:17]: Replace [\n\n\n#include <chrono>\n#include <functional>\n#include <mutex>\n\n#include <string.h>\n\n#include "ldlidar_datatype.h"\n#include "tofbf.h"] with [\n\n#include <string.h>\n\n#include <chrono>\n#include <functional>\n#include <mutex>\n\n#include "ldlidar_datatype.h"\n#include "tofbf.h"]
7: - #define __LIPKG_H
7: - 
7: - 
7: - #include <chrono>
7: - #include <functional>
7: - #include <mutex>
7: - 
7: - #include <string.h>
7: - 
7: - #include "ldlidar_datatype.h"
7: - #include "tofbf.h"
7: + #define __LIPKG_H
7: + 
7: + #include <string.h>
7: + 
7: + #include <chrono>
7: + #include <functional>
7: + #include <mutex>
7: + 
7: + #include "ldlidar_datatype.h"
7: + #include "tofbf.h"
7: [ldlidar_driver/include/dataprocess/lipkg.h:35:17]: Replace [ ] with [\n]
7: - namespace ldlidar {
7: + namespace ldlidar
7: + {
7: [ldlidar_driver/include/dataprocess/lipkg.h:35:19]: Replace [\n\n  ] with [\n\n]
7: - namespace ldlidar {
7: - 
7: -   enum
7: + namespace ldlidar {
7: + 
7: + enum
7: [ldlidar_driver/include/dataprocess/lipkg.h:37:6]: Replace [\n  ] with [ ]
7: -   enum
7: -   {
7: +   enum {
7: [ldlidar_driver/include/dataprocess/lipkg.h:38:3]: Replace [\n    ] with [\n  ]
7: -   {
7: -     PKG_HEADER = 0x54,
7: +   {
7: +   PKG_HEADER = 0x54,
7: [ldlidar_driver/include/dataprocess/lipkg.h:39:22]: Replace [\n    ] with [\n  ]
7: -     PKG_HEADER = 0x54,
7: -     PKG_VER_LEN = 0x2C,
7: +     PKG_HEADER = 0x54,
7: +   PKG_VER_LEN = 0x2C,
7: [ldlidar_driver/include/dataprocess/lipkg.h:40:23]: Replace [\n    ] with [\n  ]
7: -     PKG_VER_LEN = 0x2C,
7: -     POINT_PER_PACK = 12,
7: +     PKG_VER_LEN = 0x2C,
7: +   POINT_PER_PACK = 12,
7: [ldlidar_driver/include/dataprocess/lipkg.h:41:24]: Replace [\n  ] with [\n]
7: -     POINT_PER_PACK = 12,
7: -   };
7: +     POINT_PER_PACK = 12,
7: + };
7: [ldlidar_driver/include/dataprocess/lipkg.h:42:4]: Replace [\n\n  ] with [\n\n]
7: -   };
7: - 
7: -   typedef struct __attribute__((packed))
7: +   };
7: + 
7: + typedef struct __attribute__((packed))
7: [ldlidar_driver/include/dataprocess/lipkg.h:44:40]: Replace [\n  ] with [\n]
7: -   typedef struct __attribute__((packed))
7: -   {
7: +   typedef struct __attribute__((packed))
7: + {
7: [ldlidar_driver/include/dataprocess/lipkg.h:45:3]: Replace [\n    ] with [\n  ]
7: -   {
7: -     uint16_t distance;
7: +   {
7: +   uint16_t distance;
7: [ldlidar_driver/include/dataprocess/lipkg.h:46:22]: Replace [\n    ] with [\n  ]
7: -     uint16_t distance;
7: -     uint8_t intensity;
7: +     uint16_t distance;
7: +   uint8_t intensity;
7: [ldlidar_driver/include/dataprocess/lipkg.h:47:22]: Replace [\n  ] with [\n]
7: -     uint8_t intensity;
7: -   } LidarPointStructDef;
7: +     uint8_t intensity;
7: + } LidarPointStructDef;
7: [ldlidar_driver/include/dataprocess/lipkg.h:48:24]: Replace [\n\n  ] with [\n\n]
7: -   } LidarPointStructDef;
7: - 
7: -   typedef struct __attribute__((packed))
7: +   } LidarPointStructDef;
7: + 
7: + typedef struct __attribute__((packed))
7: [ldlidar_driver/include/dataprocess/lipkg.h:50:40]: Replace [\n  ] with [\n]
7: -   typedef struct __attribute__((packed))
7: -   {
7: +   typedef struct __attribute__((packed))
7: + {
7: [ldlidar_driver/include/dataprocess/lipkg.h:51:3]: Replace [\n    ] with [\n  ]
7: -   {
7: -     uint8_t header;
7: +   {
7: +   uint8_t header;
7: [ldlidar_driver/include/dataprocess/lipkg.h:52:19]: Replace [\n    ] with [\n  ]
7: -     uint8_t header;
7: -     uint8_t ver_len;
7: +     uint8_t header;
7: +   uint8_t ver_len;
7: [ldlidar_driver/include/dataprocess/lipkg.h:53:20]: Replace [\n    ] with [\n  ]
7: -     uint8_t ver_len;
7: -     uint16_t speed;
7: +     uint8_t ver_len;
7: +   uint16_t speed;
7: [ldlidar_driver/include/dataprocess/lipkg.h:54:19]: Replace [\n    ] with [\n  ]
7: -     uint16_t speed;
7: -     uint16_t start_angle;
7: +     uint16_t speed;
7: +   uint16_t start_angle;
7: [ldlidar_driver/include/dataprocess/lipkg.h:55:25]: Replace [\n    ] with [\n  ]
7: -     uint16_t start_angle;
7: -     LidarPointStructDef point[POINT_PER_PACK];
7: +     uint16_t start_angle;
7: +   LidarPointStructDef point[POINT_PER_PACK];
7: [ldlidar_driver/include/dataprocess/lipkg.h:56:46]: Replace [\n    ] with [\n  ]
7: -     LidarPointStructDef point[POINT_PER_PACK];
7: -     uint16_t end_angle;
7: +     LidarPointStructDef point[POINT_PER_PACK];
7: +   uint16_t end_angle;
7: [ldlidar_driver/include/dataprocess/lipkg.h:57:23]: Replace [\n    ] with [\n  ]
7: -     uint16_t end_angle;
7: -     uint16_t timestamp;
7: +     uint16_t end_angle;
7: +   uint16_t timestamp;
7: [ldlidar_driver/include/dataprocess/lipkg.h:58:23]: Replace [\n    ] with [\n  ]
7: -     uint16_t timestamp;
7: -     uint8_t crc8;
7: +     uint16_t timestamp;
7: +   uint8_t crc8;
7: [ldlidar_driver/include/dataprocess/lipkg.h:59:17]: Replace [\n  ] with [\n]
7: -     uint8_t crc8;
7: -   } LiDARFrameTypeDef;
7: +     uint8_t crc8;
7: + } LiDARFrameTypeDef;
7: [ldlidar_driver/include/dataprocess/lipkg.h:60:22]: Replace [\n\n  ] with [\n\n]
7: -   } LiDARFrameTypeDef;
7: - 
7: -   class LiPkg {
7: +   } LiDARFrameTypeDef;
7: + 
7: + class LiPkg {
7: [ldlidar_driver/include/dataprocess/lipkg.h:62:13]: Replace [ ] with [\n]
7: -   class LiPkg {
7: +   class LiPkg
7: + {
7: [ldlidar_driver/include/dataprocess/lipkg.h:63:7]: Replace [\n    ] with [\n  ]
7: - public:
7: -     LiPkg();
7: + public:
7: +   LiPkg();
7: [ldlidar_driver/include/dataprocess/lipkg.h:64:12]: Replace [\n    ] with [\n  ]
7: -     LiPkg();
7: -     ~LiPkg();
7: +     LiPkg();
7: +   ~LiPkg();
7: [ldlidar_driver/include/dataprocess/lipkg.h:65:13]: Replace [\n\n    ] with [\n\n  ]
7: -     ~LiPkg();
7: - 
7: -     // set product type (belong to enum class LDType)
7: +     ~LiPkg();
7: + 
7: +   // set product type (belong to enum class LDType)
7: [ldlidar_driver/include/dataprocess/lipkg.h:67:53]: Replace [\n    ] with [\n  ]
7: -     // set product type (belong to enum class LDType)
7: -     void SetProductType(LDType type_number);
7: +     // set product type (belong to enum class LDType)
7: +   void SetProductType(LDType type_number);
7: [ldlidar_driver/include/dataprocess/lipkg.h:68:44]: Replace [\n    ] with [\n  ]
7: -     void SetProductType(LDType type_number);
7: -     // get Lidar spin speed (Hz)
7: +     void SetProductType(LDType type_number);
7: +   // get Lidar spin speed (Hz)
7: [ldlidar_driver/include/dataprocess/lipkg.h:69:32]: Replace [\n    ] with [\n  ]
7: -     // get Lidar spin speed (Hz)
7: -     double GetSpeed(void);
7: +     // get Lidar spin speed (Hz)
7: +   double GetSpeed(void);
7: [ldlidar_driver/include/dataprocess/lipkg.h:70:26]: Replace [\n    ] with [\n  ]
7: -     double GetSpeed(void);
7: -     // get lidar spind speed (degree per second) origin
7: +     double GetSpeed(void);
7: +   // get lidar spind speed (degree per second) origin
7: [ldlidar_driver/include/dataprocess/lipkg.h:71:55]: Replace [\n    ] with [\n  ]
7: -     // get lidar spind speed (degree per second) origin
7: -     uint16_t GetSpeedOrigin(void);
7: +     // get lidar spind speed (degree per second) origin
7: +   uint16_t GetSpeedOrigin(void);
7: [ldlidar_driver/include/dataprocess/lipkg.h:72:34]: Replace [\n    ] with [\n  ]
7: -     uint16_t GetSpeedOrigin(void);
7: -     // get time stamp of the packet
7: +     uint16_t GetSpeedOrigin(void);
7: +   // get time stamp of the packet
7: [ldlidar_driver/include/dataprocess/lipkg.h:73:35]: Replace [\n    ] with [\n  ]
7: -     // get time stamp of the packet
7: -     uint16_t GetTimestamp(void);
7: +     // get time stamp of the packet
7: +   uint16_t GetTimestamp(void);
7: [ldlidar_driver/include/dataprocess/lipkg.h:74:32]: Replace [\n    ] with [\n  ]
7: -     uint16_t GetTimestamp(void);
7: -     // get lidar measure frequence(Hz)
7: +     uint16_t GetTimestamp(void);
7: +   // get lidar measure frequence(Hz)
7: [ldlidar_driver/include/dataprocess/lipkg.h:75:38]: Replace [\n    ] with [\n  ]
7: -     // get lidar measure frequence(Hz)
7: -     int GetLidarMeasurePointFrequence(void);
7: +     // get lidar measure frequence(Hz)
7: +   int GetLidarMeasurePointFrequence(void);
7: [ldlidar_driver/include/dataprocess/lipkg.h:76:44]: Replace [\n\n    ] with [\n\n  ]
7: -     int GetLidarMeasurePointFrequence(void);
7: - 
7: -     void CommReadCallback(const char * byte, size_t len);
7: +     int GetLidarMeasurePointFrequence(void);
7: + 
7: +   void CommReadCallback(const char * byte, size_t len);
7: [ldlidar_driver/include/dataprocess/lipkg.h:78:57]: Replace [\n\n    ] with [\n\n  ]
7: -     void CommReadCallback(const char * byte, size_t len);
7: - 
7: -     bool GetLaserScanData(Points2D & out);
7: +     void CommReadCallback(const char * byte, size_t len);
7: + 
7: +   bool GetLaserScanData(Points2D & out);
7: [ldlidar_driver/include/dataprocess/lipkg.h:80:42]: Replace [\n\n    ] with [\n\n  ]
7: -     bool GetLaserScanData(Points2D & out);
7: - 
7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);
7: +     bool GetLaserScanData(Points2D & out);
7: + 
7: +   void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);
7: [ldlidar_driver/include/dataprocess/lipkg.h:82:53]: Replace [ ] with []
7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);
7: +     void RegisterTimestampGetFunctional(std::function< uint64_t(void) > timestamp_handle);
7: [ldlidar_driver/include/dataprocess/lipkg.h:82:55]: Replace [ ] with []
7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);
7: +     void RegisterTimestampGetFunctional(std::function <uint64_t(void) > timestamp_handle);
7: [ldlidar_driver/include/dataprocess/lipkg.h:82:70]: Replace [ ] with []
7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);
7: +     void RegisterTimestampGetFunctional(std::function < uint64_t(void)> timestamp_handle);
7: [ldlidar_driver/include/dataprocess/lipkg.h:82:91]: Replace [\n\n    ] with [\n\n  ]
7: -     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);
7: - 
7: -     bool GetLidarPowerOnCommStatus(void);
7: +     void RegisterTimestampGetFunctional(std::function < uint64_t(void) > timestamp_handle);
7: + 
7: +   bool GetLidarPowerOnCommStatus(void);
7: [ldlidar_driver/include/dataprocess/lipkg.h:84:41]: Replace [\n\n    ] with [\n\n  ]
7: -     bool GetLidarPowerOnCommStatus(void);
7: - 
7: -     void EnableFilter(bool is_enable);
7: +     bool GetLidarPowerOnCommStatus(void);
7: + 
7: +   void EnableFilter(bool is_enable);
7: [ldlidar_driver/include/dataprocess/lipkg.h:86:38]: Replace [\n\n    ] with [\n\n  ]
7: -     void EnableFilter(bool is_enable);
7: - 
7: -     LidarStatus GetLidarStatus(void);
7: +     void EnableFilter(bool is_enable);
7: + 
7: +   LidarStatus GetLidarStatus(void);
7: [ldlidar_driver/include/dataprocess/lipkg.h:88:37]: Replace [\n\n    ] with [\n\n  ]
7: -     LidarStatus GetLidarStatus(void);
7: - 
7: -     void ClearDataProcessStatus(void)
7: +     LidarStatus GetLidarStatus(void);
7: + 
7: +   void ClearDataProcessStatus(void)
7: [ldlidar_driver/include/dataprocess/lipkg.h:90:37]: Replace [\n    ] with [\n  ]
7: -     void ClearDataProcessStatus(void)
7: -     {
7: +     void ClearDataProcessStatus(void)
7: +   {
7: [ldlidar_driver/include/dataprocess/lipkg.h:91:5]: Replace [\n      ] with [\n    ]
7: -     {
7: -       is_frame_ready_ = false;
7: +     {
7: +     is_frame_ready_ = false;
7: [ldlidar_driver/include/dataprocess/lipkg.h:92:30]: Replace [\n      ] with [\n    ]
7: -       is_frame_ready_ = false;
7: -       is_poweron_comm_normal_ = false;
7: +       is_frame_ready_ = false;
7: +     is_poweron_comm_normal_ = false;
7: [ldlidar_driver/include/dataprocess/lipkg.h:93:38]: Replace [\n      ] with [\n    ]
7: -       is_poweron_comm_normal_ = false;
7: -       lidarstatus_ = LidarStatus::NORMAL;
7: +       is_poweron_comm_normal_ = false;
7: +     lidarstatus_ = LidarStatus::NORMAL;
7: [ldlidar_driver/include/dataprocess/lipkg.h:94:41]: Replace [\n      ] with [\n    ]
7: -       lidarstatus_ = LidarStatus::NORMAL;
7: -       last_pkg_timestamp_ = 0;
7: +       lidarstatus_ = LidarStatus::NORMAL;
7: +     last_pkg_timestamp_ = 0;
7: [ldlidar_driver/include/dataprocess/lipkg.h:95:30]: Replace [\n      ] with [\n    ]
7: -       last_pkg_timestamp_ = 0;
7: -       first_frame_ = true;
7: +       last_pkg_timestamp_ = 0;
7: +     first_frame_ = true;
7: [ldlidar_driver/include/dataprocess/lipkg.h:96:26]: Replace [\n    ] with [\n  ]
7: -       first_frame_ = true;
7: -     }
7: +       first_frame_ = true;
7: +   }
7: [ldlidar_driver/include/dataprocess/lipkg.h:99:8]: Replace [\n    ] with [\n  ]
7: - private:
7: -     LDType product_type_;
7: + private:
7: +   LDType product_type_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:100:25]: Replace [\n    ] with [\n  ]
7: -     LDType product_type_;
7: -     uint16_t timestamp_;
7: +     LDType product_type_;
7: +   uint16_t timestamp_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:101:24]: Replace [\n    ] with [\n  ]
7: -     uint16_t timestamp_;
7: -     double speed_;
7: +     uint16_t timestamp_;
7: +   double speed_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:102:18]: Replace [\n    ] with [\n  ]
7: -     double speed_;
7: -     bool is_frame_ready_;
7: +     double speed_;
7: +   bool is_frame_ready_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:103:25]: Replace [\n    ] with [\n  ]
7: -     bool is_frame_ready_;
7: -     bool is_poweron_comm_normal_;
7: +     bool is_frame_ready_;
7: +   bool is_poweron_comm_normal_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:104:33]: Replace [\n    ] with [\n  ]
7: -     bool is_poweron_comm_normal_;
7: -     bool is_filter_;
7: +     bool is_poweron_comm_normal_;
7: +   bool is_filter_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:105:20]: Replace [\n    ] with [\n  ]
7: -     bool is_filter_;
7: -     LidarStatus lidarstatus_;
7: +     bool is_filter_;
7: +   LidarStatus lidarstatus_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:106:29]: Replace [\n    ] with [\n  ]
7: -     LidarStatus lidarstatus_;
7: -     int measure_point_frequence_;
7: +     LidarStatus lidarstatus_;
7: +   int measure_point_frequence_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:107:33]: Replace [\n    ] with [\n  ]
7: -     int measure_point_frequence_;
7: -     std::function < uint64_t(void) > get_timestamp_;
7: +     int measure_point_frequence_;
7: +   std::function < uint64_t(void) > get_timestamp_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:108:17]: Replace [ ] with []
7: -     std::function < uint64_t(void) > get_timestamp_;
7: +     std::function< uint64_t(void) > get_timestamp_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:108:19]: Replace [ ] with []
7: -     std::function < uint64_t(void) > get_timestamp_;
7: +     std::function <uint64_t(void) > get_timestamp_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:108:34]: Replace [ ] with []
7: -     std::function < uint64_t(void) > get_timestamp_;
7: +     std::function < uint64_t(void)> get_timestamp_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:108:52]: Replace [\n    ] with [\n  ]
7: -     std::function < uint64_t(void) > get_timestamp_;
7: -     uint64_t last_pkg_timestamp_;
7: +     std::function < uint64_t(void) > get_timestamp_;
7: +   uint64_t last_pkg_timestamp_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:109:33]: Replace [\n    ] with [\n  ]
7: -     uint64_t last_pkg_timestamp_;
7: -     bool first_frame_;
7: +     uint64_t last_pkg_timestamp_;
7: +   bool first_frame_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:110:22]: Replace [\n\n    ] with [\n\n  ]
7: -     bool first_frame_;
7: - 
7: -     LiDARFrameTypeDef pkg_;
7: +     bool first_frame_;
7: + 
7: +   LiDARFrameTypeDef pkg_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:112:27]: Replace [\n    ] with [\n  ]
7: -     LiDARFrameTypeDef pkg_;
7: -     Points2D frame_tmp_;
7: +     LiDARFrameTypeDef pkg_;
7: +   Points2D frame_tmp_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:113:24]: Replace [\n    ] with [\n  ]
7: -     Points2D frame_tmp_;
7: -     Points2D laser_scan_data_;
7: +     Points2D frame_tmp_;
7: +   Points2D laser_scan_data_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:114:30]: Replace [\n    ] with [\n  ]
7: -     Points2D laser_scan_data_;
7: -     std::mutex mutex_lock1_;
7: +     Points2D laser_scan_data_;
7: +   std::mutex mutex_lock1_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:115:28]: Replace [\n    ] with [\n  ]
7: -     std::mutex mutex_lock1_;
7: -     std::mutex mutex_lock2_;
7: +     std::mutex mutex_lock1_;
7: +   std::mutex mutex_lock2_;
7: [ldlidar_driver/include/dataprocess/lipkg.h:116:28]: Replace [\n\n\n    ] with [\n\n  ]
7: -     std::mutex mutex_lock2_;
7: - 
7: - 
7: -     // parse single packet
7: +     std::mutex mutex_lock2_;
7: + 
7: +   // parse single packet
7: [ldlidar_driver/include/dataprocess/lipkg.h:119:26]: Replace [\n    ] with [\n  ]
7: -     // parse single packet
7: -     bool AnalysisOne(uint8_t byte);
7: +     // parse single packet
7: +   bool AnalysisOne(uint8_t byte);
7: [ldlidar_driver/include/dataprocess/lipkg.h:120:35]: Replace [\n    ] with [\n  ]
7: -     bool AnalysisOne(uint8_t byte);
7: -     bool Parse(const uint8_t * data, long len);
7: +     bool AnalysisOne(uint8_t byte);
7: +   bool Parse(const uint8_t * data, long len);
7: [ldlidar_driver/include/dataprocess/lipkg.h:121:47]: Replace [\n    ] with [\n  ]
7: -     bool Parse(const uint8_t * data, long len);
7: -     // combine stantard data into data frames and calibrate
7: +     bool Parse(const uint8_t * data, long len);
7: +   // combine stantard data into data frames and calibrate
7: [ldlidar_driver/include/dataprocess/lipkg.h:122:59]: Replace [\n    ] with [\n  ]
7: -     // combine stantard data into data frames and calibrate
7: -     bool AssemblePacket();
7: +     // combine stantard data into data frames and calibrate
7: +   bool AssemblePacket();
7: [ldlidar_driver/include/dataprocess/lipkg.h:123:26]: Replace [\n    ] with [\n  ]
7: -     bool AssemblePacket();
7: -     void SetFrameReady(void);
7: +     bool AssemblePacket();
7: +   void SetFrameReady(void);
7: [ldlidar_driver/include/dataprocess/lipkg.h:124:29]: Replace [\n    ] with [\n  ]
7: -     void SetFrameReady(void);
7: -     void SetLaserScanData(Points2D & src);
7: +     void SetFrameReady(void);
7: +   void SetLaserScanData(Points2D & src);
7: [ldlidar_driver/include/dataprocess/lipkg.h:125:42]: Replace [\n\n    ] with [\n\n  ]
7: -     void SetLaserScanData(Points2D & src);
7: - 
7: -     // Get lidar data frame ready flag
7: +     void SetLaserScanData(Points2D & src);
7: + 
7: +   // Get lidar data frame ready flag
7: [ldlidar_driver/include/dataprocess/lipkg.h:127:38]: Replace [\n    ] with [\n  ]
7: -     // Get lidar data frame ready flag
7: -     bool IsFrameReady(void);
7: +     // Get lidar data frame ready flag
7: +   bool IsFrameReady(void);
7: [ldlidar_driver/include/dataprocess/lipkg.h:128:28]: Replace [\n    ] with [\n  ]
7: -     bool IsFrameReady(void);
7: -     // Lidar data frame readiness flag reset
7: +     bool IsFrameReady(void);
7: +   // Lidar data frame readiness flag reset
7: [ldlidar_driver/include/dataprocess/lipkg.h:129:44]: Replace [\n    ] with [\n  ]
7: -     // Lidar data frame readiness flag reset
7: -     void ResetFrameReady(void);
7: +     // Lidar data frame readiness flag reset
7: +   void ResetFrameReady(void);
7: [ldlidar_driver/include/dataprocess/lipkg.h:130:31]: Replace [\n  ] with [\n]
7: -     void ResetFrameReady(void);
7: -   };
7: +     void ResetFrameReady(void);
7: + };
7: [ldlidar_driver/include/dataprocess/lipkg.h:133:1]: Replace [ ] with [  ]
7: - } // namespace ldlidar
7: + }  // namespace ldlidar
7: 
7: Code style divergence in file 'ldlidar_driver/include/filter/tofbf.h':
7: 
7: [ldlidar_driver/include/filter/tofbf.h:25:0]: Replace [#include <stdint.h>\n\n#include <vector>\n#include <math.h>\n\n#include <algorithm>\n#include <iostream>\n\n#include "ldlidar_datatype.h"] with [#include <math.h>\n#include <stdint.h>\n\n#include <algorithm>\n#include <iostream>\n#include <vector>\n\n#include "ldlidar_datatype.h"]
7: - #include <stdint.h>
7: - 
7: - #include <vector>
7: - #include <math.h>
7: - 
7: - #include <algorithm>
7: - #include <iostream>
7: - 
7: - #include "ldlidar_datatype.h"
7: + #include <math.h>
7: + #include <stdint.h>
7: + 
7: + #include <algorithm>
7: + #include <iostream>
7: + #include <vector>
7: + 
7: + #include "ldlidar_datatype.h"
7: [ldlidar_driver/include/filter/tofbf.h:35:17]: Replace [ ] with [\n]
7: - namespace ldlidar {
7: + namespace ldlidar
7: + {
7: [ldlidar_driver/include/filter/tofbf.h:35:19]: Replace [\n\n  ] with [\n\n]
7: - namespace ldlidar {
7: - 
7: -   enum class FilterType
7: + namespace ldlidar {
7: + 
7: + enum class FilterType
7: [ldlidar_driver/include/filter/tofbf.h:37:23]: Replace [\n  ] with [ ]
7: -   enum class FilterType
7: -   {
7: +   enum class FilterType {
7: [ldlidar_driver/include/filter/tofbf.h:38:3]: Replace [\n    ] with [ ]
7: -   {
7: -     NO_FILTER,
7: +   { NO_FILTER,
7: [ldlidar_driver/include/filter/tofbf.h:39:14]: Replace [\n    ] with [ ]
7: -     NO_FILTER,
7: -     NEAR_FILTER,
7: +     NO_FILTER, NEAR_FILTER,
7: [ldlidar_driver/include/filter/tofbf.h:40:16]: Replace [\n    ] with [ ]
7: -     NEAR_FILTER,
7: -     NOISE_FILTER
7: +     NEAR_FILTER, NOISE_FILTER
7: [ldlidar_driver/include/filter/tofbf.h:41:16]: Replace [\n  ] with [ ]
7: -     NOISE_FILTER
7: -   };
7: +     NOISE_FILTER };
7: [ldlidar_driver/include/filter/tofbf.h:42:4]: Replace [\n\n  ] with [\n\n]
7: -   };
7: - 
7: -   class Tofbf {
7: +   };
7: + 
7: + class Tofbf {
7: [ldlidar_driver/include/filter/tofbf.h:44:13]: Replace [ ] with [\n]
7: -   class Tofbf {
7: +   class Tofbf
7: + {
7: [ldlidar_driver/include/filter/tofbf.h:45:7]: Replace [\n    ] with [\n  ]
7: - public:
7: -     Tofbf(int speed, LDType type);
7: + public:
7: +   Tofbf(int speed, LDType type);
7: [ldlidar_driver/include/filter/tofbf.h:46:34]: Replace [\n    ] with [\n  ]
7: -     Tofbf(int speed, LDType type);
7: -     ~Tofbf();
7: +     Tofbf(int speed, LDType type);
7: +   ~Tofbf();
7: [ldlidar_driver/include/filter/tofbf.h:47:13]: Replace [\n    ] with [\n  ]
7: -     ~Tofbf();
7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;
7: +     ~Tofbf();
7: +   std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:48:15]: Replace [ ] with []
7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;
7: +     std::vector< PointData > Filter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:48:17]: Replace [ ] with []
7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;
7: +     std::vector <PointData > Filter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:48:27]: Replace [ ] with []
7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData> Filter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:48:54]: Replace [ ] with []
7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > Filter(const std::vector< PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:48:56]: Replace [ ] with []
7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > Filter(const std::vector <PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:48:66]: Replace [ ] with []
7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > Filter(const std::vector < PointData> &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:48:70]: Replace [] with [ ]
7: -     std::vector < PointData > Filter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > Filter(const std::vector < PointData > & tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:50:8]: Replace [\n    ] with [\n  ]
7: - private:
7: -     FilterType filter_type_;
7: + private:
7: +   FilterType filter_type_;
7: [ldlidar_driver/include/filter/tofbf.h:51:28]: Replace [\n    ] with [\n  ]
7: -     FilterType filter_type_;
7: -     // Low intensity threshold
7: +     FilterType filter_type_;
7: +   // Low intensity threshold
7: [ldlidar_driver/include/filter/tofbf.h:52:30]: Replace [\n    ] with [\n  ]
7: -     // Low intensity threshold
7: -     int intensity_low_;
7: +     // Low intensity threshold
7: +   int intensity_low_;
7: [ldlidar_driver/include/filter/tofbf.h:53:23]: Replace [\n    ] with [\n  ]
7: -     int intensity_low_;
7: -     // Discrete points require higher intensity
7: +     int intensity_low_;
7: +   // Discrete points require higher intensity
7: [ldlidar_driver/include/filter/tofbf.h:54:47]: Replace [\n    ] with [\n  ]
7: -     // Discrete points require higher intensity
7: -     int intensity_single_;
7: +     // Discrete points require higher intensity
7: +   int intensity_single_;
7: [ldlidar_driver/include/filter/tofbf.h:55:26]: Replace [\n    ] with [\n  ]
7: -     int intensity_single_;
7: -     // Default scan frequency, to change, read according to radar protocol
7: +     int intensity_single_;
7: +   // Default scan frequency, to change, read according to radar protocol
7: [ldlidar_driver/include/filter/tofbf.h:56:74]: Replace [\n    ] with [\n  ]
7: -     // Default scan frequency, to change, read according to radar protocol
7: -     int scan_frequency_;
7: +     // Default scan frequency, to change, read according to radar protocol
7: +   int scan_frequency_;
7: [ldlidar_driver/include/filter/tofbf.h:57:24]: Replace [\n    ] with [\n  ]
7: -     int scan_frequency_;
7: -     double curr_speed_;
7: +     int scan_frequency_;
7: +   double curr_speed_;
7: [ldlidar_driver/include/filter/tofbf.h:58:23]: Replace [\n    ] with [\n  ]
7: -     double curr_speed_;
7: -     Tofbf() = delete;
7: +     double curr_speed_;
7: +   Tofbf() = delete;
7: [ldlidar_driver/include/filter/tofbf.h:59:21]: Replace [\n    ] with [\n  ]
7: -     Tofbf() = delete;
7: -     Tofbf(const Tofbf &) = delete;
7: +     Tofbf() = delete;
7: +   Tofbf(const Tofbf &) = delete;
7: [ldlidar_driver/include/filter/tofbf.h:60:34]: Replace [\n    ] with [\n  ]
7: -     Tofbf(const Tofbf &) = delete;
7: -     Tofbf & operator = (const Tofbf &) = delete;
7: +     Tofbf(const Tofbf &) = delete;
7: +   Tofbf & operator = (const Tofbf &) = delete;
7: [ldlidar_driver/include/filter/tofbf.h:61:20]: Replace [ ] with []
7: -     Tofbf & operator = (const Tofbf &) = delete;
7: +     Tofbf & operator= (const Tofbf &) = delete;
7: [ldlidar_driver/include/filter/tofbf.h:61:22]: Replace [ ] with []
7: -     Tofbf & operator = (const Tofbf &) = delete;
7: +     Tofbf & operator =(const Tofbf &) = delete;
7: [ldlidar_driver/include/filter/tofbf.h:61:48]: Replace [\n    ] with [\n  ]
7: -     Tofbf & operator = (const Tofbf &) = delete;
7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: +     Tofbf & operator = (const Tofbf &) = delete;
7: +   std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:62:15]: Replace [ ] with []
7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector< PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:62:17]: Replace [ ] with []
7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector <PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:62:27]: Replace [ ] with []
7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData> NearFilter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:62:58]: Replace [ ] with []
7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > NearFilter(const std::vector< PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:62:60]: Replace [ ] with []
7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > NearFilter(const std::vector <PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:62:70]: Replace [ ] with []
7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > NearFilter(const std::vector < PointData> &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:62:74]: Replace [] with [ ]
7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > NearFilter(const std::vector < PointData > & tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:62:85]: Replace [\n    ] with [\n  ]
7: -     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > NearFilter(const std::vector < PointData > &tmp) const;
7: +   std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:63:15]: Replace [ ] with []
7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector< PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:63:17]: Replace [ ] with []
7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector <PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:63:27]: Replace [ ] with []
7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData> NoiseFilter(const std::vector < PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:63:59]: Replace [ ] with []
7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > NoiseFilter(const std::vector< PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:63:61]: Replace [ ] with []
7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > NoiseFilter(const std::vector <PointData > &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:63:71]: Replace [ ] with []
7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > NoiseFilter(const std::vector < PointData> &tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:63:75]: Replace [] with [ ]
7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: +     std::vector < PointData > NoiseFilter(const std::vector < PointData > & tmp) const;
7: [ldlidar_driver/include/filter/tofbf.h:63:86]: Replace [\n  ] with [\n]
7: -     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: -   };
7: +     std::vector < PointData > NoiseFilter(const std::vector < PointData > &tmp) const;
7: + };
7: [ldlidar_driver/include/filter/tofbf.h:66:1]: Replace [ ] with [  ]
7: - } // namespace ldlidar
7: + }  // namespace ldlidar
7: 
7: Code style divergence in file 'ldlidar_driver/include/logger/log_module.h':
7: 
7: [ldlidar_driver/include/logger/log_module.h:18:7]: Replace [  ] with [ ]
7: - #ifndef  __LOGMODULE_H_
7: + #ifndef __LOGMODULE_H_
7: [ldlidar_driver/include/logger/log_module.h:19:7]: Replace [  ] with [ ]
7: - #define  __LOGMODULE_H_
7: + #define __LOGMODULE_H_
7: [ldlidar_driver/include/logger/log_module.h:19:23]: Replace [\n\n\n] with [\n\n]
7: - #define  __LOGMODULE_H_
7: - 
7: - 
7: - #define LINUX
7: + #define  __LOGMODULE_H_
7: + 
7: + #define LINUX
7: [ldlidar_driver/include/logger/log_module.h:32:0]: Replace [#include <stdio.h>\n#include <string>\n#include <chrono>\n#include <stdlib.h>] with [#include <stdio.h>\n#include <stdlib.h>\n\n#include <chrono>\n#include <string>]
7: - #include <stdio.h>
7: - #include <string>
7: - #include <chrono>
7: - #include <stdlib.h>
7: + #include <stdio.h>
7: + #include <stdlib.h>
7: + 
7: + #include <chrono>
7: + #include <string>
7: [ldlidar_driver/include/logger/log_module.h:42:30]: Replace [  ] with [ ]
7: - #define printf_s(fileptr, str)  (fprintf(fileptr, "%s", str))
7: + #define printf_s(fileptr, str) (fprintf(fileptr, "%s", str))
7: [ldlidar_driver/include/logger/log_module.h:44:6]: Replace [ ] with [  ]
7: - #endif // ??????????????????????
7: + #endif  // ??????????????????????
7: [ldlidar_driver/include/logger/log_module.h:44:32]: Replace [\n\n\n] with [\n\n]
7: - #endif // ??????????????????????
7: - 
7: - 
7: - struct LogVersion
7: + #endif // ??????????????????????
7: + 
7: + struct LogVersion
7: [ldlidar_driver/include/logger/log_module.h:51:2]: Replace [\n\n\n] with [\n\n]
7: - };
7: - 
7: - 
7: - class ILogRealization {
7: + };
7: + 
7: + class ILogRealization {
7: [ldlidar_driver/include/logger/log_module.h:54:21]: Replace [ ] with [\n]
7: - class ILogRealization {
7: + class ILogRealization
7: + {
7: [ldlidar_driver/include/logger/log_module.h:56:30]: Replace [\n\n  ] with []
7: -   virtual ~ILogRealization() {
7: - 
7: -   }
7: +   virtual ~ILogRealization() {}
7: [ldlidar_driver/include/logger/log_module.h:69:2]: Replace [\n\n\n] with [\n\n]
7: - };
7: - 
7: - 
7: - #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \
7: + };
7: + 
7: + #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \
7: [ldlidar_driver/include/logger/log_module.h:72:7]: Replace [  ] with [ ]
7: - #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \
7: + #define ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \
7: [ldlidar_driver/include/logger/log_module.h:72:38]: Replace [  ] with [                                                 \\n  ]
7: - #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \
7: + #define  ILOGFREE(LogRealizationClass)                                                 \
7: +   virtual void free(ILogRealization * plogger) \
7: [ldlidar_driver/include/logger/log_module.h:72:84]: Replace [ \\n  ] with [                                        \\n  ]
7: - #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger) \
7: -   { \
7: + #define  ILOGFREE(LogRealizationClass)  virtual void free(ILogRealization * plogger)                                        \
7: +   { \
7: [ldlidar_driver/include/logger/log_module.h:73:3]: Replace [ \\n    ] with [                                                                                   \\n    ]
7: -   { \
7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \
7: +   {                                                                                   \
7: +     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \
7: [ldlidar_driver/include/logger/log_module.h:74:52]: Replace [ ] with []
7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \
7: +     LogRealizationClass * prealization = static_cast< LogRealizationClass * > (plogger); \
7: [ldlidar_driver/include/logger/log_module.h:74:54]: Replace [ ] with []
7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \
7: +     LogRealizationClass * prealization = static_cast <LogRealizationClass * > (plogger); \
7: [ldlidar_driver/include/logger/log_module.h:74:76]: Replace [ ] with []
7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \
7: +     LogRealizationClass * prealization = static_cast < LogRealizationClass *> (plogger); \
7: [ldlidar_driver/include/logger/log_module.h:74:78]: Replace [ ] with []
7: -     LogRealizationClass * prealization = static_cast < LogRealizationClass * > (plogger); \
7: +     LogRealizationClass * prealization = static_cast < LogRealizationClass * >(plogger); \
7: [ldlidar_driver/include/logger/log_module.h:75:31]: Replace [] with [                                                       \\n      ]
7: -     if (prealization != NULL) {delete prealization;} \
7: +     if (prealization != NULL) {                                                       \
7: +       delete prealization;} \
7: [ldlidar_driver/include/logger/log_module.h:75:51]: Replace [] with [                                                            \\n    ]
7: -     if (prealization != NULL) {delete prealization;} \
7: +     if (prealization != NULL) {delete prealization;                                                            \
7: +     } \
7: [ldlidar_driver/include/logger/log_module.h:75:52]: Replace [ \\n  ] with [                                                                                 \\n  ]
7: -     if (prealization != NULL) {delete prealization;} \
7: -   }
7: +     if (prealization != NULL) {delete prealization;}                                                                                 \
7: +   }
7: [ldlidar_driver/include/logger/log_module.h:78:14]: Replace [] with [ ]
7: - class LogPrint: public ILogRealization {
7: + class LogPrint : public ILogRealization {
7: [ldlidar_driver/include/logger/log_module.h:78:38]: Replace [ ] with [\n]
7: - class LogPrint: public ILogRealization {
7: + class LogPrint: public ILogRealization
7: + {
7: [ldlidar_driver/include/logger/log_module.h:86:21]: Replace [] with [ ]
7: - class LogOutputString: public ILogRealization {
7: + class LogOutputString : public ILogRealization {
7: [ldlidar_driver/include/logger/log_module.h:86:45]: Replace [ ] with [\n]
7: - class LogOutputString: public ILogRealization {
7: + class LogOutputString: public ILogRealization
7: + {
7: [ldlidar_driver/include/logger/log_module.h:88:53]: Replace [\n  ] with [ ]
7: -   virtual void Initializion(const char * path = NULL)
7: -   {
7: +   virtual void Initializion(const char * path = NULL) {
7: [ldlidar_driver/include/logger/log_module.h:89:3]: Replace [\n    ] with [ ]
7: -   {
7: -     return;
7: +   { return;
7: [ldlidar_driver/include/logger/log_module.h:90:11]: Replace [\n  ] with [ ]
7: -     return;
7: -   }
7: +     return; }
7: [ldlidar_driver/include/logger/log_module.h:99:27]: Replace [\n] with [\n  ]
7: -   ILOGFREE(LogOutputString)
7: - /*
7: +   ILOGFREE(LogOutputString)
7: +   /*
7: [ldlidar_driver/include/logger/log_module.h:111:6]: Replace [\n\n\n] with [\n\n]
7: - #endif
7: - 
7: - 
7: - class LogModule {
7: + #endif
7: + 
7: + class LogModule {
7: [ldlidar_driver/include/logger/log_module.h:114:15]: Replace [ ] with [\n]
7: - class LogModule {
7: + class LogModule
7: + {
7: [ldlidar_driver/include/logger/log_module.h:116:15]: Replace [\n  ] with [ ]
7: -   enum LogLevel
7: -   {
7: +   enum LogLevel {
7: [ldlidar_driver/include/logger/log_module.h:117:3]: Replace [\n    ] with [ ]
7: -   {
7: -     DEBUG_LEVEL,
7: +   { DEBUG_LEVEL,
7: [ldlidar_driver/include/logger/log_module.h:118:16]: Replace [\n    ] with [ ]
7: -     DEBUG_LEVEL,
7: -     WARNING_LEVEL,
7: +     DEBUG_LEVEL, WARNING_LEVEL,
7: [ldlidar_driver/include/logger/log_module.h:119:18]: Replace [\n    ] with [ ]
7: -     WARNING_LEVEL,
7: -     ERROR_LEVEL,
7: +     WARNING_LEVEL, ERROR_LEVEL,
7: [ldlidar_driver/include/logger/log_module.h:120:16]: Replace [\n    ] with [ ]
7: -     ERROR_LEVEL,
7: -     INFO_LEVEL
7: +     ERROR_LEVEL, INFO_LEVEL
7: [ldlidar_driver/include/logger/log_module.h:121:14]: Replace [\n  ] with [ ]
7: -     INFO_LEVEL
7: -   };
7: +     INFO_LEVEL };
7: [ldlidar_driver/include/logger/log_module.h:136:59]: Replace [\n    ] with [ ]
7: -     __in const char * filename, __in const char * funcname,
7: -     __in int lineno, LogLevel level, ILogRealization * plog = NULL);
7: +     __in const char * filename, __in const char * funcname, __in int lineno, LogLevel level, ILogRealization * plog = NULL);
7: [ldlidar_driver/include/logger/log_module.h:137:36]: Replace [ ] with [\n    ]
7: -     __in int lineno, LogLevel level, ILogRealization * plog = NULL);
7: +     __in int lineno, LogLevel level,
7: +     ILogRealization * plog = NULL);
7: [ldlidar_driver/include/logger/log_module.h:161:41]: Replace [:] with []
7: -     std::chrono::time_point < std::chrono::system_clock, std::chrono::nanoseconds > tp =
7: +     std::chrono::time_point < std::chrono:system_clock, std::chrono::nanoseconds > tp =
7: [ldlidar_driver/include/logger/log_module.h:161:43]: Replace [s] with []
7: -     std::chrono::time_point < std::chrono::system_clock, std::chrono::nanoseconds > tp =
7: +     std::chrono::time_point < std::chrono::ystem_clock, std::chrono::nanoseconds > tp =
7: [ldlidar_driver/include/logger/log_module.h:162:6]: Replace [s] with []
7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());
7: +       td::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());
7: [ldlidar_driver/include/logger/log_module.h:162:48]: Replace [:] with []
7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());
7: +       std::chrono::time_point_cast < std::chrono:nanoseconds > (std::chrono::system_clock::now());
7: [ldlidar_driver/include/logger/log_module.h:162:50]: Replace [n] with []
7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());
7: +       std::chrono::time_point_cast < std::chrono::anoseconds > (std::chrono::system_clock::now());
7: [ldlidar_driver/include/logger/log_module.h:162:75]: Replace [o] with []
7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());
7: +       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chron::system_clock::now());
7: [ldlidar_driver/include/logger/log_module.h:162:77]: Replace [:] with []
7: -       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono::system_clock::now());
7: +       std::chrono::time_point_cast < std::chrono::nanoseconds > (std::chrono:system_clock::now());
7: [ldlidar_driver/include/logger/log_module.h:163:55]: Replace [:] with []
7: -     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_since_epoch());
7: +     auto tmp = std::chrono::duration_cast < std::chrono:nanoseconds > (tp.time_since_epoch());
7: [ldlidar_driver/include/logger/log_module.h:163:57]: Replace [n] with []
7: -     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_since_epoch());
7: +     auto tmp = std::chrono::duration_cast < std::chrono::anoseconds > (tp.time_since_epoch());
7: [ldlidar_driver/include/logger/log_module.h:163:82]: Replace [n] with []
7: -     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_since_epoch());
7: +     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_sice_epoch());
7: [ldlidar_driver/include/logger/log_module.h:163:84]: Replace [e] with []
7: -     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_since_epoch());
7: +     auto tmp = std::chrono::duration_cast < std::chrono::nanoseconds > (tp.time_sinc_epoch());
7: [ldlidar_driver/include/logger/log_module.h:169:27]: Replace [ue] with [ ]
7: -   std::string  GetFormatValue(int n_value);
7: +   std::string  GetFormatVal (int n_value);
7: [ldlidar_driver/include/logger/log_module.h:171:27]: Replace [e(] with [ ]
7: -   std::string  GetLevelValue(int level);
7: +   std::string  GetLevelValu int level);
7: [ldlidar_driver/include/logger/log_module.h:184:7]: Replace [功能支] with [\n]
7: - //// 以下功能支持所处文件、函数、行号信息的打印
7: + //// 以下
7: + 持所处文件、函数、行号信息的打印
7: [ldlidar_driver/include/logger/log_module.h:186:2]: Replace [  ] with [ ]
7: -     __FILE__, __FUNCTION__, __LINE__, \
7: +    __FILE__, __FUNCTION__, __LINE__, \
7: [ldlidar_driver/include/logger/log_module.h:186:27]: Replace [ __] with [ \\n  ]
7: -     __FILE__, __FUNCTION__, __LINE__, \
7: +     __FILE__, __FUNCTION__, \
7: +   LINE__, \
7: [ldlidar_driver/include/logger/log_module.h:187:13]: Replace [ogPrint] with []
7: -     level)->LogPrintInf(format, __VA_ARGS__);
7: +     level)->LInf(format, __VA_ARGS__);
7: [ldlidar_driver/include/logger/log_module.h:188:7]: Replace [ENABLE_] with [ ]
7: - #ifdef ENABLE_LOG_DIS_OUTPUT
7: + #ifdef  LOG_DIS_OUTPUT
7: [ldlidar_driver/include/logger/log_module.h:189:63]: Replace [, ] with [ ]
7: - #define  LD_LOG_DEBUG(format, ...)   LOG(LogModule::DEBUG_LEVEL, format, __VA_ARGS__)
7: + #define  LD_LOG_DEBUG(format, ...)   LOG(LogModule::DEBUG_LEVEL format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:190:4]: Replace [ine] with [ ]
7: - #define  LD_LOG_INFO(format, ...)    LOG(LogModule::INFO_LEVEL, format, __VA_ARGS__)
7: + #def   LD_LOG_INFO(format, ...)    LOG(LogModule::INFO_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:190:63]: Replace [ f] with [ ]
7: - #define  LD_LOG_INFO(format, ...)    LOG(LogModule::INFO_LEVEL, format, __VA_ARGS__)
7: + #define  LD_LOG_INFO(format, ...)    LOG(LogModule::INFO_LEVEL, ormat, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:191:4]: Replace [ine ] with [ ]
7: - #define  LD_LOG_WARN(format, ...)    LOG(LogModule::WARNING_LEVEL, format, __VA_ARGS__)
7: + #def  LD_LOG_WARN(format, ...)    LOG(LogModule::WARNING_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:191:63]: Replace [EL] with [ ]
7: - #define  LD_LOG_WARN(format, ...)    LOG(LogModule::WARNING_LEVEL, format, __VA_ARGS__)
7: + #define  LD_LOG_WARN(format, ...)    LOG(LogModule::WARNING_LEV , format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:192:1]: Replace [defi] with [ ]
7: - #define  LD_LOG_ERROR(format, ...)   LOG(LogModule::ERROR_LEVEL, format, __VA_ARGS__)
7: + # ne  LD_LOG_ERROR(format, ...)   LOG(LogModule::ERROR_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:192:63]: Replace [, ] with [ ]
7: - #define  LD_LOG_ERROR(format, ...)   LOG(LogModule::ERROR_LEVEL, format, __VA_ARGS__)
7: + #define  LD_LOG_ERROR(format, ...)   LOG(LogModule::ERROR_LEVEL format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:193:4]: Replace [e\n#] with [ ]
7: - #else
7: - #define  LD_LOG_DEBUG(format, ...)   do {} while(0)
7: + #els define  LD_LOG_DEBUG(format, ...)   do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:195:11]: Replace [_L] with [ ]
7: - #define  LD_LOG_INFO(format, ...)    do {} while(0)
7: + #define  LD OG_INFO(format, ...)    do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:195:38]: Replace [o {] with [ \\n  ]
7: - #define  LD_LOG_INFO(format, ...)    do {} while(0)
7: + #define  LD_LOG_INFO(format, ...)    d \
7: +   } while(0)
7: [ldlidar_driver/include/logger/log_module.h:195:45]: Replace [] with [                            \\n  ]
7: - #define  LD_LOG_INFO(format, ...)    do {} while(0)
7: + #define  LD_LOG_INFO(format, ...)    do {} wh                            \
7: +   ile(0)
7: [ldlidar_driver/include/logger/log_module.h:196:0]: Replace [] with [ ]
7: - #define  LD_LOG_WARN(format, ...)    do {} while(0)
7: +  #define  LD_LOG_WARN(format, ...)    do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:196:11]: Replace [_L] with [ ]
7: - #define  LD_LOG_WARN(format, ...)    do {} while(0)
7: + #define  LD OG_WARN(format, ...)    do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:196:37]: Replace [do {] with [ \\n  ]
7: - #define  LD_LOG_WARN(format, ...)    do {} while(0)
7: + #define  LD_LOG_WARN(format, ...)     \
7: +   } while(0)
7: [ldlidar_driver/include/logger/log_module.h:196:45]: Replace [] with [                           \\n  ]
7: - #define  LD_LOG_WARN(format, ...)    do {} while(0)
7: + #define  LD_LOG_WARN(format, ...)    do {} wh                           \
7: +   ile(0)
7: [ldlidar_driver/include/logger/log_module.h:197:0]: Replace [] with [ ]
7: - #define  LD_LOG_ERROR(format, ...)   do {} while(0)
7: +  #define  LD_LOG_ERROR(format, ...)   do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:197:11]: Replace [_L] with [ ]
7: - #define  LD_LOG_ERROR(format, ...)   do {} while(0)
7: + #define  LD OG_ERROR(format, ...)   do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:197:37]: Replace [do {] with [ \\n  ]
7: - #define  LD_LOG_ERROR(format, ...)   do {} while(0)
7: + #define  LD_LOG_ERROR(format, ...)    \
7: +   } while(0)
7: [ldlidar_driver/include/logger/log_module.h:197:45]: Replace [] with [                           \\n  ]
7: - #define  LD_LOG_ERROR(format, ...)   do {} while(0)
7: + #define  LD_LOG_ERROR(format, ...)   do {} wh                           \
7: +   ile(0)
7: [ldlidar_driver/include/logger/log_module.h:198:0]: Replace [] with [ ]
7: - #endif
7: +  #endif
7: [ldlidar_driver/include/logger/log_module.h:199:4]: Replace [ 以] with [ ]
7: - //// 以下功能不支持所处文件、函数、行号信息的打印
7: + //// 下功能不支持所处文件、函数、行号信息的打印
7: [ldlidar_driver/include/logger/log_module.h:200:3]: Replace [def] with [ \\n  ]
7: - #ifdef ENABLE_LOG_DIS_OUTPUT
7: + #if \
7: +    ENABLE_LOG_DIS_OUTPUT
7: [ldlidar_driver/include/logger/log_module.h:200:10]: Replace [] with [                            \\n  ]
7: - #ifdef ENABLE_LOG_DIS_OUTPUT
7: + #ifdef ENA                            \
7: +   BLE_LOG_DIS_OUTPUT
7: [ldlidar_driver/include/logger/log_module.h:200:17]: Replace [] with [ ]
7: - #ifdef ENABLE_LOG_DIS_OUTPUT
7: + #ifdef ENABLE_LOG _DIS_OUTPUT
7: [ldlidar_driver/include/logger/log_module.h:202:6]: Replace [rm] with [ ]
7: -     format, __VA_ARGS__);
7: +     fo at, __VA_ARGS__);
7: [ldlidar_driver/include/logger/log_module.h:203:15]: Replace [G_D] with [ \\n  ]
7: - #define  LDS_LOG_DEBUG(format, ...)   LOG_NO_DESCRI(LogModule::DEBUG_LEVEL, format, __VA_ARGS__)
7: + #define  LDS_LO \
7: +   EBUG(format, ...)   LOG_NO_DESCRI(LogModule::DEBUG_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:203:71]: Replace [VEL, fo] with []
7: - #define  LDS_LOG_DEBUG(format, ...)   LOG_NO_DESCRI(LogModule::DEBUG_LEVEL, format, __VA_ARGS__)
7: + #define  LDS_LOG_DEBUG(format, ...)   LOG_NO_DESCRI(LogModule::DEBUG_LErmat, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:204:10]: Replace [DS] with [ ]
7: - #define  LDS_LOG_INFO(format, ...)    LOG_NO_DESCRI(LogModule::INFO_LEVEL, format, __VA_ARGS__)
7: + #define  L _LOG_INFO(format, ...)    LOG_NO_DESCRI(LogModule::INFO_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:204:38]: Replace [LOG] with [ ]
7: - #define  LDS_LOG_INFO(format, ...)    LOG_NO_DESCRI(LogModule::INFO_LEVEL, format, __VA_ARGS__)
7: + #define  LDS_LOG_INFO(format, ...)     _NO_DESCRI(LogModule::INFO_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:205:11]: Replace [S_] with [ ]
7: - #define  LDS_LOG_WARN(format, ...)    LOG_NO_DESCRI(LogModule::WARNING_LEVEL, format, __VA_ARGS__)
7: + #define  LD LOG_WARN(format, ...)    LOG_NO_DESCRI(LogModule::WARNING_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:205:38]: Replace [LOG_] with [ ]
7: - #define  LDS_LOG_WARN(format, ...)    LOG_NO_DESCRI(LogModule::WARNING_LEVEL, format, __VA_ARGS__)
7: + #define  LDS_LOG_WARN(format, ...)     NO_DESCRI(LogModule::WARNING_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:206:8]: Replace [ L] with [ ]
7: - #define  LDS_LOG_ERROR(format, ...)   LOG_NO_DESCRI(LogModule::ERROR_LEVEL, format, __VA_ARGS__)
7: + #define  DS_LOG_ERROR(format, ...)   LOG_NO_DESCRI(LogModule::ERROR_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:206:35]: Replace [   L] with [ ]
7: - #define  LDS_LOG_ERROR(format, ...)   LOG_NO_DESCRI(LogModule::ERROR_LEVEL, format, __VA_ARGS__)
7: + #define  LDS_LOG_ERROR(format, ...) OG_NO_DESCRI(LogModule::ERROR_LEVEL, format, __VA_ARGS__)
7: [ldlidar_driver/include/logger/log_module.h:208:4]: Replace [in] with [ ]
7: - #define  LDS_LOG_DEBUG(format, ...)   do {} while(0)
7: + #def e  LDS_LOG_DEBUG(format, ...)   do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:208:32]: Replace [..)] with [ ]
7: - #define  LDS_LOG_DEBUG(format, ...)   do {} while(0)
7: + #define  LDS_LOG_DEBUG(format, .    do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:210:1]: Replace [de] with [ ]
7: - #define  LDS_LOG_WARN(format, ...)    do {} while(0)
7: + # fine  LDS_LOG_WARN(format, ...)    do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:210:29]: Replace [ ..] with [ \\n  ]
7: - #define  LDS_LOG_WARN(format, ...)    do {} while(0)
7: + #define  LDS_LOG_WARN(format, \
7: +   .)    do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:210:36]: Replace [] with [                             \\n  ]
7: - #define  LDS_LOG_WARN(format, ...)    do {} while(0)
7: + #define  LDS_LOG_WARN(format, ...)                               \
7: +     do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:210:43]: Replace [] with [ ]
7: - #define  LDS_LOG_WARN(format, ...)    do {} while(0)
7: + #define  LDS_LOG_WARN(format, ...)    do {}  while(0)
7: [ldlidar_driver/include/logger/log_module.h:211:1]: Replace [de] with [ ]
7: - #define  LDS_LOG_ERROR(format, ...)   do {} while(0)
7: + # fine  LDS_LOG_ERROR(format, ...)   do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:211:28]: Replace [t, .] with [ \\n  ]
7: - #define  LDS_LOG_ERROR(format, ...)   do {} while(0)
7: + #define  LDS_LOG_ERROR(forma \
7: +   ..)   do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:211:36]: Replace [] with [                            \\n  ]
7: - #define  LDS_LOG_ERROR(format, ...)   do {} while(0)
7: + #define  LDS_LOG_ERROR(format, ...)                             \
7: +     do {} while(0)
7: [ldlidar_driver/include/logger/log_module.h:211:43]: Replace [] with [ ]
7: - #define  LDS_LOG_ERROR(format, ...)   do {} while(0)
7: + #define  LDS_LOG_ERROR(format, ...)   do {}  while(0)
7: [ldlidar_driver/include/logger/log_module.h:212:1]: Replace [en] with [ ]
7: - #endif
7: + # dif
7: [ldlidar_driver/include/logger/log_module.h:214:20]: Replace [GGER] with [ \\n  ]
7: - #endif//__LDLIDAR_LOGGER_H__
7: + #endif//__LDLIDAR_LO \
7: +   _H__
7: [ldlidar_driver/include/logger/log_module.h:214:28]: Replace [] with [                            \\n  ]
7: - #endif//__LDLIDAR_LOGGER_H__
7: + #endif//__LDLIDAR_LOGGER_H__                            \
7: +   
7: [ldlidar_driver/include/logger/log_module.h:215:6]: Replace [] with [ ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/
7: + /***** **************** (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/
7: [ldlidar_driver/include/logger/log_module.h:215:17]: Replace [**] with [ ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/
7: + /**************** *** (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/
7: [ldlidar_driver/include/logger/log_module.h:215:45]: Replace [ LD] with [ \\n  ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/
7: + /********************* (C) COPYRIGHT SHENZHEN \
7: +   ROBOT CO., LTD *******END OF FILE ********/
7: [ldlidar_driver/include/logger/log_module.h:215:52]: Replace [] with [                             \\n  ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/
7: + /********************* (C) COPYRIGHT SHENZHEN LDROBO                             \
7: +   T CO., LTD *******END OF FILE ********/
7: [ldlidar_driver/include/logger/log_module.h:215:59]: Replace [] with [ ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/
7: + /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO.,  LTD *******END OF FILE ********/
7: [ldlidar_driver/include/logger/log_module.h:215:77]: Replace [] with [  ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF FILE ********/
7: + /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF   FILE ********/
7: 
7: Code style divergence in file 'ldlidar_driver/include/networkcom/network_socket_interface_linux.h':
7: 
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:23:0]: Replace [#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#include <sys/select.h>\n#include <sys/time.h>\n#include <unistd.h>\n\n#include <iostream>\n#include <atomic>\n#include <condition_variable>\n#include <functional>\n#include <mutex>\n#include <string>\n#include <thread>\n#include <vector>] with [#include <arpa/inet.h>\n#include <netinet/in.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/select.h>\n#include <sys/socket.h>\n#include <sys/time.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n#include <atomic>\n#include <condition_variable>\n#include <functional>\n#include <iostream>\n#include <mutex>\n#include <string>\n#include <thread>\n#include <vector>]
7: - #include <stdio.h>
7: - #include <stdlib.h>
7: - #include <string.h>
7: - #include <stdint.h>
7: - 
7: - #include <sys/types.h>
7: - #include <sys/socket.h>
7: - #include <netinet/in.h>
7: - #include <arpa/inet.h>
7: - 
7: - #include <sys/select.h>
7: - #include <sys/time.h>
7: - #include <unistd.h>
7: - 
7: - #include <iostream>
7: - #include <atomic>
7: - #include <condition_variable>
7: - #include <functional>
7: - #include <mutex>
7: - #include <string>
7: - #include <thread>
7: - #include <vector>
7: + #include <arpa/inet.h>
7: + #include <netinet/in.h>
7: + #include <stdint.h>
7: + #include <stdio.h>
7: + #include <stdlib.h>
7: + #include <string.h>
7: + #include <sys/select.h>
7: + #include <sys/socket.h>
7: + #include <sys/time.h>
7: + #include <sys/types.h>
7: + #include <unistd.h>
7: + 
7: + #include <atomic>
7: + #include <condition_variable>
7: + #include <functional>
7: + #include <iostream>
7: + #include <mutex>
7: + #include <string>
7: + #include <thread>
7: + #include <vector>
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:46:17]: Replace [ ] with [\n]
7: - namespace ldlidar {
7: + namespace ldlidar
7: + {
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:46:19]: Replace [\n\n  ] with [\n\n]
7: - namespace ldlidar {
7: - 
7: -   typedef enum NetworkCommDevEnum
7: + namespace ldlidar {
7: + 
7: + typedef enum NetworkCommDevEnum
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:48:33]: Replace [\n  ] with [ ]
7: -   typedef enum NetworkCommDevEnum
7: -   {
7: +   typedef enum NetworkCommDevEnum {
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:49:3]: Replace [\n    ] with [\n  ]
7: -   {
7: -     NET_NULL,
7: +   {
7: +   NET_NULL,
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:50:13]: Replace [\n    ] with [\n  ]
7: -     NET_NULL,
7: -     UDP_SERVER,
7: +     NET_NULL,
7: +   UDP_SERVER,
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:51:15]: Replace [\n    ] with [\n  ]
7: -     UDP_SERVER,
7: -     UDP_CLIENT,
7: +     UDP_SERVER,
7: +   UDP_CLIENT,
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:52:15]: Replace [\n    ] with [\n  ]
7: -     UDP_CLIENT,
7: -     TCP_SERVER,
7: +     UDP_CLIENT,
7: +   TCP_SERVER,
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:53:15]: Replace [\n    ] with [\n  ]
7: -     TCP_SERVER,
7: -     TCP_CLIENT
7: +     TCP_SERVER,
7: +   TCP_CLIENT
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:54:14]: Replace [\n  ] with [\n]
7: -     TCP_CLIENT
7: -   } NetCommDevTypeDef;
7: +     TCP_CLIENT
7: + } NetCommDevTypeDef;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:55:22]: Replace [\n\n  ] with [\n\n]
7: -   } NetCommDevTypeDef;
7: - 
7: -   class UDPSocketInterfaceLinux {
7: +   } NetCommDevTypeDef;
7: + 
7: + class UDPSocketInterfaceLinux {
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:57:31]: Replace [ ] with [\n]
7: -   class UDPSocketInterfaceLinux {
7: +   class UDPSocketInterfaceLinux
7: + {
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:58:7]: Replace [\n    ] with [\n  ]
7: - public:
7: -     UDPSocketInterfaceLinux();
7: + public:
7: +   UDPSocketInterfaceLinux();
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:59:30]: Replace [\n\n    ] with [\n\n  ]
7: -     UDPSocketInterfaceLinux();
7: - 
7: -     ~UDPSocketInterfaceLinux();
7: +     UDPSocketInterfaceLinux();
7: + 
7: +   ~UDPSocketInterfaceLinux();
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:61:31]: Replace [\n\n    ] with [\n\n  ]
7: -     ~UDPSocketInterfaceLinux();
7: - 
7: -     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);
7: +     ~UDPSocketInterfaceLinux();
7: + 
7: +   bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:63:81]: Replace [\n\n    ] with [\n\n  ]
7: -     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);
7: - 
7: -     bool CloseSocket();
7: +     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);
7: + 
7: +   bool CloseSocket();
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:65:23]: Replace [\n\n    ] with [\n\n  ]
7: -     bool CloseSocket();
7: - 
7: -     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);
7: +     bool CloseSocket();
7: + 
7: +   bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:67:79]: Replace [\n\n    ] with [\n\n  ]
7: -     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);
7: - 
7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: +     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);
7: + 
7: +   void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:69:38]: Replace [ ] with []
7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: +     void SetRecvCallback(std::function< void(const char *, size_t length) > callback);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:69:40]: Replace [ ] with []
7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: +     void SetRecvCallback(std::function <void(const char *, size_t length) > callback);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:69:74]: Replace [ ] with []
7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: +     void SetRecvCallback(std::function < void(const char *, size_t length)> callback);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:69:87]: Replace [\n\n    ] with [\n\n  ]
7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: - 
7: -     bool IsClientAck() {return is_server_recv_ack_flag_.load();}
7: +     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: + 
7: +   bool IsClientAck() {return is_server_recv_ack_flag_.load();}
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:71:24]: Replace [] with [ ]
7: -     bool IsClientAck() {return is_server_recv_ack_flag_.load();}
7: +     bool IsClientAck() { return is_server_recv_ack_flag_.load();}
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:71:63]: Replace [] with [ ]
7: -     bool IsClientAck() {return is_server_recv_ack_flag_.load();}
7: +     bool IsClientAck() {return is_server_recv_ack_flag_.load(); }
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:73:8]: Replace [\n    ] with [\n  ]
7: - private:
7: -     std::thread * recv_thread_;
7: + private:
7: +   std::thread * recv_thread_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:74:31]: Replace [\n    ] with [\n  ]
7: -     std::thread * recv_thread_;
7: -     long long recv_count_;
7: +     std::thread * recv_thread_;
7: +   long long recv_count_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:75:26]: Replace [\n    ] with [\n  ]
7: -     long long recv_count_;
7: -     int32_t com_sockfd_;
7: +     long long recv_count_;
7: +   int32_t com_sockfd_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:76:24]: Replace [\n    ] with [\n  ]
7: -     int32_t com_sockfd_;
7: -     NetCommDevTypeDef ncd_;
7: +     int32_t com_sockfd_;
7: +   NetCommDevTypeDef ncd_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:77:27]: Replace [\n    ] with [\n  ]
7: -     NetCommDevTypeDef ncd_;
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: +     NetCommDevTypeDef ncd_;
7: +   std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:78:15]: Replace [ ] with []
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: +     std::atomic< bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:78:17]: Replace [ ] with []
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: +     std::atomic <bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:78:22]: Replace [ ] with []
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: +     std::atomic < bool> is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:78:91]: Replace [\n    ] with [\n  ]
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: +     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_, is_server_recv_ack_flag_;
7: +   std::function < void(const char *, size_t length) > recv_callback_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:79:17]: Replace [ ] with []
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: +     std::function< void(const char *, size_t length) > recv_callback_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:79:19]: Replace [ ] with []
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: +     std::function <void(const char *, size_t length) > recv_callback_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:79:53]: Replace [ ] with []
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: +     std::function < void(const char *, size_t length)> recv_callback_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:79:71]: Replace [\n    ] with [\n  ]
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: -     std::string server_ip_, server_port_;
7: +     std::function < void(const char *, size_t length) > recv_callback_;
7: +   std::string server_ip_, server_port_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:80:41]: Replace [\n    ] with [\n  ]
7: -     std::string server_ip_, server_port_;
7: -     std::string client_ip_, client_port_;
7: +     std::string server_ip_, server_port_;
7: +   std::string client_ip_, client_port_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:81:41]: Replace [\n\n    ] with [\n\n  ]
7: -     std::string client_ip_, client_port_;
7: - 
7: -     bool IsCreated() {return is_cmd_created_.load();}
7: +     std::string client_ip_, client_port_;
7: + 
7: +   bool IsCreated() {return is_cmd_created_.load();}
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:83:22]: Replace [] with [ ]
7: -     bool IsCreated() {return is_cmd_created_.load();}
7: +     bool IsCreated() { return is_cmd_created_.load();}
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:83:52]: Replace [] with [ ]
7: -     bool IsCreated() {return is_cmd_created_.load();}
7: +     bool IsCreated() {return is_cmd_created_.load(); }
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:83:53]: Replace [\n\n    ] with [\n\n  ]
7: -     bool IsCreated() {return is_cmd_created_.load();}
7: - 
7: -     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);
7: +     bool IsCreated() {return is_cmd_created_.load();}
7: + 
7: +   bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:85:80]: Replace [\n\n    ] with [\n\n  ]
7: -     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);
7: - 
7: -     static void RecvThreadProc(void * param);
7: +     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);
7: + 
7: +   static void RecvThreadProc(void * param);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:87:45]: Replace [\n  ] with [\n]
7: -     static void RecvThreadProc(void * param);
7: -   };
7: +     static void RecvThreadProc(void * param);
7: + };
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:88:4]: Replace [\n\n\n  ] with [\n\n]
7: -   };
7: - 
7: - 
7: -   class TCPSocketInterfaceLinux {
7: +   };
7: + 
7: + class TCPSocketInterfaceLinux {
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:91:31]: Replace [ ] with [\n]
7: -   class TCPSocketInterfaceLinux {
7: +   class TCPSocketInterfaceLinux
7: + {
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:92:7]: Replace [\n    ] with [\n  ]
7: - public:
7: -     TCPSocketInterfaceLinux();
7: + public:
7: +   TCPSocketInterfaceLinux();
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:93:30]: Replace [\n\n    ] with [\n\n  ]
7: -     TCPSocketInterfaceLinux();
7: - 
7: -     ~TCPSocketInterfaceLinux();
7: +     TCPSocketInterfaceLinux();
7: + 
7: +   ~TCPSocketInterfaceLinux();
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:95:31]: Replace [\n\n    ] with [\n\n  ]
7: -     ~TCPSocketInterfaceLinux();
7: - 
7: -     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);
7: +     ~TCPSocketInterfaceLinux();
7: + 
7: +   bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:97:81]: Replace [\n\n    ] with [\n\n  ]
7: -     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);
7: - 
7: -     bool CloseSocket();
7: +     bool CreateSocket(NetCommDevTypeDef obj, const char * ip, const char * port);
7: + 
7: +   bool CloseSocket();
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:99:23]: Replace [\n\n    ] with [\n\n  ]
7: -     bool CloseSocket();
7: - 
7: -     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);
7: +     bool CloseSocket();
7: + 
7: +   bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:101:79]: Replace [\n\n    ] with [\n\n  ]
7: -     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);
7: - 
7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: +     bool TransToNet(uint8_t * tx_buf, uint32_t tx_buff_len, uint32_t * tx_len);
7: + 
7: +   void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:103:38]: Replace [ ] with []
7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: +     void SetRecvCallback(std::function< void(const char *, size_t length) > callback);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:103:40]: Replace [ ] with []
7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: +     void SetRecvCallback(std::function <void(const char *, size_t length) > callback);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:103:74]: Replace [ ] with []
7: -     void SetRecvCallback(std::function < void(const char *, size_t length) > callback);
7: +     void SetRecvCallback(std::function < void(const char *, size_t length)> callback);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:105:8]: Replace [\n    ] with [\n  ]
7: - private:
7: -     std::thread * recv_thread_;
7: + private:
7: +   std::thread * recv_thread_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:106:31]: Replace [\n    ] with [\n  ]
7: -     std::thread * recv_thread_;
7: -     long long recv_count_;
7: +     std::thread * recv_thread_;
7: +   long long recv_count_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:107:26]: Replace [\n    ] with [\n  ]
7: -     long long recv_count_;
7: -     int32_t com_sockfd_;
7: +     long long recv_count_;
7: +   int32_t com_sockfd_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:108:24]: Replace [\n    ] with [\n  ]
7: -     int32_t com_sockfd_;
7: -     int32_t listend_client_sockfd_; //// server model used
7: +     int32_t com_sockfd_;
7: +   int32_t listend_client_sockfd_; //// server model used
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:109:35]: Replace [ ] with [  ]
7: -     int32_t listend_client_sockfd_; //// server model used
7: +     int32_t listend_client_sockfd_;  //// server model used
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:109:58]: Replace [\n    ] with [\n  ]
7: -     int32_t listend_client_sockfd_; //// server model used
7: -     NetCommDevTypeDef ncd_;
7: +     int32_t listend_client_sockfd_; //// server model used
7: +   NetCommDevTypeDef ncd_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:110:27]: Replace [\n    ] with [\n  ]
7: -     NetCommDevTypeDef ncd_;
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;
7: +     NetCommDevTypeDef ncd_;
7: +   std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:111:15]: Replace [ ] with []
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;
7: +     std::atomic< bool > is_cmd_created_, recv_thread_exit_flag_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:111:17]: Replace [ ] with []
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;
7: +     std::atomic <bool > is_cmd_created_, recv_thread_exit_flag_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:111:22]: Replace [ ] with []
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;
7: +     std::atomic < bool> is_cmd_created_, recv_thread_exit_flag_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:111:65]: Replace [\n    ] with [\n  ]
7: -     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: +     std::atomic < bool > is_cmd_created_, recv_thread_exit_flag_;
7: +   std::function < void(const char *, size_t length) > recv_callback_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:112:17]: Replace [ ] with []
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: +     std::function< void(const char *, size_t length) > recv_callback_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:112:19]: Replace [ ] with []
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: +     std::function <void(const char *, size_t length) > recv_callback_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:112:53]: Replace [ ] with []
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: +     std::function < void(const char *, size_t length)> recv_callback_;
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:112:71]: Replace [\n\n    ] with [\n\n  ]
7: -     std::function < void(const char *, size_t length) > recv_callback_;
7: - 
7: -     bool IsCreated() {return is_cmd_created_.load();}
7: +     std::function < void(const char *, size_t length) > recv_callback_;
7: + 
7: +   bool IsCreated() {return is_cmd_created_.load();}
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:114:22]: Replace [] with [ ]
7: -     bool IsCreated() {return is_cmd_created_.load();}
7: +     bool IsCreated() { return is_cmd_created_.load();}
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:114:52]: Replace [] with [ ]
7: -     bool IsCreated() {return is_cmd_created_.load();}
7: +     bool IsCreated() {return is_cmd_created_.load(); }
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:114:53]: Replace [\n\n    ] with [\n\n  ]
7: -     bool IsCreated() {return is_cmd_created_.load();}
7: - 
7: -     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);
7: +     bool IsCreated() {return is_cmd_created_.load();}
7: + 
7: +   bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:116:80]: Replace [\n\n    ] with [\n\n  ]
7: -     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);
7: - 
7: -     static void RecvThreadProc(void * param);
7: +     bool RecvFromNet(uint8_t * rx_buf, uint32_t rx_buff_len, uint32_t * rx_len);
7: + 
7: +   static void RecvThreadProc(void * param);
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:118:45]: Replace [\n  ] with [\n]
7: -     static void RecvThreadProc(void * param);
7: -   };
7: +     static void RecvThreadProc(void * param);
7: + };
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:121:1]: Replace [ ] with [  ]
7: - } // namespace ldlidar
7: + }  // namespace ldlidar
7: [ldlidar_driver/include/networkcom/network_socket_interface_linux.h:122:6]: Replace [ ] with [  ]
7: - #endif //  __SOCKET_INTERFACE_LINUX_H__
7: + #endif  //  __SOCKET_INTERFACE_LINUX_H__
7: 
7: Code style divergence in file 'ldlidar_driver/include/serialcom/serial_interface_linux.h':
7: 
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:23:0]: Replace [#include <inttypes.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <memory.h>\n#include <string.h>\n#include <sys/file.h>\n#include <sys/ioctl.h>] with [#include <errno.h>\n#include <fcntl.h>\n#include <inttypes.h>\n#include <memory.h>\n#include <string.h>\n#include <sys/file.h>\n#include <sys/ioctl.h>]
7: - #include <inttypes.h>
7: - #include <errno.h>
7: - #include <fcntl.h>
7: - #include <memory.h>
7: - #include <string.h>
7: - #include <sys/file.h>
7: - #include <sys/ioctl.h>
7: + #include <errno.h>
7: + #include <fcntl.h>
7: + #include <inttypes.h>
7: + #include <memory.h>
7: + #include <string.h>
7: + #include <sys/file.h>
7: + #include <sys/ioctl.h>
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:30:20]: Replace [ ] with [\n]
7: - namespace asmtermios {
7: + namespace asmtermios
7: + {
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:33:0]: Replace [#include <termios.h>\n#include <unistd.h>\n\n#include <iostream>\n#include <atomic>\n#include <condition_variable>\n#include <functional>\n#include <mutex>\n#include <string>\n#include <thread>\n#include <vector>] with [#include <termios.h>\n#include <unistd.h>\n\n#include <atomic>\n#include <condition_variable>\n#include <functional>\n#include <iostream>\n#include <mutex>\n#include <string>\n#include <thread>\n#include <vector>]
7: - #include <termios.h>
7: - #include <unistd.h>
7: - 
7: - #include <iostream>
7: - #include <atomic>
7: - #include <condition_variable>
7: - #include <functional>
7: - #include <mutex>
7: - #include <string>
7: - #include <thread>
7: - #include <vector>
7: + #include <termios.h>
7: + #include <unistd.h>
7: + 
7: + #include <atomic>
7: + #include <condition_variable>
7: + #include <functional>
7: + #include <iostream>
7: + #include <mutex>
7: + #include <string>
7: + #include <thread>
7: + #include <vector>
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:45:17]: Replace [ ] with [\n]
7: - namespace ldlidar {
7: + namespace ldlidar
7: + {
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:45:19]: Replace [\n\n  ] with [\n\n]
7: - namespace ldlidar {
7: - 
7: -   class SerialInterfaceLinux {
7: + namespace ldlidar {
7: + 
7: + class SerialInterfaceLinux {
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:47:28]: Replace [ ] with [\n]
7: -   class SerialInterfaceLinux {
7: +   class SerialInterfaceLinux
7: + {
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:48:7]: Replace [\n    ] with [\n  ]
7: - public:
7: -     SerialInterfaceLinux();
7: + public:
7: +   SerialInterfaceLinux();
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:49:27]: Replace [\n    ] with [\n  ]
7: -     SerialInterfaceLinux();
7: -     ~SerialInterfaceLinux();
7: +     SerialInterfaceLinux();
7: +   ~SerialInterfaceLinux();
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:50:28]: Replace [\n    ] with [\n  ]
7: -     ~SerialInterfaceLinux();
7: -     // open serial port
7: +     ~SerialInterfaceLinux();
7: +   // open serial port
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:51:23]: Replace [\n    ] with [\n  ]
7: -     // open serial port
7: -     bool Open(std::string & port_name, uint32_t com_baudrate);
7: +     // open serial port
7: +   bool Open(std::string & port_name, uint32_t com_baudrate);
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:52:62]: Replace [\n    ] with [\n  ]
7: -     bool Open(std::string & port_name, uint32_t com_baudrate);
7: -     // close serial port
7: +     bool Open(std::string & port_name, uint32_t com_baudrate);
7: +   // close serial port
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:53:24]: Replace [\n    ] with [\n  ]
7: -     // close serial port
7: -     bool Close();
7: +     // close serial port
7: +   bool Close();
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:54:17]: Replace [\n    ] with [\n  ]
7: -     bool Close();
7: -     // receive from port channel data
7: +     bool Close();
7: +   // receive from port channel data
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:55:37]: Replace [\n    ] with [\n  ]
7: -     // receive from port channel data
7: -     bool ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len);
7: +     // receive from port channel data
7: +   bool ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len);
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:56:78]: Replace [\n    ] with [\n  ]
7: -     bool ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len);
7: -     // transmit data to port channel
7: +     bool ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len);
7: +   // transmit data to port channel
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:57:36]: Replace [\n    ] with [\n  ]
7: -     // transmit data to port channel
7: -     bool WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len);
7: +     // transmit data to port channel
7: +   bool WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len);
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:58:83]: Replace [\n    ] with [\n  ]
7: -     bool WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len);
7: -     // set receive port channel data callback deal with fuction
7: +     bool WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len);
7: +   // set receive port channel data callback deal with fuction
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:59:63]: Replace [\n    ] with [\n  ]
7: -     // set receive port channel data callback deal with fuction
7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)
7: +     // set receive port channel data callback deal with fuction
7: +   void SetReadCallback(std::function < void(const char *, size_t length) > callback)
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:60:38]: Replace [ ] with []
7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)
7: +     void SetReadCallback(std::function< void(const char *, size_t length) > callback)
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:60:40]: Replace [ ] with []
7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)
7: +     void SetReadCallback(std::function <void(const char *, size_t length) > callback)
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:60:74]: Replace [ ] with []
7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)
7: +     void SetReadCallback(std::function < void(const char *, size_t length)> callback)
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:60:86]: Replace [\n    ] with [\n  ]
7: -     void SetReadCallback(std::function < void(const char *, size_t length) > callback)
7: -     {
7: +     void SetReadCallback(std::function < void(const char *, size_t length) > callback)
7: +   {
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:61:5]: Replace [\n      ] with [\n    ]
7: -     {
7: -       read_callback_ = callback;
7: +     {
7: +     read_callback_ = callback;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:62:32]: Replace [\n    ] with [\n  ]
7: -       read_callback_ = callback;
7: -     }
7: +       read_callback_ = callback;
7: +   }
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:63:5]: Replace [\n    ] with [\n  ]
7: -     }
7: -     // whether open
7: +     }
7: +   // whether open
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:64:19]: Replace [\n    ] with [\n  ]
7: -     // whether open
7: -     bool IsOpened() {return is_cmd_opened_.load();}
7: +     // whether open
7: +   bool IsOpened() {return is_cmd_opened_.load();}
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:65:21]: Replace [] with [ ]
7: -     bool IsOpened() {return is_cmd_opened_.load();}
7: +     bool IsOpened() { return is_cmd_opened_.load();}
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:65:50]: Replace [] with [ ]
7: -     bool IsOpened() {return is_cmd_opened_.load();}
7: +     bool IsOpened() {return is_cmd_opened_.load(); }
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:67:8]: Replace [\n    ] with [\n  ]
7: - private:
7: -     std::thread * rx_thread_;
7: + private:
7: +   std::thread * rx_thread_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:68:29]: Replace [\n    ] with [\n  ]
7: -     std::thread * rx_thread_;
7: -     long long rx_count_;
7: +     std::thread * rx_thread_;
7: +   long long rx_count_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:69:24]: Replace [\n    ] with [\n  ]
7: -     long long rx_count_;
7: -     int32_t com_handle_;
7: +     long long rx_count_;
7: +   int32_t com_handle_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:70:24]: Replace [\n    ] with [\n  ]
7: -     int32_t com_handle_;
7: -     uint32_t com_baudrate_;
7: +     int32_t com_handle_;
7: +   uint32_t com_baudrate_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:71:27]: Replace [\n    ] with [\n  ]
7: -     uint32_t com_baudrate_;
7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;
7: +     uint32_t com_baudrate_;
7: +   std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:72:15]: Replace [ ] with []
7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;
7: +     std::atomic< bool > is_cmd_opened_, rx_thread_exit_flag_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:72:17]: Replace [ ] with []
7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;
7: +     std::atomic <bool > is_cmd_opened_, rx_thread_exit_flag_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:72:22]: Replace [ ] with []
7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;
7: +     std::atomic < bool> is_cmd_opened_, rx_thread_exit_flag_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:72:62]: Replace [\n    ] with [\n  ]
7: -     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;
7: -     std::function < void(const char *, size_t length) > read_callback_;
7: +     std::atomic < bool > is_cmd_opened_, rx_thread_exit_flag_;
7: +   std::function < void(const char *, size_t length) > read_callback_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:73:17]: Replace [ ] with []
7: -     std::function < void(const char *, size_t length) > read_callback_;
7: +     std::function< void(const char *, size_t length) > read_callback_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:73:19]: Replace [ ] with []
7: -     std::function < void(const char *, size_t length) > read_callback_;
7: +     std::function <void(const char *, size_t length) > read_callback_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:73:53]: Replace [ ] with []
7: -     std::function < void(const char *, size_t length) > read_callback_;
7: +     std::function < void(const char *, size_t length)> read_callback_;
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:73:71]: Replace [\n    ] with [\n  ]
7: -     std::function < void(const char *, size_t length) > read_callback_;
7: -     static void RxThreadProc(void * param);
7: +     std::function < void(const char *, size_t length) > read_callback_;
7: +   static void RxThreadProc(void * param);
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:74:43]: Replace [\n  ] with [\n]
7: -     static void RxThreadProc(void * param);
7: -   };
7: +     static void RxThreadProc(void * param);
7: + };
7: [ldlidar_driver/include/serialcom/serial_interface_linux.h:77:1]: Replace [ ] with [  ]
7: - } // namespace ldlidar
7: + }  // namespace ldlidar
7: 
7: Code style divergence in file 'ldlidar_driver/src/core/ldlidar_driver.cpp':
7: 
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:59:57]: Replace [\n] with [ ]
7: - std::string LDLidarDriver::GetLidarSdkVersionNumber(void)
7: - {
7: + std::string LDLidarDriver::GetLidarSdkVersionNumber(void) {
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:60:1]: Replace [\n  ] with [ ]
7: - {
7: -   return sdk_version_number_;
7: + { return sdk_version_number_;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:61:29]: Replace [\n] with [ ]
7: -   return sdk_version_number_;
7: - }
7: +   return sdk_version_number_; }
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:65:22]: Replace [\n  ] with [ ]
7: -   LDType product_name,
7: -   std::string serial_port_name,
7: +   LDType product_name, std::string serial_port_name,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:66:31]: Replace [\n  ] with [ ]
7: -   std::string serial_port_name,
7: -   uint32_t serial_baudrate,
7: +   std::string serial_port_name, uint32_t serial_baudrate,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:95:16]: Replace [\n        ] with []
7: -       std::bind(
7: -         &LiPkg::CommReadCallback, comm_pkg_,
7: +       std::bind(&LiPkg::CommReadCallback, comm_pkg_,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:96:44]: Replace [\n        ] with [ ]
7: -         &LiPkg::CommReadCallback, comm_pkg_,
7: -         std::placeholders::_1, std::placeholders::_2));
7: +         &LiPkg::CommReadCallback, comm_pkg_, std::placeholders::_1, std::placeholders::_2));
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:115:22]: Replace [\n  ] with [ ]
7: -   LDType product_name,
7: -   const char * server_ip,
7: +   LDType product_name, const char * server_ip,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:116:25]: Replace [\n  ] with [ ]
7: -   const char * server_ip,
7: -   const char * server_port,
7: +   const char * server_ip, const char * server_port,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:119:1]: Replace [\n\n  ] with [\n  ]
7: - {
7: - 
7: -   if (is_start_flag_) {
7: + {
7: +   if (is_start_flag_) {
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:150:32]: Replace [\n        ] with [\n      ]
7: -     case COMM_TCP_CLIENT_MODE: {
7: -         comm_tcp_network_->SetRecvCallback(
7: +     case COMM_TCP_CLIENT_MODE: {
7: +       comm_tcp_network_->SetRecvCallback(
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:151:43]: Replace [\n          ] with []
7: -         comm_tcp_network_->SetRecvCallback(
7: -           std::bind(
7: +         comm_tcp_network_->SetRecvCallback(std::bind(
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:152:20]: Replace [\n            ] with [\n        ]
7: -           std::bind(
7: -             &LiPkg::CommReadCallback, comm_pkg_,
7: +           std::bind(
7: +         &LiPkg::CommReadCallback, comm_pkg_,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:153:48]: Replace [\n            ] with [ ]
7: -             &LiPkg::CommReadCallback, comm_pkg_,
7: -             std::placeholders::_1, std::placeholders::_2));
7: +             &LiPkg::CommReadCallback, comm_pkg_, std::placeholders::_1, std::placeholders::_2));
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:154:59]: Replace [\n        ] with [\n      ]
7: -             std::placeholders::_1, std::placeholders::_2));
7: -         bool result = comm_tcp_network_->CreateSocket(TCP_CLIENT, server_ip, server_port);
7: +             std::placeholders::_1, std::placeholders::_2));
7: +       bool result = comm_tcp_network_->CreateSocket(TCP_CLIENT, server_ip, server_port);
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:155:90]: Replace [\n        ] with [\n      ]
7: -         bool result = comm_tcp_network_->CreateSocket(TCP_CLIENT, server_ip, server_port);
7: -         if (!result) {
7: +         bool result = comm_tcp_network_->CreateSocket(TCP_CLIENT, server_ip, server_port);
7: +       if (!result) {
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:156:22]: Replace [\n          ] with [\n        ]
7: -         if (!result) {
7: -           LD_LOG_ERROR("client host: create socket is fail.", "");
7: +         if (!result) {
7: +         LD_LOG_ERROR("client host: create socket is fail.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:157:66]: Replace [\n          ] with [\n        ]
7: -           LD_LOG_ERROR("client host: create socket is fail.", "");
7: -           return false;
7: +           LD_LOG_ERROR("client host: create socket is fail.", "");
7: +         return false;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:158:23]: Replace [\n        ] with [\n      ]
7: -           return false;
7: -         }
7: +           return false;
7: +       }
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:159:9]: Replace [\n        ] with [\n      ]
7: -         }
7: -         LDS_LOG_INFO("client host: create socket is ok.", "");
7: +         }
7: +       LDS_LOG_INFO("client host: create socket is ok.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:160:62]: Replace [\n      ] with [\n    ]
7: -         LDS_LOG_INFO("client host: create socket is ok.", "");
7: -       }
7: +         LDS_LOG_INFO("client host: create socket is ok.", "");
7: +     }
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:161:7]: Replace [\n      ] with [ ]
7: -       }
7: -       break;
7: +       } break;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:163:32]: Replace [\n        ] with [\n      ]
7: -     case COMM_TCP_SERVER_MODE: {
7: -         comm_tcp_network_->SetRecvCallback(
7: +     case COMM_TCP_SERVER_MODE: {
7: +       comm_tcp_network_->SetRecvCallback(
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:164:43]: Replace [\n          ] with []
7: -         comm_tcp_network_->SetRecvCallback(
7: -           std::bind(
7: +         comm_tcp_network_->SetRecvCallback(std::bind(
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:165:20]: Replace [\n            ] with [\n        ]
7: -           std::bind(
7: -             &LiPkg::CommReadCallback, comm_pkg_,
7: +           std::bind(
7: +         &LiPkg::CommReadCallback, comm_pkg_,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:166:48]: Replace [\n            ] with [ ]
7: -             &LiPkg::CommReadCallback, comm_pkg_,
7: -             std::placeholders::_1, std::placeholders::_2));
7: +             &LiPkg::CommReadCallback, comm_pkg_, std::placeholders::_1, std::placeholders::_2));
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:167:59]: Replace [\n        ] with [\n      ]
7: -             std::placeholders::_1, std::placeholders::_2));
7: -         bool result = comm_tcp_network_->CreateSocket(TCP_SERVER, server_ip, server_port);
7: +             std::placeholders::_1, std::placeholders::_2));
7: +       bool result = comm_tcp_network_->CreateSocket(TCP_SERVER, server_ip, server_port);
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:168:90]: Replace [\n        ] with [\n      ]
7: -         bool result = comm_tcp_network_->CreateSocket(TCP_SERVER, server_ip, server_port);
7: -         if (!result) {
7: +         bool result = comm_tcp_network_->CreateSocket(TCP_SERVER, server_ip, server_port);
7: +       if (!result) {
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:169:22]: Replace [\n          ] with [\n        ]
7: -         if (!result) {
7: -           LD_LOG_ERROR("server host: create socket is fail.", "");
7: +         if (!result) {
7: +         LD_LOG_ERROR("server host: create socket is fail.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:170:66]: Replace [\n          ] with [\n        ]
7: -           LD_LOG_ERROR("server host: create socket is fail.", "");
7: -           return false;
7: +           LD_LOG_ERROR("server host: create socket is fail.", "");
7: +         return false;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:171:23]: Replace [\n        ] with [\n      ]
7: -           return false;
7: -         }
7: +           return false;
7: +       }
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:172:9]: Replace [\n        ] with [\n      ]
7: -         }
7: -         LDS_LOG_INFO("server host: create socket is ok.", "");
7: +         }
7: +       LDS_LOG_INFO("server host: create socket is ok.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:173:62]: Replace [\n      ] with [\n    ]
7: -         LDS_LOG_INFO("server host: create socket is ok.", "");
7: -       }
7: +         LDS_LOG_INFO("server host: create socket is ok.", "");
7: +     }
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:174:7]: Replace [\n      ] with [ ]
7: -       }
7: -       break;
7: +       } break;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:176:32]: Replace [\n        ] with [\n      ]
7: -     case COMM_UDP_CLIENT_MODE: {
7: -         comm_udp_network_->SetRecvCallback(
7: +     case COMM_UDP_CLIENT_MODE: {
7: +       comm_udp_network_->SetRecvCallback(
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:177:43]: Replace [\n          ] with []
7: -         comm_udp_network_->SetRecvCallback(
7: -           std::bind(
7: +         comm_udp_network_->SetRecvCallback(std::bind(
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:178:20]: Replace [\n            ] with [\n        ]
7: -           std::bind(
7: -             &LiPkg::CommReadCallback, comm_pkg_,
7: +           std::bind(
7: +         &LiPkg::CommReadCallback, comm_pkg_,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:179:48]: Replace [\n            ] with [ ]
7: -             &LiPkg::CommReadCallback, comm_pkg_,
7: -             std::placeholders::_1, std::placeholders::_2));
7: +             &LiPkg::CommReadCallback, comm_pkg_, std::placeholders::_1, std::placeholders::_2));
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:180:59]: Replace [\n        ] with [\n      ]
7: -             std::placeholders::_1, std::placeholders::_2));
7: -         bool result = comm_udp_network_->CreateSocket(UDP_CLIENT, server_ip, server_port);
7: +             std::placeholders::_1, std::placeholders::_2));
7: +       bool result = comm_udp_network_->CreateSocket(UDP_CLIENT, server_ip, server_port);
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:181:90]: Replace [\n        ] with [\n      ]
7: -         bool result = comm_udp_network_->CreateSocket(UDP_CLIENT, server_ip, server_port);
7: -         if (!result) {
7: +         bool result = comm_udp_network_->CreateSocket(UDP_CLIENT, server_ip, server_port);
7: +       if (!result) {
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:182:22]: Replace [\n          ] with [\n        ]
7: -         if (!result) {
7: -           LD_LOG_ERROR("client host: create socket is fail.", "");
7: +         if (!result) {
7: +         LD_LOG_ERROR("client host: create socket is fail.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:183:66]: Replace [\n          ] with [\n        ]
7: -           LD_LOG_ERROR("client host: create socket is fail.", "");
7: -           return false;
7: +           LD_LOG_ERROR("client host: create socket is fail.", "");
7: +         return false;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:184:23]: Replace [\n        ] with [\n      ]
7: -           return false;
7: -         }
7: +           return false;
7: +       }
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:185:9]: Replace [\n        ] with [\n      ]
7: -         }
7: -         // 主动向服务端发布消息使服务端保存客户端ip，port 信息，建立沟通渠道
7: +         }
7: +       // 主动向服务端发布消息使服务端保存客户端ip，port 信息，建立沟通渠道
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:188:0]: Replace [        u] with [\n      ]
7: -         uint32_t tx_len;
7: + 
7: +       int32_t tx_len;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:189:32]: Replace [TransToNe] with [\n      ]
7: -         if (!comm_udp_network_->TransToNet((uint8_t *)trans_buf, sizeof(trans_buf), &tx_len)) {
7: +         if (!comm_udp_network_->
7: +       t((uint8_t *)trans_buf, sizeof(trans_buf), &tx_len)) {
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:189:57]: Replace [ns_buf, s] with [\n      ]
7: -         if (!comm_udp_network_->TransToNet((uint8_t *)trans_buf, sizeof(trans_buf), &tx_len)) {
7: +         if (!comm_udp_network_->TransToNet((uint8_t *)tra
7: +       izeof(trans_buf), &tx_len)) {
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:190:57]: Replace [er is fail.] with [\n        ]
7: -           LD_LOG_ERROR("client host: send request to server is fail. %s", strerror(errno));
7: +           LD_LOG_ERROR("client host: send request to serv
7: +          %s", strerror(errno));
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:193:23]: Replace [lient host:] with [\n        ]
7: -         LDS_LOG_INFO("client host: create socket is ok.", "");
7: +         LDS_LOG_INFO("c
7: +          create socket is ok.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:193:47]: Replace [t is ok."] with [\n      ]
7: -         LDS_LOG_INFO("client host: create socket is ok.", "");
7: +         LDS_LOG_INFO("client host: create socke
7: +       , "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:193:57]: Replace [ "");\n   ] with [\n      ]
7: -         LDS_LOG_INFO("client host: create socket is ok.", "");
7: -       }
7: +         LDS_LOG_INFO("client host: create socket is ok.",
7: +          }
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:197:3]: Replace [     co] with [\n    ]
7: -         comm_udp_network_->SetRecvCallback(
7: +    
7: +     mm_udp_network_->SetRecvCallback(
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:197:11]: Replace [m_udp_n] with [ ]
7: -         comm_udp_network_->SetRecvCallback(
7: +         com etwork_->SetRecvCallback(
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:198:13]: Replace [::bind(\n ] with [\n      ]
7: -           std::bind(
7: -             &LiPkg::CommReadCallback, comm_pkg_,
7: +           std
7: +                  &LiPkg::CommReadCallback, comm_pkg_,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:199:36]: Replace [, comm_pkg_] with []
7: -             &LiPkg::CommReadCallback, comm_pkg_,
7: +             &LiPkg::CommReadCallback,
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:200:8]: Replace [    std::plac] with [\n        ]
7: -             std::placeholders::_1, std::placeholders::_2));
7: +         
7: +         eholders::_1, std::placeholders::_2));
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:200:57]: Replace [);\n        bo] with [ ]
7: -             std::placeholders::_1, std::placeholders::_2));
7: -         bool result = comm_udp_network_->CreateSocket(UDP_SERVER, server_ip, server_port);
7: +             std::placeholders::_1, std::placeholders::_2) ol result = comm_udp_network_->CreateSocket(UDP_SERVER, server_ip, server_port);
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:201:57]: Replace [_SERVER, ] with [\n      ]
7: -         bool result = comm_udp_network_->CreateSocket(UDP_SERVER, server_ip, server_port);
7: +         bool result = comm_udp_network_->CreateSocket(UDP
7: +       server_ip, server_port);
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:203:34]: Replace [t: create] with [\n      ]
7: -           LD_LOG_ERROR("server host: create socket is fail.", "");
7: +           LD_LOG_ERROR("server hos
7: +        socket is fail.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:203:57]: Replace [l.", "");\n ] with [\n        ]
7: -           LD_LOG_ERROR("server host: create socket is fail.", "");
7: -           return false;
7: +           LD_LOG_ERROR("server host: create socket is fai
7: +                  return false;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:206:23]: Replace [erver host:] with [\n        ]
7: -         LDS_LOG_INFO("server host: create socket is ok.", "");
7: +         LDS_LOG_INFO("s
7: +          create socket is ok.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:206:47]: Replace [t is ok."] with [\n      ]
7: -         LDS_LOG_INFO("server host: create socket is ok.", "");
7: +         LDS_LOG_INFO("server host: create socke
7: +       , "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:206:57]: Replace [ "");\n   ] with [\n      ]
7: -         LDS_LOG_INFO("server host: create socket is ok.", "");
7: -         LDS_LOG_INFO("server host: wait client ack connect..", "");
7: +         LDS_LOG_INFO("server host: create socket is ok.",
7: +            LDS_LOG_INFO("server host: wait client ack connect..", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:207:57]: Replace [t..", "")] with [\n      ]
7: -         LDS_LOG_INFO("server host: wait client ack connect..", "");
7: +         LDS_LOG_INFO("server host: wait client ack connec
7: +       ;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:209:5]: Replace [     usle] with [\n      ]
7: -           usleep(1000);
7: +      
7: +       ep(1000);
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:213:2]: Replace [  default: ] with [\n        ]
7: -     default: {
7: +   
7: +         {
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:214:11]: Replace [_LOG_ERRO] with [\n      ]
7: -         LDS_LOG_ERROR("input comm_mode param is error.", "");
7: +         LDS
7: +       R("input comm_mode param is error.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:214:21]: Replace [("input] with [\n    ]
7: -         LDS_LOG_ERROR("input comm_mode param is error.", "");
7: +         LDS_LOG_ERROR
7: +      comm_mode param is error.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:214:29]: Replace [comm_mo] with [ ]
7: -         LDS_LOG_ERROR("input comm_mode param is error.", "");
7: +         LDS_LOG_ERROR("input  de param is error.", "");
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:214:57]: Replace ["");\n    ] with [\n      ]
7: -         LDS_LOG_ERROR("input comm_mode param is error.", "");
7: -         return false;
7: +         LDS_LOG_ERROR("input comm_mode param is error.", 
7: +           return false;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:220:9]: Replace [t_flag_ =] with [\n      ]
7: -   is_start_flag_ = true;
7: +   is_star
7: +        true;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:222:5]: Replace [IsOkSta] with [\n    ]
7: -   SetIsOkStatus(true);
7: +   Set
7: +     tus(true);
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:222:13]: Replace [us(true] with [ ]
7: -   SetIsOkStatus(true);
7: +   SetIsOkStat );
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:255:57]: Replace [ < ti] with [\n                              ]
7: -     std::chrono::steady_clock::now() - last_time).count() < timeout));
7: +     std::chrono::steady_clock::now() - last_time).count()
7: +                               meout));
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:258:14]: Replace [] with [\n                              ]
7: -     last_pubdata_times_ = std::chrono::steady_clock::now();
7: +     last_pubda
7: +                               ta_times_ = std::chrono::steady_clock::now();
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:279:3]: Replace [] with [\n      ]
7: -         std::chrono::steady_clock::now() -
7: +    
7: +            std::chrono::steady_clock::now() -
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:282:3]: Replace [   return] with [ ]
7: -       return LidarStatus::DATA_TIME_OUT;
7: +      LidarStatus::DATA_TIME_OUT;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:282:32]: Replace [] with [\n        ]
7: -       return LidarStatus::DATA_TIME_OUT;
7: +       return LidarStatus::DATA_T
7: +         IME_OUT;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:283:10]: Replace [ {\n  ] with [ ]
7: -     } else {
7: -       return LidarStatus::DATA_WAIT;
7: +     } else     return LidarStatus::DATA_WAIT;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:309:3]: Replace [] with [\n      ]
7: -         std::chrono::steady_clock::now() -
7: +    
7: +            std::chrono::steady_clock::now() -
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:312:3]: Replace [   return] with [ ]
7: -       return LidarStatus::DATA_TIME_OUT;
7: +      LidarStatus::DATA_TIME_OUT;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:312:32]: Replace [] with [\n        ]
7: -       return LidarStatus::DATA_TIME_OUT;
7: +       return LidarStatus::DATA_T
7: +         IME_OUT;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:313:10]: Replace [ {\n  ] with [ ]
7: -     } else {
7: -       return LidarStatus::DATA_WAIT;
7: +     } else     return LidarStatus::DATA_WAIT;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:336:22]: Replace [mp_ha] with []
7: -   register_get_timestamp_handle_ = get_timestamp_handle;
7: +   register_get_timestandle_ = get_timestamp_handle;
7: [ldlidar_driver/src/core/ldlidar_driver.cpp:353:36]: Replace [ ] with [  ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF
7: + /********************* (C) COPYRIGHT  SHENZHEN LDROBOT CO., LTD *******END OF
7: 
7: Code style divergence in file 'ldlidar_driver/src/dataprocess/lipkg.cpp':
7: 
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:28:73]: Replace [\n  ] with [ ]
7: -   0x00, 0x4d, 0x9a, 0xd7, 0x79, 0x34, 0xe3, 0xae, 0xf2, 0xbf, 0x68, 0x25,
7: -   0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,
7: +   0x00, 0x4d, 0x9a, 0xd7, 0x79, 0x34, 0xe3, 0xae, 0xf2, 0xbf, 0x68, 0x25, 0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:29:25]: Replace [ ] with [\n  ]
7: -   0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,
7: +   0x8b, 0xc6, 0x11, 0x5c,
7: +   0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:29:73]: Replace [\n  ] with [ ]
7: -   0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07,
7: -   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8,
7: +   0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07, 0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:30:49]: Replace [ ] with [\n  ]
7: -   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8,
7: +   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5,
7: +   0x1f, 0x52, 0x85, 0xc8,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:30:73]: Replace [\n  ] with [ ]
7: -   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8,
7: -   0x66, 0x2b, 0xfc, 0xb1, 0xed, 0xa0, 0x77, 0x3a, 0x94, 0xd9, 0x0e, 0x43,
7: +   0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5, 0x1f, 0x52, 0x85, 0xc8, 0x66, 0x2b, 0xfc, 0xb1, 0xed, 0xa0, 0x77, 0x3a, 0x94, 0xd9, 0x0e, 0x43,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:32:73]: Replace [\n  ] with [ ]
7: -   0xb6, 0xfb, 0x2c, 0x61, 0xcf, 0x82, 0x55, 0x18, 0x44, 0x09, 0xde, 0x93,
7: -   0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,
7: +   0xb6, 0xfb, 0x2c, 0x61, 0xcf, 0x82, 0x55, 0x18, 0x44, 0x09, 0xde, 0x93, 0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:33:25]: Replace [ ] with [\n  ]
7: -   0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,
7: +   0x3d, 0x70, 0xa7, 0xea,
7: +   0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:33:73]: Replace [\n  ] with [ ]
7: -   0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90,
7: -   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40,
7: +   0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90, 0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:34:49]: Replace [ ] with [\n  ]
7: -   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40,
7: +   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62,
7: +   0x97, 0xda, 0x0d, 0x40,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:34:73]: Replace [\n  ] with [ ]
7: -   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40,
7: -   0xee, 0xa3, 0x74, 0x39, 0x65, 0x28, 0xff, 0xb2, 0x1c, 0x51, 0x86, 0xcb,
7: +   0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62, 0x97, 0xda, 0x0d, 0x40, 0xee, 0xa3, 0x74, 0x39, 0x65, 0x28, 0xff, 0xb2, 0x1c, 0x51, 0x86, 0xcb,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:36:73]: Replace [\n  ] with [ ]
7: -   0x21, 0x6c, 0xbb, 0xf6, 0x58, 0x15, 0xc2, 0x8f, 0xd3, 0x9e, 0x49, 0x04,
7: -   0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,
7: +   0x21, 0x6c, 0xbb, 0xf6, 0x58, 0x15, 0xc2, 0x8f, 0xd3, 0x9e, 0x49, 0x04, 0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:37:25]: Replace [ ] with [\n  ]
7: -   0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,
7: +   0xaa, 0xe7, 0x30, 0x7d,
7: +   0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:37:73]: Replace [\n  ] with [ ]
7: -   0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26,
7: -   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab,
7: +   0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26, 0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:38:49]: Replace [ ] with [\n  ]
7: -   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab,
7: +   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4,
7: +   0x7c, 0x31, 0xe6, 0xab,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:38:73]: Replace [\n  ] with [ ]
7: -   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab,
7: -   0x05, 0x48, 0x9f, 0xd2, 0x8e, 0xc3, 0x14, 0x59, 0xf7, 0xba, 0x6d, 0x20,
7: +   0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4, 0x7c, 0x31, 0xe6, 0xab, 0x05, 0x48, 0x9f, 0xd2, 0x8e, 0xc3, 0x14, 0x59, 0xf7, 0xba, 0x6d, 0x20,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:40:73]: Replace [\n  ] with [ ]
7: -   0xd5, 0x98, 0x4f, 0x02, 0xac, 0xe1, 0x36, 0x7b, 0x27, 0x6a, 0xbd, 0xf0,
7: -   0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,
7: +   0xd5, 0x98, 0x4f, 0x02, 0xac, 0xe1, 0x36, 0x7b, 0x27, 0x6a, 0xbd, 0xf0, 0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:41:25]: Replace [ ] with [\n  ]
7: -   0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,
7: +   0x5e, 0x13, 0xc4, 0x89,
7: +   0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:41:73]: Replace [\n  ] with [ ]
7: -   0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd,
7: -   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d,
7: +   0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd, 0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:42:49]: Replace [ ] with [\n  ]
7: -   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d,
7: +   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f,
7: +   0xca, 0x87, 0x50, 0x1d,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:42:73]: Replace [\n  ] with [ ]
7: -   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d,
7: -   0xb3, 0xfe, 0x29, 0x64, 0x38, 0x75, 0xa2, 0xef, 0x41, 0x0c, 0xdb, 0x96,
7: +   0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f, 0xca, 0x87, 0x50, 0x1d, 0xb3, 0xfe, 0x29, 0x64, 0x38, 0x75, 0xa2, 0xef, 0x41, 0x0c, 0xdb, 0x96,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:44:73]: Replace [\n  ] with [ ]
7: -   0x42, 0x0f, 0xd8, 0x95, 0x3b, 0x76, 0xa1, 0xec, 0xb0, 0xfd, 0x2a, 0x67,
7: -   0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,
7: +   0x42, 0x0f, 0xd8, 0x95, 0x3b, 0x76, 0xa1, 0xec, 0xb0, 0xfd, 0x2a, 0x67, 0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:45:25]: Replace [ ] with [\n  ]
7: -   0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,
7: +   0xc9, 0x84, 0x53, 0x1e,
7: +   0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:45:73]: Replace [\n  ] with [ ]
7: -   0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45,
7: -   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a,
7: +   0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45, 0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:46:49]: Replace [ ] with [\n  ]
7: -   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a,
7: +   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7,
7: +   0x5d, 0x10, 0xc7, 0x8a,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:46:73]: Replace [\n  ] with [ ]
7: -   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a,
7: -   0x24, 0x69, 0xbe, 0xf3, 0xaf, 0xe2, 0x35, 0x78, 0xd6, 0x9b, 0x4c, 0x01,
7: +   0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7, 0x5d, 0x10, 0xc7, 0x8a, 0x24, 0x69, 0xbe, 0xf3, 0xaf, 0xe2, 0x35, 0x78, 0xd6, 0x9b, 0x4c, 0x01,
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:48:73]: Replace [\n  ] with [ ]
7: -   0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17, 0x5a, 0x06, 0x4b, 0x9c, 0xd1,
7: -   0x7f, 0x32, 0xe5, 0xa8};
7: +   0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17, 0x5a, 0x06, 0x4b, 0x9c, 0xd1, 0x7f, 0x32, 0xe5, 0xa8};
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:73:1]: Replace [\n\n] with [\n]
7: - {
7: - 
7: - }
7: + {
7: + }
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:77:15]: Replace [\n] with [ ]
7: - LiPkg::~LiPkg()
7: - {
7: + LiPkg::~LiPkg() {
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:78:1]: Replace [\n\n] with []
7: - {
7: - 
7: - }
7: + {}
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:105:13]: Replace [\n  ] with [ ]
7: -   static enum
7: -   {
7: +   static enum {
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:160:91]: Replace [\n\n        ] with [\n        ]
7: -       if (diff <= ((double)pkg_.speed * POINT_PER_PACK / measure_point_frequence_ * 1.5)) {
7: - 
7: -         if (0 == last_pkg_timestamp_) {
7: +       if (diff <= ((double)pkg_.speed * POINT_PER_PACK / measure_point_frequence_ * 1.5)) {
7: +         if (0 == last_pkg_timestamp_) {
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:172:28]: Replace [ ] with [          ]
7: -         speed_ = pkg_.speed; // Degrees per second
7: +         speed_ = pkg_.speed;          // Degrees per second
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:173:36]: Replace [ ] with [  ]
7: -         timestamp_ = pkg_.timestamp; // In milliseconds
7: +         timestamp_ = pkg_.timestamp;  // In milliseconds
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:189:49]: Replace [ ] with [  ]
7: -         last_pkg_timestamp_ = current_pack_stamp; //// update last pkg timestamp
7: +         last_pkg_timestamp_ = current_pack_stamp;  //// update last pkg timestamp
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:225:70]: Replace [] with [ ]
7: -       std::sort(tmp.begin(), tmp.end(), [](PointData a, PointData b) {return a.stamp < b.stamp;});
7: +       std::sort(tmp.begin(), tmp.end(), [](PointData a, PointData b) { return a.stamp < b.stamp;});
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:225:95]: Replace [] with [ ]
7: -       std::sort(tmp.begin(), tmp.end(), [](PointData a, PointData b) {return a.stamp < b.stamp;});
7: +       std::sort(tmp.begin(), tmp.end(), [](PointData a, PointData b) {return a.stamp < b.stamp; });
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:265:36]: Replace [\n] with [ ]
7: - uint16_t LiPkg::GetSpeedOrigin(void)
7: - {
7: + uint16_t LiPkg::GetSpeedOrigin(void) {
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:266:1]: Replace [\n  ] with [ ]
7: - {
7: -   return speed_;
7: + { return speed_;
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:267:16]: Replace [\n] with [ ]
7: -   return speed_;
7: - }
7: +   return speed_; }
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:270:34]: Replace [\n] with [ ]
7: - uint16_t LiPkg::GetTimestamp(void)
7: - {
7: + uint16_t LiPkg::GetTimestamp(void) {
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:271:1]: Replace [\n  ] with [ ]
7: - {
7: -   return timestamp_;
7: + { return timestamp_;
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:272:20]: Replace [\n] with [ ]
7: -   return timestamp_;
7: - }
7: +   return timestamp_; }
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:275:46]: Replace [\n] with [ ]
7: - int LiPkg::GetLidarMeasurePointFrequence(void)
7: - {
7: + int LiPkg::GetLidarMeasurePointFrequence(void) {
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:276:1]: Replace [\n  ] with [ ]
7: - {
7: -   return measure_point_frequence_;
7: + { return measure_point_frequence_;
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:277:34]: Replace [\n] with [ ]
7: -   return measure_point_frequence_;
7: - }
7: +   return measure_point_frequence_; }
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:333:40]: Replace [\n] with [ ]
7: - void LiPkg::EnableFilter(bool is_enable)
7: - {
7: + void LiPkg::EnableFilter(bool is_enable) {
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:334:1]: Replace [\n  ] with [ ]
7: - {
7: -   is_filter_ = is_enable;
7: + { is_filter_ = is_enable;
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:335:25]: Replace [\n] with [ ]
7: -   is_filter_ = is_enable;
7: - }
7: +   is_filter_ = is_enable; }
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:338:39]: Replace [\n] with [ ]
7: - LidarStatus LiPkg::GetLidarStatus(void)
7: - {
7: + LidarStatus LiPkg::GetLidarStatus(void) {
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:339:1]: Replace [\n  ] with [ ]
7: - {
7: -   return lidarstatus_;
7: + { return lidarstatus_;
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:340:22]: Replace [\n] with [ ]
7: -   return lidarstatus_;
7: - }
7: +   return lidarstatus_; }
7: [ldlidar_driver/src/dataprocess/lipkg.cpp:350:1]: Replace [ ] with [  ]
7: - } // namespace ldlidar
7: + }  // namespace ldlidar
7: 
7: Code style divergence in file 'ldlidar_driver/src/filter/tofbf.cpp':
7: 
7: [ldlidar_driver/src/filter/tofbf.cpp:34:24]: Replace [/] with [  ]
7: -   curr_speed_ = speed; // ldliar spin speed, unit is Degrees per second
7: +   curr_speed_ = speed; /   ldliar spin speed, unit is Degrees per second
7: [ldlidar_driver/src/filter/tofbf.cpp:64:1]: Replace [ co] with []
7: -   const std::vector<PointData> & tmp) const
7: +  nst std::vector<PointData> & tmp) const
7: [ldlidar_driver/src/filter/tofbf.cpp:86:1]: Replace [ co] with []
7: -   const std::vector<PointData> & tmp) const
7: +  nst std::vector<PointData> & tmp) const
7: [ldlidar_driver/src/filter/tofbf.cpp:100:22]: Replace [] with [\n    ]
7: -   if (tmp.empty()) {return normal;}
7: +   if (tmp.empty()) {re
7: +     turn normal;}
7: [ldlidar_driver/src/filter/tofbf.cpp:101:0]: Replace [] with [\n  ]
7: - 
7: + 
7: +   
7: [ldlidar_driver/src/filter/tofbf.cpp:107:1]: Replace [   []] with [ ]
7: -     [](PointData a, PointData b) {return a.angle < b.angle;});
7: +   (PointData a, PointData b) {return a.angle < b.angle;});
7: [ldlidar_driver/src/filter/tofbf.cpp:107:36]: Replace [] with [ ]
7: -     [](PointData a, PointData b) {return a.angle < b.angle;});
7: +     [](PointData a, PointData b) {re turn a.angle < b.angle;});
7: [ldlidar_driver/src/filter/tofbf.cpp:107:61]: Replace [] with [ ]
7: -     [](PointData a, PointData b) {return a.angle < b.angle;});
7: +     [](PointData a, PointData b) {return a.angle < b.angle;}) ;
7: [ldlidar_driver/src/filter/tofbf.cpp:112:10]: Replace [] with [\n      ]
7: -     if (fabs(n.angle - last.angle) > angle_delta_up_limit ||
7: +     if (fa
7: +       bs(n.angle - last.angle) > angle_delta_up_limit ||
7: [ldlidar_driver/src/filter/tofbf.cpp:114:1]: Replace [   {\n] with [ ]
7: -     {
7: -       if (item.empty() == false) {
7: +         if (item.empty() == false) {
7: [ldlidar_driver/src/filter/tofbf.cpp:124:32]: Replace [] with [\n    ]
7: -   if (item.empty() == false) {group.push_back(item);}
7: +   if (item.empty() == false) {gr
7: +     oup.push_back(item);}
7: [ldlidar_driver/src/filter/tofbf.cpp:125:0]: Replace [] with [\n  ]
7: - 
7: + 
7: +   
7: [ldlidar_driver/src/filter/tofbf.cpp:126:24]: Replace [] with [\n    ]
7: -   if (group.empty()) {return normal;}
7: +   if (group.empty()) {re
7: +     turn normal;}
7: [ldlidar_driver/src/filter/tofbf.cpp:127:0]: Replace [] with [\n  ]
7: - 
7: + 
7: +   
7: [ldlidar_driver/src/filter/tofbf.cpp:131:8]: Replace [] with [\n    ]
7: -   if (fabs(first_item.angle + 360.f - last_item.angle) < angle_delta_up_limit &&
7: +   if (fa
7: +     bs(first_item.angle + 360.f - last_item.angle) < angle_delta_up_limit &&
7: [ldlidar_driver/src/filter/tofbf.cpp:133:1]: Replace [ {\n] with [ ]
7: -   {
7: -     group.front().insert(group.front().begin(), group.back().begin(), group.back().end());
7: +       group.front().insert(group.front().begin(), group.back().begin(), group.back().end());
7: [ldlidar_driver/src/filter/tofbf.cpp:139:26]: Replace [] with [\n      ]
7: -     if (n.size() == 0) {continue;}
7: +     if (n.size() == 0) {co
7: +       ntinue;}
7: [ldlidar_driver/src/filter/tofbf.cpp:140:0]: Replace [] with [\n    ]
7: -     // No filtering if there are many points
7: + 
7: +         // No filtering if there are many points
7: [ldlidar_driver/src/filter/tofbf.cpp:154:27]: Replace [] with [ ]
7: -         for (auto & point: n) {
7: +         for (auto & point:  n) {
7: [ldlidar_driver/src/filter/tofbf.cpp:191:1]: Replace [ co] with []
7: -   const std::vector<PointData> & tmp) const
7: +  nst std::vector<PointData> & tmp) const
7: [ldlidar_driver/src/filter/tofbf.cpp:196:22]: Replace [] with [\n    ]
7: -   if (tmp.empty()) {return normal;}
7: +   if (tmp.empty()) {re
7: +     turn normal;}
7: [ldlidar_driver/src/filter/tofbf.cpp:197:0]: Replace [] with [\n  ]
7: - 
7: + 
7: +   
7: [ldlidar_driver/src/filter/tofbf.cpp:216:12]: Replace [] with [\n        ]
7: -       if ((n.distance + 10 < last_data.distance && n.distance + 10 < next_data.distance) ||
7: +       if ((n
7: +         .distance + 10 < last_data.distance && n.distance + 10 < next_data.distance) ||
7: [ldlidar_driver/src/filter/tofbf.cpp:218:1]: Replace [     {\n] with [ ]
7: -       {
7: -         if (n.intensity < 60) {
7: +           if (n.intensity < 60) {
7: [ldlidar_driver/src/filter/tofbf.cpp:225:19]: Replace [] with [\n        ]
7: -       } else if ((n.distance + 7 < last_data.distance && n.distance + 7 < next_data.distance) ||
7: +       } else if ((n
7: +         .distance + 7 < last_data.distance && n.distance + 7 < next_data.distance) ||
7: [ldlidar_driver/src/filter/tofbf.cpp:227:1]: Replace [     {\n] with [ ]
7: -       {
7: -         if (n.intensity < 45) {
7: +           if (n.intensity < 45) {
7: [ldlidar_driver/src/filter/tofbf.cpp:234:19]: Replace [] with [\n        ]
7: -       } else if ((n.distance + 5 < last_data.distance && n.distance + 5 < next_data.distance) ||
7: +       } else if ((n
7: +         .distance + 5 < last_data.distance && n.distance + 5 < next_data.distance) ||
7: [ldlidar_driver/src/filter/tofbf.cpp:236:1]: Replace [     {\n] with [ ]
7: -       {
7: -         if (n.intensity < 30) {
7: +           if (n.intensity < 30) {
7: [ldlidar_driver/src/filter/tofbf.cpp:264:12]: Replace [] with [\n        ]
7: -       if ((n.distance + 30 < last_data.distance || n.distance > last_data.distance + 30) &&
7: +       if ((n
7: +         .distance + 30 < last_data.distance || n.distance > last_data.distance + 30) &&
7: [ldlidar_driver/src/filter/tofbf.cpp:266:1]: Replace [     {\n] with [ ]
7: -       {
7: -         if ((n.distance < 2000 && n.intensity < 30) || n.intensity < 20) {
7: +           if ((n.distance < 2000 && n.intensity < 30) || n.intensity < 20) {
7: [ldlidar_driver/src/filter/tofbf.cpp:280:3]: Replace [/] with [  ]
7: - } // namespace ldlidar
7: + } /   namespace ldlidar
7: 
7: Code style divergence in file 'ldlidar_driver/src/logger/log_module.cpp':
7: 
7: [ldlidar_driver/src/logger/log_module.cpp:18:0]: Replace [#include "log_module.h"\n\n#include <time.h>\n#include <string.h>] with [#include "log_module.h"\n\n#include <string.h>\n#include <time.h>]
7: - #include "log_module.h"
7: - 
7: - #include <time.h>
7: - #include <string.h>
7: + #include "log_module.h"
7: + 
7: + #include <string.h>
7: + #include <time.h>
7: [ldlidar_driver/src/logger/log_module.cpp:27:0]: Replace [#include <stdlib.h>\n#include <pthread.h>] with [#include <pthread.h>\n#include <stdlib.h>]
7: - #include <stdlib.h>
7: - #include <pthread.h>
7: + #include <pthread.h>
7: + #include <stdlib.h>
7: [ldlidar_driver/src/logger/log_module.cpp:34:18]: Replace [ul] with [ ]
7: - LogModule * LogModule::s_plog_module_ = NULL;
7: + LogModule * LogMod e::s_plog_module_ = NULL;
7: [ldlidar_driver/src/logger/log_module.cpp:34:36]: Replace [_ ] with [ ]
7: - LogModule * LogModule::s_plog_module_ = NULL;
7: + LogModule * LogModule::s_plog_module = NULL;
7: [ldlidar_driver/src/logger/log_module.cpp:38:11]: Replace [t c] with [\n\n]
7: -   __in const char * filename, __in const char * funcname,
7: +   __in cons
7: + 
7: + har * filename, __in const char * funcname,
7: [ldlidar_driver/src/logger/log_module.cpp:39:49]: Replace [n *] with [ ]
7: -   __in int lineno, LogLevel level, ILogRealization * plog)
7: +   __in int lineno, LogLevel level, ILogRealizatio  plog)
7: [ldlidar_driver/src/logger/log_module.cpp:41:23]: Replace [ ] with [\n  ]
7: -   if (s_plog_module_ == NULL) {
7: +   if (s_plog_module_ ==
7: +   NULL) {
7: [ldlidar_driver/src/logger/log_module.cpp:88:28]: Replace [c] with [ ]
7: - void LogModule::LogPrintInf(const char * format, ...)
7: + void LogModule::LogPrintInf( onst char * format, ...)
7: [ldlidar_driver/src/logger/log_module.cpp:88:30]: Replace [nst] with [ ]
7: - void LogModule::LogPrintInf(const char * format, ...)
7: + void LogModule::LogPrintInf(co  char * format, ...)
7: [ldlidar_driver/src/logger/log_module.cpp:88:46]: Replace [t] with [ ]
7: - void LogModule::LogPrintInf(const char * format, ...)
7: + void LogModule::LogPrintInf(const char * forma , ...)
7: [ldlidar_driver/src/logger/log_module.cpp:100:17]: Replace [stamp[100] ] with [\n        ]
7: -           char s_stamp[100] = {0};
7: +           char s_
7: +         = {0};
7: [ldlidar_driver/src/logger/log_module.cpp:101:20]: Replace [imestamp = ] with [\n        ]
7: -           uint64_t timestamp = GetCurrentLocalTimeStamp();
7: +           uint64_t t
7: +         GetCurrentLocalTimeStamp();
7: [ldlidar_driver/src/logger/log_module.cpp:101:55]: Replace [();\n#ifdef ] with [\n        ]
7: -           uint64_t timestamp = GetCurrentLocalTimeStamp();
7: - #ifdef __LP64__
7: +           uint64_t timestamp = GetCurrentLocalTimeStamp
7: +         __LP64__
7: [ldlidar_driver/src/logger/log_module.cpp:103:55]: Replace [p / 1000000] with [\n        ]
7: -           snprintf(s_stamp, 100, "[%lu.%lu]", (timestamp / 1000000000), (timestamp % 1000000000));
7: +           snprintf(s_stamp, 100, "[%lu.%lu]", (timestam
7: +         000), (timestamp % 1000000000));
7: [ldlidar_driver/src/logger/log_module.cpp:106:55]: Replace [p / 1000000] with [\n        ]
7: -           snprintf(s_stamp, 100, "[%lu.%lu]", (timestamp / 1000000000), (timestamp % 1000000000));
7: +           snprintf(s_stamp, 100, "[%lu.%lu]", (timestam
7: +         000), (timestamp % 1000000000));
7: [ldlidar_driver/src/logger/log_module.cpp:108:55]: Replace [amp / 10000] with [\n        ]
7: -           snprintf(s_stamp, 100, "[%llu.%llu]", (timestamp / 1000000000), (timestamp % 1000000000));
7: +           snprintf(s_stamp, 100, "[%llu.%llu]", (timest
7: +         00000), (timestamp % 1000000000));
7: [ldlidar_driver/src/logger/log_module.cpp:113:9]: Replace [reak;\n     ] with [\n        ]
7: -         break;
7: -       default: {
7: +         b
7: +          default: {
7: [ldlidar_driver/src/logger/log_module.cpp:115:13]: Replace [间   [week] with [\n      ]
7: -           //时间   [week month day hours:minutes:seconds year]
7: +           //时
7: +        month day hours:minutes:seconds year]
7: [ldlidar_driver/src/logger/log_module.cpp:115:23]: Replace [month day] with [ ]
7: -           //时间   [week month day hours:minutes:seconds year]
7: +           //时间   [week   hours:minutes:seconds year]
7: [ldlidar_driver/src/logger/log_module.cpp:115:55]: Replace [year]\n     ] with [\n        ]
7: -           //时间   [week month day hours:minutes:seconds year]
7: -           str_temp.append(GetFormatValue(GetCurrentTime()));
7: +           //时间   [week month day hours:minutes:seconds 
7: +              str_temp.append(GetFormatValue(GetCurrentTime()));
7: [ldlidar_driver/src/logger/log_module.cpp:116:59]: Replace [;\n        }] with [\n        ]
7: -           str_temp.append(GetFormatValue(GetCurrentTime()));
7: -         }
7: +           str_temp.append(GetFormatValue(GetCurrentTime()))
7: +         
7: [ldlidar_driver/src/logger/log_module.cpp:122:16]: Replace [end(GetFo] with [\n      ]
7: -     str_temp.append(GetFormatValue(logInfo_.str_filename));
7: +     str_temp.app
7: +       rmatValue(logInfo_.str_filename));
7: [ldlidar_driver/src/logger/log_module.cpp:122:26]: Replace [matValue(] with [ ]
7: -     str_temp.append(GetFormatValue(logInfo_.str_filename));
7: +     str_temp.append(GetFor logInfo_.str_filename));
7: 
7: Code style divergence in file 'ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp':
7: 
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:20:0]: Replace [#include "network_socket_interface_linux.h"\n#include "log_module.h"] with [#include "network_socket_interface_linux.h"\n\n#include "log_module.h"]
7: - #include "network_socket_interface_linux.h"
7: - #include "log_module.h"
7: + #include "network_socket_interface_linux.h"
7: + 
7: + #include "log_module.h"
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:37:1]: Replace [\n\n] with [\n]
7: - {
7: - 
7: - }
7: + {
7: + }
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:41:51]: Replace [\n] with [ ]
7: - UDPSocketInterfaceLinux::~UDPSocketInterfaceLinux()
7: - {
7: + UDPSocketInterfaceLinux::~UDPSocketInterfaceLinux() {
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:42:1]: Replace [\n  ] with [ ]
7: - {
7: -   CloseSocket();
7: + { CloseSocket();
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:43:16]: Replace [\n] with [ ]
7: -   CloseSocket();
7: - }
7: +   CloseSocket(); }
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:47:41]: Replace [\n  ] with [ ]
7: -   NetCommDevTypeDef obj, const char * ip,
7: -   const char * port)
7: +   NetCommDevTypeDef obj, const char * ip, const char * port)
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:49:1]: Replace [\n\n  ] with [\n  ]
7: - {
7: - 
7: -   if (is_cmd_created_ == true) {
7: + {
7: +   if (is_cmd_created_ == true) {
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:152:44]: Replace [\n        ] with [ ]
7: -         com_sockfd_, rx_buf, rx_buff_len, 0,
7: -         (struct sockaddr *)&sender_addr_inf, (socklen_t *)&addrlen);
7: +         com_sockfd_, rx_buf, rx_buff_len, 0, (struct sockaddr *)&sender_addr_inf, (socklen_t *)&addrlen);
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:153:44]: Replace [ ] with [\n        ]
7: -         (struct sockaddr *)&sender_addr_inf, (socklen_t *)&addrlen);
7: +         (struct sockaddr *)&sender_addr_inf,
7: +         (socklen_t *)&addrlen);
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:204:45]: Replace [ocklen_] with [ ]
7: -       (struct sockaddr *)&recver_net_addr, (socklen_t)addrlen);
7: +       (struct sockaddr *)&recver_net_addr, (s t)addrlen);
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:220:15]: Replace [_ =] with [ ]
7: -   recv_callback_ = callback;
7: +   recv_callback  callback;
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:243:43]: Replace [Lin] with [\n\n]
7: - TCPSocketInterfaceLinux::TCPSocketInterfaceLinux()
7: + TCPSocketInterfaceLinux::TCPSocketInterface
7: + 
7: + ux()
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:255:41]: Replace [ac] with [\n]
7: - TCPSocketInterfaceLinux::~TCPSocketInterfaceLinux()
7: + TCPSocketInterfaceLinux::~TCPSocketInterf
7: + eLinux()
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:260:23]: Replace [L] with [ ]
7: - bool TCPSocketInterfaceLinux::CreateSocket(
7: + bool TCPSocketInterface inux::CreateSocket(
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:260:25]: Replace [nux] with [ ]
7: - bool TCPSocketInterfaceLinux::CreateSocket(
7: + bool TCPSocketInterfaceLi ::CreateSocket(
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:260:42]: Replace [(] with [ ]
7: - bool TCPSocketInterfaceLinux::CreateSocket(
7: + bool TCPSocketInterfaceLinux::CreateSocket 
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:264:22]: Replace [== ] with [ ]
7: -   if (is_cmd_created_ == true) {
7: +   if (is_cmd_created_  true) {
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:323:8]: Replace [] with [\n      ]
7: -       accept(com_sockfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))
7: +       ac
7: +       cept(com_sockfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:323:13]: Replace [com_soc] with [ ]
7: -       accept(com_sockfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))
7: +       accept( kfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:323:45]: Replace [&client] with [\n               ]
7: -       accept(com_sockfd_, (struct sockaddr *)&client_addr, (socklen_t *)&addrlens)))
7: +       accept(com_sockfd_, (struct sockaddr *)
7: +                _addr, (socklen_t *)&addrlens)))
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:325:39]: Replace [ %s",] with [ ]
7: -       LD_LOG_ERROR("TCP,fail to accept. %s", strerror(errno));
7: +       LD_LOG_ERROR("TCP,fail to accept.  strerror(errno));
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:466:15]: Replace [_ =] with [ ]
7: -   recv_callback_ = callback;
7: +   recv_callback  callback;
7: [ldlidar_driver/src/networkcom/network_socket_interface_linux.cpp:489:24]: Replace [C] with [  ]
7: - /********************* (C) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF
7: + /********************* (  ) COPYRIGHT SHENZHEN LDROBOT CO., LTD *******END OF
7: 
7: Code style divergence in file 'ldlidar_driver/src/serialcom/serial_interface_linux.cpp':
7: 
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:20:0]: Replace [#include "serial_interface_linux.h"\n#include "log_module.h"\n\n\n] with [#include "serial_interface_linux.h"\n\n#include "log_module.h"\n\n]
7: - #include "serial_interface_linux.h"
7: - #include "log_module.h"
7: - 
7: - 
7: - #define MAX_ACK_BUF_LEN 4096
7: + #include "serial_interface_linux.h"
7: + 
7: + #include "log_module.h"
7: + 
7: + #define MAX_ACK_BUF_LEN 4096
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:36:47]: Replace [] with [ ]
7: - SerialInterfaceLinux::~SerialInterfaceLinux() {Close();}
7: + SerialInterfaceLinux::~SerialInterfaceLinux() { Close();}
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:36:55]: Replace [] with [ ]
7: - SerialInterfaceLinux::~SerialInterfaceLinux() {Close();}
7: + SerialInterfaceLinux::~SerialInterfaceLinux() {Close(); }
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:51:12]: Replace [\n      ] with [\n        ]
7: -   if (ioctl(
7: -       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),
7: +   if (ioctl(
7: +         com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:52:83]: Replace [\n      ] with [ ]
7: -       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),
7: -       &options))
7: +       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)), &options))
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:53:16]: Replace [\n  ] with [ ]
7: -       &options))
7: -   {
7: +       &options)) {
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:65:20]: Replace [ ] with [\n    ]
7: -   options.c_lflag &= (tcflag_t) ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL |
7: +   options.c_lflag &=
7: +     (tcflag_t) ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL |
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:65:74]: Replace [\n    ] with [ ]
7: -   options.c_lflag &= (tcflag_t) ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL |
7: -     ISIG | IEXTEN);                                //|ECHOPRT
7: +   options.c_lflag &= (tcflag_t) ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL | ISIG | IEXTEN);                                //|ECHOPRT
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:66:19]: Replace [                                ] with [  ]
7: -     ISIG | IEXTEN);                                //|ECHOPRT
7: +     ISIG | IEXTEN);  //|ECHOPRT
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:78:12]: Replace [\n      ] with [\n        ]
7: -   if (ioctl(
7: -       com_handle_, _IOC(_IOC_WRITE, 'T', 0x2B, sizeof(struct asmtermios::termios2)),
7: +   if (ioctl(
7: +         com_handle_, _IOC(_IOC_WRITE, 'T', 0x2B, sizeof(struct asmtermios::termios2)),
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:79:84]: Replace [\n      ] with [ ]
7: -       com_handle_, _IOC(_IOC_WRITE, 'T', 0x2B, sizeof(struct asmtermios::termios2)),
7: -       &options))
7: +       com_handle_, _IOC(_IOC_WRITE, 'T', 0x2B, sizeof(struct asmtermios::termios2)), &options))
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:80:16]: Replace [\n  ] with [ ]
7: -       &options))
7: -   {
7: +       &options)) {
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:90:12]: Replace [\n      ] with [\n        ]
7: -   if (ioctl(
7: -       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),
7: +   if (ioctl(
7: +         com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:91:83]: Replace [\n      ] with [ ]
7: -       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)),
7: -       &options))
7: +       com_handle_, _IOC(_IOC_READ, 'T', 0x2A, sizeof(struct asmtermios::termios2)), &options))
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:92:16]: Replace [\n  ] with [ ]
7: -       &options))
7: -   {
7: +       &options)) {
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:137:38]: Replace [\n  ] with []
7: - bool SerialInterfaceLinux::ReadFromIO(
7: -   uint8_t * rx_buf, uint32_t rx_buf_len,
7: + bool SerialInterfaceLinux::ReadFromIO(uint8_t * rx_buf, uint32_t rx_buf_len,
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:138:40]: Replace [\n  ] with [ ]
7: -   uint8_t * rx_buf, uint32_t rx_buf_len,
7: -   uint32_t * rx_len)
7: +   uint8_t * rx_buf, uint32_t rx_buf_len, uint32_t * rx_len)
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:168:37]: Replace [\n  ] with []
7: - bool SerialInterfaceLinux::WriteToIo(
7: -   const uint8_t * tx_buf, uint32_t tx_buf_len,
7: + bool SerialInterfaceLinux::WriteToIo(const uint8_t * tx_buf, uint32_t tx_buf_len,
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:169:46]: Replace [\n  ] with [ ]
7: -   const uint8_t * tx_buf, uint32_t tx_buf_len,
7: -   uint32_t * tx_len)
7: +   const uint8_t * tx_buf, uint32_t tx_buf_len, uint32_t * tx_len)
7: [ldlidar_driver/src/serialcom/serial_interface_linux.cpp:201:1]: Replace [ ] with [  ]
7: - } // namespace ldlidar
7: + }  // namespace ldlidar
7: 
7: Code style divergence in file 'tools/include/ldlidar_tools.hpp':
7: 
7: [tools/include/ldlidar_tools.hpp:49:21]: Replace [\n\n\n] with [\n\n]
7: - }  // namespace tools
7: - 
7: - 
7: - #endif  // LDLIDAR_TOOLS_HPP_
7: + }  // namespace tools
7: + 
7: + #endif  // LDLIDAR_TOOLS_HPP_
7: 
7: 18 files with 844 code style divergences
7: No code style divergence in file 'tools/src/ldlidar_tools.cpp'
7: 
7: -- run_test.py: return code 1
7: -- run_test.py: verify result file '/home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/test_results/ldlidar_component/clang_format.xunit.xml'
7/7 Test #7: clang_format .....................***Failed    2.55 sec

43% tests passed[0;0m, [0;31m4 tests failed[0;0m out of 7

Label Time Summary:
clang_format    =   2.55 sec*proc (1 test)
copyright       =   0.87 sec*proc (1 test)
cppcheck        =   0.46 sec*proc (1 test)
cpplint         =   1.41 sec*proc (1 test)
lint_cmake      =   0.27 sec*proc (1 test)
linter          =   7.13 sec*proc (7 tests)
uncrustify      =   0.45 sec*proc (1 test)
xmllint         =   1.13 sec*proc (1 test)

Total Test time (real) =   7.14 sec

The following tests FAILED:
	[0;31m  1 - copyright (Failed)[0;0m
	[0;31m  3 - cpplint (Failed)[0;0m
	[0;31m  4 - lint_cmake (Failed)[0;0m
	[0;31m  7 - clang_format (Failed)[0;0m
Errors while running CTest
Output from these tests are in: /home/udito/OneDrive/UDITO/udito/ROS/ros2_ws/build/ldlidar_component/Testing/Temporary/LastTest.log
Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.
